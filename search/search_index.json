{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"run","text":"<p> Polyglot command runner &amp; smart REPL that lets you script, compile, and iterate in 25+ languages without touching another CLI. </p> <p> </p> <p>Built in Rust for developers who live in multiple runtimes. <code>run</code> gives you a consistent CLI, persistent REPLs, and batteries-included examples for your favorite languages.</p>"},{"location":"#overview","title":"Overview","text":"<p>run is a universal multi-language runner and smart REPL (Read-Eval-Print Loop) written in Rust. It provides a unified interface for executing code across 25 programming languages without the hassle of managing multiple compilers, interpreters, or build tools.</p> <p>Whether you're a beginner learning your first programming language or an experienced polyglot developer, run streamlines your workflow by providing consistent commands and behavior across all supported languages.</p>"},{"location":"#who-is-this-for","title":"Who is this for?","text":"<ul> <li>Beginners: Learn programming without worrying about complex setup procedures. Just install run and start coding in any language.</li> <li>Students: Quickly test code snippets and experiment with different programming paradigms across multiple languages.</li> <li>Developers: Prototype ideas rapidly, test algorithms, and switch between languages seamlessly without context switching.</li> <li>DevOps Engineers: Write and test automation scripts in various languages from a single tool.</li> <li>Educators: Teach programming concepts across multiple languages with a consistent interface.</li> </ul>"},{"location":"#why-was-run-created","title":"Why was run created?","text":"<p>Traditional development workflows require installing and configuring separate tools for each programming language. This creates several problems:</p> <ul> <li>Time-consuming setup: Installing compilers, interpreters, package managers, and configuring environments for each language.</li> <li>Inconsistent interfaces: Each language has different commands and flags for compilation and execution.</li> <li>Cognitive overhead: Remembering different commands and workflows for each language.</li> <li>Barrier to entry: Beginners struggle with setup before writing their first line of code.</li> </ul> <p>run solves these problems by providing a single, unified interface that handles all the complexity behind the scenes. You focus on writing code, and run takes care of the rest.</p>"},{"location":"#why-rust","title":"Why Rust?","text":"<p>run is built with Rust for several compelling reasons:</p> <ul> <li>Performance: Rust's zero-cost abstractions and efficient memory management ensure run starts instantly and executes with minimal overhead.</li> <li>Reliability: Rust's strong type system and ownership model prevent common bugs like null pointer dereferences and data races, making run stable and crash-resistant.</li> <li>Cross-platform: Rust compiles to native code for Windows, macOS, and Linux, providing consistent behavior across all platforms.</li> <li>Memory safety: No garbage collector means predictable performance without unexpected pauses.</li> <li>Modern tooling: Cargo (Rust's package manager) makes building and distributing run straightforward.</li> <li>Future-proof: Rust's growing ecosystem and industry adoption ensure long-term maintainability.</li> </ul>"},{"location":"#quickstart","title":"Quickstart","text":"<pre><code>run --version\n\nrun --lang python --code \"print('hello, polyglot world!')\"\n\nrun examples/go/hello/main.go\n\nrun\n\necho '{\"name\":\"Ada\"}' | run js --code \"const data = JSON.parse(require('fs').readFileSync(0, 'utf8')); console.log(\\`hi \\${data.name}\\`)\"\n\necho \"Hello from stdin\" | run python --code \"import sys; print(sys.stdin.read().strip().upper())\"\n\necho \"world\" | run go --code 'package main; import \"fmt\"; import \"bufio\"; import \"os\"; func main() { scanner := bufio.NewScanner(os.Stdin); scanner.Scan(); fmt.Printf(\"Hello, %s!\\n\", scanner.Text()) }'\n</code></pre>"},{"location":"#installation","title":"Installation","text":"<p>All release assets are published on the GitHub Releases page. Choose the method that works best for your system:</p>"},{"location":"#cargo-rust","title":"Cargo (Rust)","text":"<pre><code>cargo install run-kit\n</code></pre> <p>Installs the <code>run</code> binary from crates.io. Updating? Run <code>cargo install run-kit --force</code>.</p>"},{"location":"#debian-ubuntu","title":"Debian / Ubuntu","text":"<pre><code>ARCH=${ARCH:-amd64}\nDEB_FILE=$(curl -s https://api.github.com/repos/Esubaalew/run/releases/latest \\\n  | grep -oE \"run_[0-9.]+_${ARCH}\\\\.deb\" | head -n 1)\ncurl -LO \"https://github.com/Esubaalew/run/releases/latest/download/${DEB_FILE}\"\ncurl -LO \"https://github.com/Esubaalew/run/releases/latest/download/${DEB_FILE}.sha256\"\nsha256sum --check \"${DEB_FILE}.sha256\"\nsudo apt install \"./${DEB_FILE}\"\n</code></pre>"},{"location":"#windows-scoop","title":"Windows (Scoop)","text":"<pre><code>scoop install https://github.com/Esubaalew/run/releases/latest/download/run-scoop.json\n</code></pre>"},{"location":"#install-script-macos-linux-ubuntu","title":"Install script (macOS / Linux / Ubuntu)","text":"<pre><code>curl -fsSLO https://raw.githubusercontent.com/Esubaalew/run/master/scripts/install.sh\nchmod +x install.sh\n./install.sh --add-path\n</code></pre>"},{"location":"#build-from-source","title":"Build from source","text":"<pre><code>git clone https://github.com/Esubaalew/run.git\ncd run\ncargo install --path .\n</code></pre>"},{"location":"#verify-installation","title":"Verify installation","text":"<pre><code>run --version\n</code></pre>"},{"location":"#how-it-works","title":"How it works","text":"<p><code>run</code> shells out to real toolchains under the hood. Each <code>LanguageEngine</code> implements a small trait that knows how to:</p> <ol> <li>Detect whether the toolchain is available (e.g. <code>python3</code>, <code>go</code>, <code>rustc</code>).</li> <li>Prepare a temporary workspace (compilation for compiled languages, transient scripts for interpreters).</li> <li>Execute snippets, files, or stdin streams and surface stdout/stderr consistently.</li> <li>Manage session state for the interactive REPL (persistent modules, stateful scripts, or regenerated translation units).</li> </ol> <p>This architecture keeps the core lightweight while making it easy to add new runtimes or swap implementations.</p>"},{"location":"#architecture-flow","title":"Architecture Flow","text":"<pre><code>graph TD\n    A[CLI Input] --&gt; B[Parser]\n    B --&gt; C{Language Specified?}\n    C --&gt;|Yes| E[Engine Selector]\n    C --&gt;|No| D[Language Detector]\n    D --&gt; E\n    E --&gt; F{Toolchain Available?}\n    F --&gt;|Yes| G[Language Engine]\n    F --&gt;|No| H[Error: Toolchain Not Found]\n    G --&gt; I{Execution Mode}\n    I --&gt;|REPL| J[Session Manager]\n    I --&gt;|One-shot| K[Execute Code]\n    J --&gt; L[Stateful Execution]\n    K --&gt; M[Capture Output]\n    L --&gt; M\n    M --&gt; N[Format &amp; Display]\n    N --&gt; O[Return Result]\n\n    style A fill:#e1f5ff\n    style G fill:#fff4e1\n    style N fill:#e7ffe1\n    style H fill:#ffe1e1</code></pre>"},{"location":"#supported-languages","title":"Supported languages","text":"<p>run supports 25+ languages across multiple categories:</p> Category Languages &amp; aliases Scripting &amp; shells Bash (<code>bash</code>), Python (<code>py</code>, <code>python</code>), Ruby (<code>rb</code>, <code>ruby</code>), PHP (<code>php</code>), Perl (<code>perl</code>), Groovy (<code>groovy</code>, <code>grv</code>), Lua (<code>lua</code>), R (<code>r</code>), Elixir (<code>ex</code>, <code>elixir</code>) Web &amp; typed scripting JavaScript (<code>js</code>, <code>node</code>), TypeScript (<code>ts</code>, <code>deno</code>), Dart (<code>dart</code>), Kotlin (<code>kt</code>, <code>kotlin</code>) Systems &amp; compiled C (<code>c</code>), C++ (<code>cpp</code>, <code>cxx</code>), Rust (<code>rs</code>, <code>rust</code>), Go (<code>go</code>), Swift (<code>swift</code>), Zig (<code>zig</code>), Nim (<code>nim</code>), Haskell (<code>hs</code>, <code>haskell</code>), Crystal (<code>cr</code>, <code>crystal</code>), C# (<code>cs</code>, <code>csharp</code>), Java (<code>java</code>), Julia (<code>jl</code>, <code>julia</code>)"},{"location":"#examples","title":"Examples","text":"<p>Real programs live under the <code>examples/</code> tree. Each language has <code>hello</code> and <code>progress</code> scenarios:</p> <pre><code>run examples/rust/hello.rs\nrun examples/typescript/progress.ts\nrun examples/python/counter.py\n</code></pre>"},{"location":"#repl","title":"REPL","text":"<p>Inside the REPL, you can use these commands:</p> Command Purpose <code>:help</code> List available meta commands <code>:languages</code> Show supported languages <code>:lang &lt;id&gt;</code> or <code>:&lt;alias&gt;</code> Switch the active language (<code>:py</code>, <code>:go</code>, \u2026) <code>:detect on/off</code> Control snippet language auto-detection <code>:load path/to/file</code> Execute a file inside the current session <code>:reset</code> Clear the accumulated session state <code>:exit</code> / <code>:quit</code> Leave the REPL"},{"location":"#license","title":"License","text":"<p>Apache 2.0. See LICENSE for details.</p>"},{"location":"about/architecture/","title":"Architecture","text":"<p>Understanding how <code>run</code> works under the hood.</p>"},{"location":"about/architecture/#high-level-overview","title":"High-Level Overview","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   CLI Input  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u2502\n       \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502    Parser    \u2502  Parse args &amp; code\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u2502\n       \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Detector   \u2502  Detect language\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u2502\n       \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Engine     \u2502  Select engine\n\u2502   Selector   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u2502\n       \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Language    \u2502  Execute code\n\u2502  Engine      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u2502\n       \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Output     \u2502  Return result\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"about/architecture/#components","title":"Components","text":""},{"location":"about/architecture/#cli-interface","title":"CLI Interface","text":"<p>Handles command-line argument parsing using <code>clap</code>.</p>"},{"location":"about/architecture/#language-detector","title":"Language Detector","text":"<p>Analyzes code patterns or file extensions to determine the language.</p>"},{"location":"about/architecture/#engine-selector","title":"Engine Selector","text":"<p>Chooses the appropriate language engine based on detection.</p>"},{"location":"about/architecture/#language-engines","title":"Language Engines","text":"<p>Each language has its own engine implementing:</p> <pre><code>trait LanguageEngine {\n    fn execute(&amp;self, code: &amp;str) -&gt; Result&lt;Output&gt;;\n    fn detect(&amp;self, code: &amp;str) -&gt; bool;\n    fn is_available(&amp;self) -&gt; bool;\n}\n</code></pre>"},{"location":"about/architecture/#repl-manager","title":"REPL Manager","text":"<p>Maintains session state for interactive mode.</p>"},{"location":"about/architecture/#execution-flow","title":"Execution Flow","text":"<ol> <li>Parse CLI arguments</li> <li>Detect language (if not explicit)</li> <li>Check if language toolchain is available</li> <li>Create temporary workspace (if needed)</li> <li>Execute code through language engine</li> <li>Capture and format output</li> <li>Clean up temporary files</li> </ol>"},{"location":"about/architecture/#more-details","title":"More Details","text":"<p>For complete implementation details, see the source code.</p>"},{"location":"about/architecture/#next-steps","title":"Next Steps","text":"<p>Why Rust? \u2192 Contributing \u2192</p>"},{"location":"about/contributing/","title":"Contributing","text":"<p>Thank you for considering contributing to <code>run</code>! We welcome contributions of all kinds.</p>"},{"location":"about/contributing/#ways-to-contribute","title":"Ways to Contribute","text":""},{"location":"about/contributing/#1-report-bugs","title":"1. Report Bugs","text":"<p>Found a bug? Open an issue with:</p> <ul> <li>Description of the issue</li> <li>Steps to reproduce</li> <li>Expected vs actual behavior</li> <li>Your environment (OS, versions, etc.)</li> </ul>"},{"location":"about/contributing/#2-suggest-features","title":"2. Suggest Features","text":"<p>Have an idea? Open a feature request with:</p> <ul> <li>Description of the feature</li> <li>Use cases</li> <li>Why it would be useful</li> </ul>"},{"location":"about/contributing/#3-improve-documentation","title":"3. Improve Documentation","text":"<p>Documentation can always be better:</p> <ul> <li>Fix typos</li> <li>Add examples</li> <li>Clarify explanations</li> <li>Add missing topics</li> </ul>"},{"location":"about/contributing/#4-add-language-support","title":"4. Add Language Support","text":"<p>Want to add a new language?</p> <ol> <li>Check the language engine interface</li> <li>Implement the trait for your language</li> <li>Add tests</li> <li>Submit a PR</li> </ol>"},{"location":"about/contributing/#5-fix-bugs","title":"5. Fix Bugs","text":"<p>Browse open issues and submit fixes!</p>"},{"location":"about/contributing/#development-setup","title":"Development Setup","text":""},{"location":"about/contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Rust (latest stable)</li> <li>Git</li> <li>Language toolchains for testing</li> </ul>"},{"location":"about/contributing/#clone-and-build","title":"Clone and Build","text":"<pre><code>git clone https://github.com/Esubaalew/run.git\ncd run\ncargo build\ncargo test\n</code></pre>"},{"location":"about/contributing/#run-tests","title":"Run Tests","text":"<pre><code>cargo test\ncargo test test_python\ncargo test -- --nocapture\n</code></pre>"},{"location":"about/contributing/#coding-guidelines","title":"Coding Guidelines","text":""},{"location":"about/contributing/#rust-style","title":"Rust Style","text":"<ul> <li>Follow Rust API Guidelines</li> <li>Use <code>cargo fmt</code> before committing</li> <li>Run <code>cargo clippy</code> and fix warnings</li> <li>Add tests for new features</li> </ul>"},{"location":"about/contributing/#commit-messages","title":"Commit Messages","text":"<pre><code>feat: add support for OCaml\nfix: handle edge case in language detection\ndocs: improve Python examples\ntest: add tests for Rust REPL\n</code></pre>"},{"location":"about/contributing/#pr-process","title":"PR Process","text":"<ol> <li>Fork the repository</li> <li>Create a feature branch</li> <li>Make your changes</li> <li>Add tests</li> <li>Run tests and linting</li> <li>Submit PR with description</li> </ol>"},{"location":"about/contributing/#code-of-conduct","title":"Code of Conduct","text":"<ul> <li>Be respectful</li> <li>Be constructive</li> <li>Be welcoming</li> <li>Be patient</li> </ul>"},{"location":"about/contributing/#questions","title":"Questions?","text":"<ul> <li>GitHub Discussions</li> <li>X (Twitter)</li> </ul>"},{"location":"about/contributing/#license","title":"License","text":"<p>By contributing, you agree that your contributions will be licensed under Apache 2.0.</p> <p>Thank you for contributing! </p>"},{"location":"about/license/","title":"License","text":"<p><code>run</code> is licensed under the Apache License, Version 2.0.</p>"},{"location":"about/license/#apache-license-20","title":"Apache License 2.0","text":"<p>Copyright 2024 Esubalew Chekol</p> <p>Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at</p> <pre><code>http://www.apache.org/licenses/LICENSE-2.0\n</code></pre> <p>Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.</p>"},{"location":"about/license/#what-this-means","title":"What This Means","text":""},{"location":"about/license/#you-can","title":"You Can","text":"<ul> <li>Use <code>run</code> for personal or commercial purposes</li> <li>Modify the source code</li> <li>Distribute original or modified versions</li> <li>Use <code>run</code> in proprietary software</li> </ul>"},{"location":"about/license/#you-must","title":"You Must","text":"<ul> <li>Include the license notice in distributions</li> <li>Include the copyright notice</li> <li>Document significant changes</li> <li>Provide attribution</li> </ul>"},{"location":"about/license/#you-cannot","title":"You Cannot","text":"<ul> <li>Hold the authors liable</li> <li>Use trademarks without permission</li> </ul>"},{"location":"about/license/#full-license-text","title":"Full License Text","text":"<p>The full Apache 2.0 license text is available at: - apache.org/licenses/LICENSE-2.0 - LICENSE file in repository</p>"},{"location":"about/license/#dependencies","title":"Dependencies","text":"<p><code>run</code> uses several open-source dependencies, each with their own licenses. See Cargo.toml for the complete list.</p>"},{"location":"about/license/#questions","title":"Questions?","text":"<p>For licensing questions, open an issue on GitHub.</p>"},{"location":"about/why-rust/","title":"Why Rust?","text":"<p><code>run</code> is built with Rust for compelling technical and practical reasons. This page explains why Rust was the right choice for building a universal code runner.</p>"},{"location":"about/why-rust/#the-requirements","title":"The Requirements","text":"<p>Building a universal code runner requires:</p> <ol> <li>Fast startup - Users expect instant execution</li> <li>Low overhead - Minimal resource consumption</li> <li>Reliability - No crashes or unexpected behavior</li> <li>Cross-platform - Works on Linux, macOS, and Windows</li> <li>Safe concurrency - Handle multiple processes safely</li> <li>Easy distribution - Single binary, no dependencies</li> </ol> <p>Rust excels at all of these.</p>"},{"location":"about/why-rust/#performance","title":"Performance","text":""},{"location":"about/why-rust/#zero-cost-abstractions","title":"Zero-Cost Abstractions","text":"<p>Rust's zero-cost abstractions mean you don't pay for features you don't use:</p> <pre><code>// High-level code\nlet doubled: Vec&lt;i32&gt; = numbers.iter()\n    .map(|x| x * 2)\n    .collect();\n\n// Compiles to efficient machine code equivalent to:\nfor i in 0..numbers.len() {\n    doubled[i] = numbers[i] * 2;\n}\n</code></pre> <p>Result: <code>run</code> starts in milliseconds, not seconds.</p>"},{"location":"about/why-rust/#no-garbage-collection","title":"No Garbage Collection","text":"<p>Unlike Go or Java, Rust has no GC pauses:</p> <ul> <li>Predictable performance</li> <li>Low memory footprint</li> <li>Instant response times</li> </ul> <p>Measurement: <pre><code># run startup time\n$ time run python \"print('hello')\"\n# real: 0.002s\n\n# Equivalent Python interpreter startup\n$ time python -c \"print('hello')\"\n# real: 0.020s\n</code></pre></p> <p>The overhead is minimal!</p>"},{"location":"about/why-rust/#efficient-memory-management","title":"Efficient Memory Management","text":"<p>Rust's ownership system ensures efficient memory use without manual management:</p> <pre><code>// Temporary file automatically cleaned up\n{\n    let temp_file = NamedTempFile::new()?;\n    // Use temp_file\n} // File is automatically deleted here\n</code></pre> <p>No memory leaks, no manual <code>free()</code> calls.</p>"},{"location":"about/why-rust/#reliability","title":"Reliability","text":""},{"location":"about/why-rust/#memory-safety","title":"Memory Safety","text":"<p>Rust prevents common bugs at compile-time:</p> <p>No null pointer dereferences: <pre><code>//  Won't compile\nlet x: String = null;\n\n//  Explicit handling\nlet x: Option&lt;String&gt; = None;\nmatch x {\n    Some(value) =&gt; println!(\"{}\", value),\n    None =&gt; println!(\"No value\"),\n}\n</code></pre></p> <p>No buffer overflows: <pre><code>//  Won't compile - index might be out of bounds\nlet value = array[index];\n\n//  Safe access\nif let Some(value) = array.get(index) {\n    println!(\"{}\", value);\n}\n</code></pre></p> <p>Result: <code>run</code> doesn't crash on edge cases.</p>"},{"location":"about/why-rust/#thread-safety","title":"\ud83d\udd12 Thread Safety","text":"<p>Rust's type system prevents data races:</p> <pre><code>//  Won't compile - concurrent mutation\nlet mut data = vec![1, 2, 3];\nthread::spawn(|| data.push(4));\ndata.push(5);\n\n//  Safe concurrency\nlet data = Arc::new(Mutex::new(vec![1, 2, 3]));\nlet data_clone = data.clone();\nthread::spawn(move || {\n    data_clone.lock().unwrap().push(4);\n});\ndata.lock().unwrap().push(5);\n</code></pre> <p>Result: Safe handling of multiple language processes.</p>"},{"location":"about/why-rust/#explicit-error-handling","title":"Explicit Error Handling","text":"<p>Rust forces you to handle errors:</p> <pre><code>//  Won't compile - ignoring potential error\nlet file = File::open(\"config.toml\");\n\n//  Explicit handling\nlet file = File::open(\"config.toml\")?;\n// or\nlet file = match File::open(\"config.toml\") {\n    Ok(f) =&gt; f,\n    Err(e) =&gt; return Err(e),\n};\n</code></pre> <p>Result: Errors are handled gracefully, not ignored.</p>"},{"location":"about/why-rust/#cross-platform","title":"Cross-Platform","text":""},{"location":"about/why-rust/#write-once-compile-anywhere","title":"Write Once, Compile Anywhere","text":"<p>Rust's standard library abstracts platform differences:</p> <pre><code>// Works on Linux, macOS, Windows\nlet output = Command::new(\"python3\")\n    .arg(\"script.py\")\n    .output()?;\n</code></pre> <p>Rust handles: - Path separators (<code>/</code> vs <code>\\</code>) - Line endings (<code>\\n</code> vs <code>\\r\\n</code>) - Process spawning - File permissions - etc.</p>"},{"location":"about/why-rust/#single-binary-distribution","title":"Single Binary Distribution","text":"<p>Rust compiles to native code with static linking:</p> <pre><code># One binary per platform\nrun-linux-x86_64\nrun-macos-arm64\nrun-windows-x86_64.exe\n</code></pre> <p>No runtime dependencies! Users just download and run.</p>"},{"location":"about/why-rust/#native-performance-everywhere","title":"Native Performance Everywhere","text":"<p>Unlike interpreted languages or VMs:</p> <ul> <li>No JVM required (Java)</li> <li>No Node.js runtime (JavaScript)</li> <li>No Python interpreter overhead</li> </ul> <p>Just native machine code.</p>"},{"location":"about/why-rust/#developer-experience","title":"Developer Experience","text":""},{"location":"about/why-rust/#excellent-tooling","title":"Excellent Tooling","text":"<p>Cargo (Rust's package manager) is phenomenal:</p> <pre><code># Create new project\ncargo new run-kit\n\n# Build\ncargo build --release\n\n# Test\ncargo test\n\n# Format code\ncargo fmt\n\n# Lint\ncargo clippy\n\n# Update dependencies\ncargo update\n</code></pre> <p>Everything is integrated and fast.</p>"},{"location":"about/why-rust/#helpful-compiler","title":"Helpful Compiler","text":"<p>Rust's compiler provides excellent error messages:</p> <pre><code>let numbers = vec![1, 2, 3];\nlet first = numbers[0];\nlet second = numbers[0];\nlet _ = numbers; // Move\n\n// Error: use of moved value\nprintln!(\"{}\", numbers[0]);\n</code></pre> <pre><code>error[E0382]: borrow of moved value: `numbers`\n  --&gt; src/main.rs:5:20\n   |\n2  |     let numbers = vec![1, 2, 3];\n   |         ------- move occurs because `numbers` has type `Vec&lt;i32&gt;`\n5  |     println!(\"{}\", numbers[0]);\n   |                    ^^^^^^^ value borrowed here after move\n   |\nhelp: consider cloning the value if the performance cost is acceptable\n   |\n4  |     let _ = numbers.clone();\n   |                   ++++++++\n</code></pre> <p>The compiler guides you to correct code!</p>"},{"location":"about/why-rust/#great-documentation","title":"Great Documentation","text":"<ul> <li>The Rust Book - Excellent introduction</li> <li>Rust by Example - Learn by doing</li> <li>Built-in docs: <code>cargo doc --open</code></li> </ul>"},{"location":"about/why-rust/#built-in-testing","title":"\ud83e\uddea Built-in Testing","text":"<pre><code>#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_detection() {\n        let lang = detect_language(\"print('hello')\");\n        assert_eq!(lang, Some(Language::Python));\n    }\n}\n</code></pre> <p>Run with <code>cargo test</code>.</p>"},{"location":"about/why-rust/#modern-language-features","title":"Modern Language Features","text":""},{"location":"about/why-rust/#pattern-matching","title":"Pattern Matching","text":"<pre><code>match language {\n    Language::Python =&gt; run_python(code),\n    Language::Rust =&gt; compile_rust(code),\n    Language::JavaScript =&gt; run_node(code),\n    _ =&gt; Err(\"Unsupported language\"),\n}\n</code></pre>"},{"location":"about/why-rust/#traits-similar-to-interfaces","title":"Traits (Similar to Interfaces)","text":"<pre><code>trait LanguageEngine {\n    fn execute(&amp;self, code: &amp;str) -&gt; Result&lt;Output&gt;;\n    fn detect(&amp;self, code: &amp;str) -&gt; bool;\n}\n\nimpl LanguageEngine for PythonEngine {\n    fn execute(&amp;self, code: &amp;str) -&gt; Result&lt;Output&gt; {\n        // Implementation\n    }\n    // ...\n}\n</code></pre>"},{"location":"about/why-rust/#iterators","title":"Iterators","text":"<pre><code>let total: i32 = numbers.iter()\n    .filter(|x| **x &gt; 0)\n    .map(|x| x * 2)\n    .sum();\n</code></pre>"},{"location":"about/why-rust/#ecosystem","title":"Ecosystem","text":""},{"location":"about/why-rust/#cratesio","title":"Crates.io","text":"<p>Rich ecosystem of libraries:</p> <ul> <li>clap - Command-line argument parsing</li> <li>serde - Serialization/deserialization</li> <li>tokio - Async runtime</li> <li>regex - Regular expressions</li> <li>tempfile - Temporary files</li> </ul> <p>All integrated with Cargo.</p>"},{"location":"about/why-rust/#security","title":"\ud83d\udd10 Security","text":"<p>Rust's memory safety prevents:</p> <ul> <li>Buffer overflows</li> <li>Use-after-free</li> <li>Data races</li> <li>Null pointer dereferences</li> </ul> <p>Impact: <code>run</code> is secure by default.</p>"},{"location":"about/why-rust/#real-world-performance","title":"Real-World Performance","text":""},{"location":"about/why-rust/#startup-time-comparison","title":"Startup Time Comparison","text":"Implementation Startup Time Rust 2ms Go 5ms Python 20ms Node.js 30ms"},{"location":"about/why-rust/#memory-usage-comparison","title":"Memory Usage Comparison","text":"Implementation Memory (idle) Rust 2 MB Go 10 MB Python 20 MB Node.js 35 MB"},{"location":"about/why-rust/#binary-size-comparison","title":"Binary Size Comparison","text":"Implementation Binary Size Rust 3 MB Go 6 MB Python 50+ MB (with runtime) Node.js 100+ MB (with runtime)"},{"location":"about/why-rust/#alternatives-considered","title":"Alternatives Considered","text":""},{"location":"about/why-rust/#python","title":"Python","text":"<p>Pros: - Quick to write - Large ecosystem</p> <p>Cons: - Slow startup (~20ms) - Large runtime dependency - Not memory-safe - GIL limits concurrency</p>"},{"location":"about/why-rust/#go","title":"Go","text":"<p>Pros: - Fast compilation - Good concurrency - Simple syntax</p> <p>Cons: - GC pauses - Larger binaries - Less type safety than Rust - Less control over memory</p>"},{"location":"about/why-rust/#cc","title":"C/C++","text":"<p>Pros: - Maximum performance - No runtime</p> <p>Cons: - Memory unsafe - Manual memory management - Harder to maintain - No modern tooling like Cargo</p>"},{"location":"about/why-rust/#typescriptnodejs","title":"TypeScript/Node.js","text":"<p>Pros: - Popular - Good ecosystem</p> <p>Cons: - Requires Node.js runtime - Slow startup - High memory usage - Not suitable for systems programming</p>"},{"location":"about/why-rust/#conclusion","title":"Conclusion","text":"<p>Rust was chosen for <code>run</code> because it provides:</p> <p>Performance - Fast startup and low overhead Reliability - Memory safety and thread safety Portability - Cross-platform with single binary Maintainability - Excellent tooling and compiler Security - Safe by default Modern - Great language features  </p> <p>These benefits directly translate to a better user experience:</p> <ul> <li>Instant execution</li> <li>Reliable behavior</li> <li>Easy installation</li> <li>Small memory footprint</li> <li>No crashes or undefined behavior</li> </ul>"},{"location":"about/why-rust/#learn-rust","title":"Learn Rust","text":"<p>Interested in Rust?</p> <ul> <li>The Rust Programming Language Book</li> <li>Rust by Example</li> <li>Rustlings - Small exercises</li> <li>Rust Playground - Try Rust online</li> </ul>"},{"location":"about/why-rust/#next-steps","title":"Next Steps","text":"<p>Architecture Contributing</p>"},{"location":"advanced/aliases/","title":"Language Aliases","text":"<p>Every language in <code>run</code> has multiple aliases for convenience. Use whichever feels most natural to you.</p>"},{"location":"advanced/aliases/#complete-alias-reference","title":"Complete Alias Reference","text":""},{"location":"advanced/aliases/#python","title":"Python","text":"Alias Description <code>python</code> Full name <code>py</code> Short form <code>py3</code> Version specific <code>python3</code> Full version name <pre><code>run python \"print('hello')\"\nrun py \"print('hello')\"\nrun py3 \"print('hello')\"\nrun python3 \"print('hello')\"\n</code></pre>"},{"location":"advanced/aliases/#javascript","title":"JavaScript","text":"Alias Description <code>javascript</code> Full name <code>js</code> Short form <code>node</code> Runtime name <code>nodejs</code> Full runtime name <pre><code>run javascript \"console.log('hello')\"\nrun js \"console.log('hello')\"\nrun node \"console.log('hello')\"\nrun nodejs \"console.log('hello')\"\n</code></pre>"},{"location":"advanced/aliases/#typescript","title":"TypeScript","text":"Alias Description <code>typescript</code> Full name <code>ts</code> Short form <code>ts-node</code> Runtime name <code>deno</code> Alternative runtime <pre><code>run typescript \"console.log('hello')\"\nrun ts \"console.log('hello')\"\nrun ts-node \"console.log('hello')\"\nrun deno \"console.log('hello')\"\n</code></pre>"},{"location":"advanced/aliases/#rust","title":"Rust","text":"Alias Description <code>rust</code> Full name <code>rs</code> Short form <pre><code>run rust \"fn main() { println!(\\\"hello\\\"); }\"\nrun rs \"fn main() { println!(\\\"hello\\\"); }\"\n</code></pre>"},{"location":"advanced/aliases/#go","title":"Go","text":"Alias Description <code>go</code> Standard name <code>golang</code> Full name <pre><code>run go \"package main; func main() { println(\\\"hello\\\") }\"\nrun golang \"package main; func main() { println(\\\"hello\\\") }\"\n</code></pre>"},{"location":"advanced/aliases/#c","title":"C","text":"Alias Description <code>c</code> Language name <code>gcc</code> Compiler name <code>clang</code> Alternative compiler <pre><code>run c \"int main() { printf(\\\"hello\\\\n\\\"); }\"\nrun gcc \"int main() { printf(\\\"hello\\\\n\\\"); }\"\nrun clang \"int main() { printf(\\\"hello\\\\n\\\"); }\"\n</code></pre>"},{"location":"advanced/aliases/#c_1","title":"C++","text":"Alias Description <code>cpp</code> Short form <code>c++</code> Symbol form <code>g++</code> Compiler name <code>cxx</code> Alternative <pre><code>run cpp \"int main() { std::cout &lt;&lt; \\\"hello\\\"; }\"\nrun c++ \"int main() { std::cout &lt;&lt; \\\"hello\\\"; }\"\nrun g++ \"int main() { std::cout &lt;&lt; \\\"hello\\\"; }\"\nrun cxx \"int main() { std::cout &lt;&lt; \\\"hello\\\"; }\"\n</code></pre>"},{"location":"advanced/aliases/#java","title":"Java","text":"Alias Description <code>java</code> Language name <pre><code>run java \"class Main { public static void main(String[] args) { System.out.println(\\\"hello\\\"); } }\"\n</code></pre>"},{"location":"advanced/aliases/#c_2","title":"C","text":"Alias Description <code>csharp</code> Full name <code>cs</code> Short form <code>dotnet</code> Runtime name <pre><code>run csharp \"class Program { static void Main() { System.Console.WriteLine(\\\"hello\\\"); } }\"\nrun cs \"class Program { static void Main() { System.Console.WriteLine(\\\"hello\\\"); } }\"\nrun dotnet \"class Program { static void Main() { System.Console.WriteLine(\\\"hello\\\"); } }\"\n</code></pre>"},{"location":"advanced/aliases/#ruby","title":"Ruby","text":"Alias Description <code>ruby</code> Full name <code>rb</code> Short form <code>irb</code> REPL name <pre><code>run ruby \"puts 'hello'\"\nrun rb \"puts 'hello'\"\nrun irb \"puts 'hello'\"\n</code></pre>"},{"location":"advanced/aliases/#bash","title":"Bash","text":"Alias Description <code>bash</code> Full name <code>sh</code> Shell <code>shell</code> Generic shell <code>zsh</code> Alternative shell <pre><code>run bash \"echo hello\"\nrun sh \"echo hello\"\nrun shell \"echo hello\"\nrun zsh \"echo hello\"\n</code></pre>"},{"location":"advanced/aliases/#php","title":"PHP","text":"Alias Description <code>php</code> Language name <code>php-cli</code> CLI version <pre><code>run php \"echo 'hello';\"\nrun php-cli \"echo 'hello';\"\n</code></pre>"},{"location":"advanced/aliases/#lua","title":"Lua","text":"Alias Description <code>lua</code> Language name <code>luajit</code> JIT compiler <pre><code>run lua \"print('hello')\"\nrun luajit \"print('hello')\"\n</code></pre>"},{"location":"advanced/aliases/#perl","title":"Perl","text":"Alias Description <code>perl</code> Language name <code>pl</code> Short form <pre><code>run perl \"print 'hello'\"\nrun pl \"print 'hello'\"\n</code></pre>"},{"location":"advanced/aliases/#swift","title":"Swift","text":"Alias Description <code>swift</code> Language name <code>swiftlang</code> Full name <pre><code>run swift \"print(\\\"hello\\\")\"\nrun swiftlang \"print(\\\"hello\\\")\"\n</code></pre>"},{"location":"advanced/aliases/#kotlin","title":"Kotlin","text":"Alias Description <code>kotlin</code> Full name <code>kt</code> Short form <code>kts</code> Kotlin script <pre><code>run kotlin \"fun main() { println(\\\"hello\\\") }\"\nrun kt \"fun main() { println(\\\"hello\\\") }\"\nrun kts \"println(\\\"hello\\\")\"\n</code></pre>"},{"location":"advanced/aliases/#dart","title":"Dart","text":"Alias Description <code>dart</code> Language name <code>dartlang</code> Full name <code>flutter</code> Framework name <pre><code>run dart \"void main() { print('hello'); }\"\nrun dartlang \"void main() { print('hello'); }\"\nrun flutter \"void main() { print('hello'); }\"\n</code></pre>"},{"location":"advanced/aliases/#r","title":"R","text":"Alias Description <code>r</code> Language name <code>rscript</code> Script runner <code>cran</code> Repository name <pre><code>run r \"print('hello')\"\nrun rscript \"print('hello')\"\nrun cran \"print('hello')\"\n</code></pre>"},{"location":"advanced/aliases/#haskell","title":"Haskell","text":"Alias Description <code>haskell</code> Full name <code>hs</code> Short form <code>ghci</code> REPL name <pre><code>run haskell \"main = putStrLn \\\"hello\\\"\"\nrun hs \"main = putStrLn \\\"hello\\\"\"\nrun ghci \"putStrLn \\\"hello\\\"\"\n</code></pre>"},{"location":"advanced/aliases/#elixir","title":"Elixir","text":"Alias Description <code>elixir</code> Full name <code>ex</code> Short form <code>exs</code> Script extension <code>iex</code> REPL name <pre><code>run elixir \"IO.puts \\\"hello\\\"\"\nrun ex \"IO.puts \\\"hello\\\"\"\nrun exs \"IO.puts \\\"hello\\\"\"\nrun iex \"IO.puts \\\"hello\\\"\"\n</code></pre>"},{"location":"advanced/aliases/#julia","title":"Julia","text":"Alias Description <code>julia</code> Language name <code>jl</code> Short form <pre><code>run julia \"println(\\\"hello\\\")\"\nrun jl \"println(\\\"hello\\\")\"\n</code></pre>"},{"location":"advanced/aliases/#crystal","title":"Crystal","text":"Alias Description <code>crystal</code> Language name <code>cr</code> Short form <code>crystal-lang</code> Full name <pre><code>run crystal \"puts \\\"hello\\\"\"\nrun cr \"puts \\\"hello\\\"\"\nrun crystal-lang \"puts \\\"hello\\\"\"\n</code></pre>"},{"location":"advanced/aliases/#zig","title":"Zig","text":"Alias Description <code>zig</code> Language name <code>ziglang</code> Full name <pre><code>run zig \"pub fn main() !void { ... }\"\nrun ziglang \"pub fn main() !void { ... }\"\n</code></pre>"},{"location":"advanced/aliases/#nim","title":"Nim","text":"Alias Description <code>nim</code> Language name <code>nimlang</code> Full name <pre><code>run nim \"echo \\\"hello\\\"\"\nrun nimlang \"echo \\\"hello\\\"\"\n</code></pre>"},{"location":"advanced/aliases/#usage-tips","title":"Usage Tips","text":""},{"location":"advanced/aliases/#1-use-short-forms-for-speed","title":"1. Use Short Forms for Speed","text":"<pre><code>#  Faster to type\nrun py \"...\"\nrun js \"...\"\nrun rs \"...\"\n\n#  Also valid\nrun python \"...\"\nrun javascript \"...\"\nrun rust \"...\"\n</code></pre>"},{"location":"advanced/aliases/#2-be-consistent-in-scripts","title":"2. Be Consistent in Scripts","text":"<pre><code>#!/bin/bash\nrun py script1.py\nrun py script2.py\nrun py script3.py\n</code></pre>"},{"location":"advanced/aliases/#3-use-runtime-names-when-relevant","title":"3. Use Runtime Names When Relevant","text":"<pre><code>run node server.js\nrun deno app.ts\n</code></pre>"},{"location":"advanced/aliases/#4-match-your-teams-conventions","title":"4. Match Your Team's Conventions","text":"<pre><code>run py \"...\"\nrun python \"...\"\n</code></pre>"},{"location":"advanced/aliases/#alias-detection","title":"Alias Detection","text":"<p>Check which aliases are available:</p> <pre><code>$ run\n&gt;&gt;&gt; :languages\nAvailable language engines:\n\u2713 python (python, py, py3, python3)\n\u2713 javascript (javascript, js, node, nodejs)\n\u2713 rust (rust, rs)\n...\n</code></pre>"},{"location":"advanced/aliases/#custom-aliases-shell","title":"Custom Aliases (Shell)","text":"<p>You can create your own aliases in your shell:</p> <pre><code>alias pyrun='run python'\nalias jsrun='run javascript'\nalias rsrun='run rust'\n\npyrun \"print('hello')\"\njsrun \"console.log('hello')\"\nrsrun \"fn main() { println!(\\\"hello\\\"); }\"\n</code></pre>"},{"location":"advanced/aliases/#next-steps","title":"Next Steps","text":"<p>Environment Variables</p>"},{"location":"getting-started/first-steps/","title":"First Steps","text":"<p>Now that you have <code>run</code> installed, let's explore what makes it powerful and versatile.</p>"},{"location":"getting-started/first-steps/#understanding-the-command-structure","title":"Understanding the Command Structure","text":"<p>The basic anatomy of a <code>run</code> command:</p> <pre><code>run [OPTIONS] [LANGUAGE] [CODE|FILE]\n</code></pre>"},{"location":"getting-started/first-steps/#components","title":"Components","text":"Component Description Required <code>OPTIONS</code> Flags like <code>--lang</code>, <code>--code</code> Optional <code>LANGUAGE</code> Language name or alias Optional* <code>CODE\\|FILE</code> Code string or file path Required <p>*Required if the language can't be auto-detected.</p>"},{"location":"getting-started/first-steps/#auto-detection-in-action","title":"Auto-Detection in Action","text":"<p><code>run</code> can often detect the language automatically:</p>"},{"location":"getting-started/first-steps/#from-file-extensions","title":"From File Extensions","text":"<pre><code># These work without specifying --lang\nrun script.py          # Detected as Python\nrun main.go            # Detected as Go\nrun app.js             # Detected as JavaScript\nrun program.rs         # Detected as Rust\nrun hello.rb           # Detected as Ruby\n</code></pre>"},{"location":"getting-started/first-steps/#from-code-patterns","title":"From Code Patterns","text":"<p>Distinctive syntax is auto-detected:</p> <pre><code># Rust - unique syntax\nrun \"fn main() { println!(\\\"hello\\\"); }\"\n\n# Go - package declaration\nrun \"package main; import \\\"fmt\\\"; func main() { fmt.Println(\\\"hello\\\") }\"\n\n# JavaScript - console.log\nrun \"console.log('hello')\"\n</code></pre> <p>Ambiguous Code</p> <pre><code>#  Ambiguous - could be Python, Ruby, Lua, etc.\nrun \"print('hello')\"\n\n#  Explicit - always correct\nrun python \"print('hello')\"\n</code></pre>"},{"location":"getting-started/first-steps/#working-with-files","title":"Working with Files","text":""},{"location":"getting-started/first-steps/#single-file-execution","title":"Single File Execution","text":"fibonacci.py<pre><code>def fib(n):\n    if n &lt;= 1:\n        return n\n    return fib(n-1) + fib(n-2)\n\nfor i in range(10):\n    print(f\"fib({i}) = {fib(i)}\")\n</code></pre> <p>Run it:</p> <pre><code>run fibonacci.py\n</code></pre>"},{"location":"getting-started/first-steps/#scripts-with-arguments","title":"Scripts with Arguments","text":"<p><code>run</code> passes command-line arguments to your script:</p> greet.py<pre><code>import sys\n\nif len(sys.argv) &gt; 1:\n    name = sys.argv[1]\nelse:\n    name = \"World\"\n\nprint(f\"Hello, {name}!\")\n</code></pre> <p>Run with arguments:</p> <pre><code>run greet.py Alice\n# Output: Hello, Alice!\n\nrun greet.py\n# Output: Hello, World!\n</code></pre>"},{"location":"getting-started/first-steps/#environment-variables","title":"Environment Variables","text":"<p>Your scripts have access to environment variables:</p> <pre><code>export API_KEY=\"secret123\"\nrun python \"import os; print(f'API Key: {os.getenv(\\\"API_KEY\\\")}')\"\n</code></pre> <p>Output: <pre><code>API Key: secret123\n</code></pre></p>"},{"location":"getting-started/first-steps/#working-with-stdin","title":"Working with stdin","text":""},{"location":"getting-started/first-steps/#reading-from-stdin","title":"Reading from stdin","text":"upper.py<pre><code>import sys\nfor line in sys.stdin:\n    print(line.upper(), end='')\n</code></pre> <p>Use it in a pipeline:</p> <pre><code>echo \"hello world\" | run upper.py\n# Output: HELLO WORLD\n\ncat file.txt | run upper.py &gt; output.txt\n</code></pre>"},{"location":"getting-started/first-steps/#inline-stdin-handling","title":"Inline stdin handling","text":"<pre><code>echo \"testing stdin\" | run python \"\nimport sys\ntext = sys.stdin.read()\nprint(text.upper())\n\"\n</code></pre>"},{"location":"getting-started/first-steps/#complex-data-processing","title":"Complex Data Processing","text":""},{"location":"getting-started/first-steps/#json-manipulation","title":"JSON Manipulation","text":"<pre><code># Create and process JSON\nrun python \"\nimport json\n\ndata = {\n    'users': [\n        {'name': 'Alice', 'age': 30},\n        {'name': 'Bob', 'age': 25}\n    ]\n}\n\n# Filter users over 26\nadults = [u for u in data['users'] if u['age'] &gt; 26]\nprint(json.dumps(adults, indent=2))\n\"\n</code></pre> <p>Output: <pre><code>[\n  {\n    \"name\": \"Alice\",\n    \"age\": 30\n  }\n]\n</code></pre></p>"},{"location":"getting-started/first-steps/#cross-language-data-flow","title":"Cross-Language Data Flow","text":"<pre><code># Python generates data\nrun python \"\nimport json\nprint(json.dumps({'numbers': [1,2,3,4,5]}))\n\" | \\\n# JavaScript processes it\nrun js \"\nconst data = JSON.parse(require('fs').readFileSync(0, 'utf8'));\nconst doubled = data.numbers.map(n =&gt; n * 2);\nconsole.log(JSON.stringify({doubled: doubled}));\n\" | \\\n# Python presents it\nrun python \"\nimport sys, json\nresult = json.load(sys.stdin)\nprint('Doubled numbers:', result['doubled'])\n\"\n</code></pre> <p>Output: <pre><code>Doubled numbers: [2, 4, 6, 8, 10]\n</code></pre></p>"},{"location":"getting-started/first-steps/#quick-prototyping","title":"Quick Prototyping","text":""},{"location":"getting-started/first-steps/#algorithm-testing","title":"Algorithm Testing","text":"<p>Test algorithms across languages:</p> PythonRust <pre><code>run python \"\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left &lt;= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] &lt; target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n\nnumbers = [1, 3, 5, 7, 9, 11, 13]\nprint(f'Index of 7: {binary_search(numbers, 7)}')\nprint(f'Index of 6: {binary_search(numbers, 6)}')\n\"\n</code></pre> <pre><code>run rust \"\nfn binary_search(arr: &amp;[i32], target: i32) -&gt; Option&lt;usize&gt; {\n    let mut left = 0;\n    let mut right = arr.len() - 1;\n\n    while left &lt;= right {\n        let mid = (left + right) / 2;\n        match arr[mid].cmp(&amp;target) {\n            std::cmp::Ordering::Equal =&gt; return Some(mid),\n            std::cmp::Ordering::Less =&gt; left = mid + 1,\n            std::cmp::Ordering::Greater =&gt; right = mid - 1,\n        }\n    }\n    None\n}\n\nfn main() {\n    let numbers = vec![1, 3, 5, 7, 9, 11, 13];\n    println!(\\\"Index of 7: {:?}\\\", binary_search(&amp;numbers, 7));\n    println!(\\\"Index of 6: {:?}\\\", binary_search(&amp;numbers, 6));\n}\n\"\n</code></pre>"},{"location":"getting-started/first-steps/#data-structure-practice","title":"Data Structure Practice","text":"<pre><code>run python \"\nfrom collections import defaultdict\n\n# Build a graph\ngraph = defaultdict(list)\nedges = [(1, 2), (1, 3), (2, 4), (3, 4)]\nfor u, v in edges:\n    graph[u].append(v)\n\n# BFS traversal\ndef bfs(start):\n    visited = set()\n    queue = [start]\n    result = []\n\n    while queue:\n        node = queue.pop(0)\n        if node not in visited:\n            visited.add(node)\n            result.append(node)\n            queue.extend(graph[node])\n\n    return result\n\nprint('BFS from 1:', bfs(1))\n\"\n</code></pre>"},{"location":"getting-started/first-steps/#error-handling","title":"Error Handling","text":"<p>Errors are displayed clearly:</p> <pre><code>run python \"\nx = 10 / 0\n\"\n</code></pre> <p>Output: <pre><code>Traceback (most recent call last):\n  File \"&lt;string&gt;\", line 2, in &lt;module&gt;\nZeroDivisionError: division by zero\n</code></pre></p>"},{"location":"getting-started/first-steps/#performance-tips","title":"Performance Tips","text":""},{"location":"getting-started/first-steps/#compiled-languages","title":"Compiled Languages","text":"<p>For compiled languages (C, C++, Rust, Go), <code>run</code> handles compilation:</p> <pre><code># First run compiles (slower)\ntime run rust \"fn main() { println!(\\\"hello\\\"); }\"\n\n# Subsequent runs use cached binary (if unchanged)\ntime run rust \"fn main() { println!(\\\"hello\\\"); }\"\n</code></pre>"},{"location":"getting-started/first-steps/#script-caching","title":"Script Caching","text":"<p>Scripts run in temporary directories, but interpreters cache bytecode:</p> <pre><code># Python generates .pyc files automatically\nrun script.py  # First run\nrun script.py  # Faster (cached bytecode)\n</code></pre>"},{"location":"getting-started/first-steps/#exploring-the-repl","title":"Exploring the REPL","text":"<p>For interactive exploration, the REPL is your friend:</p> <pre><code>$ run\n&gt;&gt;&gt; :py\npython&gt;&gt;&gt; import math\npython&gt;&gt;&gt; math.pi\n3.141592653589793\npython&gt;&gt;&gt; math.sqrt(16)\n4.0\n</code></pre>"},{"location":"getting-started/first-steps/#loading-files-in-repl","title":"Loading Files in REPL","text":"<pre><code>$ run\n&gt;&gt;&gt; :py\npython&gt;&gt;&gt; :load my_module.py\n# File contents are executed in the current session\npython&gt;&gt;&gt; # Now you can use functions defined in my_module.py\n</code></pre>"},{"location":"getting-started/first-steps/#best-practices","title":"Best Practices","text":""},{"location":"getting-started/first-steps/#1-be-explicit-when-needed","title":"1. Be Explicit When Needed","text":"<pre><code>#  Good - explicit\nrun --lang python \"print('hello')\"\n\n# \u26a0 Risky - might auto-detect wrong\nrun \"print('hello')\"\n</code></pre>"},{"location":"getting-started/first-steps/#2-use-heredoc-for-multi-line-code-recommended","title":"2. Use Heredoc for Multi-line Code (Recommended)","text":"<p>Always use heredoc for multi-line code - it's the most reliable method:</p> <pre><code>run python &lt;&lt; 'EOF'\nclass Calculator:\n    def add(self, a, b):\n        return a + b\n\n    def multiply(self, a, b):\n        return a * b\n\ncalc = Calculator()\nprint(\"Sum:\", calc.add(10, 5))\nprint(\"Product:\", calc.multiply(10, 5))\nEOF\n</code></pre> <p>Why heredoc? - No quoting issues - Handles newlines perfectly - Works with regex, special characters, and mixed quotes - Most readable and maintainable</p> <p>Alternative for short multi-statement code:</p> <pre><code># Use semicolons for simple cases\nrun python \"x = 10; y = 20; print(f'Sum: {x + y}')\"\n</code></pre> <p>Why is heredoc so important? Real example:</p> <pre><code># FAILS with: zsh: event not found: [1,\nrun rust \"\nfn main() {\n    let numbers = vec![1, 2, 3, 4, 5];\n    println!(\\\"Sum: {}\\\", numbers.iter().sum());\n}\n\"\n\n# WORKS perfectly\nrun rust &lt;&lt; 'EOF'\nfn main() {\n    let numbers = vec![1, 2, 3, 4, 5];\n    println!(\"Sum: {}\", numbers.iter().sum());\n}\nEOF\n# Output: Sum: 15\n</code></pre> <p>The multi-line string fails because the shell's history expansion interprets <code>![1,</code> as a command before <code>run</code> even sees it!</p>"},{"location":"getting-started/first-steps/#3-quote-properly","title":"3. Quote Properly","text":"<pre><code>#  Good - quotes preserved\nrun python \"print('it\\\\'s working')\"\n\n#  Good - different quote style\nrun python 'print(\"it'\\''s working\")'\n</code></pre>"},{"location":"getting-started/first-steps/#4-check-language-availability","title":"4. Check Language Availability","text":"<p>Before relying on a specific language in scripts:</p> <pre><code># Check if Python is available\nif run --lang python \"print('ok')\" &amp;&gt;/dev/null; then\n    echo \"Python is available\"\nelse\n    echo \"Python not found\"\nfi\n</code></pre>"},{"location":"getting-started/first-steps/#common-patterns","title":"Common Patterns","text":""},{"location":"getting-started/first-steps/#quick-repl-for-language","title":"Quick REPL for Language","text":"<pre><code># Quick Python REPL\nrun\n\n&gt;&gt;&gt; :py\npython&gt;&gt;&gt; \n</code></pre>"},{"location":"getting-started/first-steps/#one-off-calculations","title":"One-Off Calculations","text":"<pre><code>run python \"print(hex(255))\"  # 0xff\nrun python \"print(bin(42))\"   # 0b101010\n</code></pre>"},{"location":"getting-started/first-steps/#formatlint-check","title":"Format/Lint Check","text":"<pre><code># Check JSON validity\necho '{\"key\": \"value\"}' | run python \"\nimport sys, json\ntry:\n    json.load(sys.stdin)\n    print('Valid JSON')\nexcept:\n    print('Invalid JSON')\n\"\n</code></pre>"},{"location":"getting-started/first-steps/#code-snippets-library","title":"Code Snippets Library","text":"<p>Create a snippets directory:</p> <pre><code>mkdir -p ~/run-snippets\necho 'print(\"Hello from snippet!\")' &gt; ~/run-snippets/hello.py\n\n# Use it\nrun ~/run-snippets/hello.py\n</code></pre>"},{"location":"getting-started/first-steps/#next-steps","title":"Next Steps","text":"<p>You're now familiar with the basics! Ready to dive deeper?</p> <p>Learn Command Syntax Explore REPL Mode Language-Specific Guides</p>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>Get up and running with <code>run-kit</code> in minutes. Choose the installation method that works best for your system.</p>"},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<p>Before installing <code>run</code>, ensure you have:</p> <ul> <li>A terminal or command prompt</li> <li>An internet connection (for downloading)</li> <li>Administrator/root access (for some installation methods)</li> </ul> <p>Language Toolchains</p> <p><code>run</code> shells out to real language toolchains. To execute code in a specific language, you need that language's runtime or compiler installed (e.g., <code>python3</code>, <code>node</code>, <code>rustc</code>, <code>go</code>, etc.).</p>"},{"location":"getting-started/installation/#installation-methods","title":"Installation Methods","text":""},{"location":"getting-started/installation/#cargo-recommended","title":"Cargo (Recommended)","text":"<p>If you have Rust installed, this is the simplest method:</p> <pre><code>cargo install run-kit\n</code></pre> <p>This will download, compile, and install <code>run</code> from crates.io.</p> <p>Verify the installation:</p> <pre><code>run --version\n</code></pre>"},{"location":"getting-started/installation/#debian-ubuntu","title":"Debian / Ubuntu","text":"<p>Download and install the <code>.deb</code> package:</p> <pre><code>curl -LO https://github.com/Esubaalew/run/releases/latest/download/run_amd64.deb\nsudo dpkg -i run_amd64.deb\n</code></pre> <p>Verify the installation:</p> <pre><code>run --version\n</code></pre>"},{"location":"getting-started/installation/#windows-scoop","title":"Windows (Scoop)","text":"<p>For Windows users with Scoop:</p> <pre><code>scoop install https://github.com/Esubaalew/run/releases/latest/download/run-scoop.json\n</code></pre> <p>Verify the installation:</p> <pre><code>run --version\n</code></pre>"},{"location":"getting-started/installation/#install-script-macos-linux","title":"Install Script (macOS / Linux)","text":"<p>Use the automated install script:</p> <pre><code>curl -fsSLO https://raw.githubusercontent.com/Esubaalew/run/master/scripts/install.sh\nchmod +x install.sh\n./install.sh --add-path\n</code></pre> <p>Verify the installation:</p> <pre><code>run --version\n</code></pre>"},{"location":"getting-started/installation/#manual-download","title":"Manual Download","text":"<p>Download pre-built binaries directly from GitHub:</p> <ol> <li>Go to the Releases page</li> <li>Download the appropriate archive for your system:</li> <li><code>run-*-x86_64-apple-darwin.tar.gz</code> for macOS</li> <li><code>run-*-x86_64-unknown-linux-gnu.tar.gz</code> for Linux</li> <li><code>run-*-x86_64-pc-windows-msvc.zip</code> for Windows</li> <li>Extract the archive</li> <li>Move the <code>run</code> binary to a directory in your <code>PATH</code></li> </ol> <p>Example for Linux/macOS:</p> <pre><code>tar -xzf run-*-x86_64-unknown-linux-gnu.tar.gz\nsudo mv run /usr/local/bin/\n</code></pre> <p>Verify the installation:</p> <pre><code>run --version\n</code></pre>"},{"location":"getting-started/installation/#build-from-source","title":"Build from Source","text":"<p>For the latest development version or to contribute:</p> <pre><code>git clone https://github.com/Esubaalew/run.git\ncd run\ncargo build --release\nsudo cp target/release/run /usr/local/bin/\n</code></pre> <p>Verify the installation:</p> <pre><code>run --version\n</code></pre>"},{"location":"getting-started/installation/#installing-language-toolchains","title":"Installing Language Toolchains","text":"<p>To execute code in a specific language, you need that language's runtime or compiler installed:</p>"},{"location":"getting-started/installation/#scripting-languages","title":"Scripting Languages","text":"<pre><code># Python\nsudo apt install python3        # Debian/Ubuntu\nbrew install python            # macOS\n\n# Node.js (JavaScript)\ncurl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -\nsudo apt-get install -y nodejs\n\n# Ruby\nsudo apt install ruby          # Debian/Ubuntu\nbrew install ruby              # macOS\n</code></pre>"},{"location":"getting-started/installation/#compiled-languages","title":"Compiled Languages","text":"<pre><code># Rust\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n\n# Go\nwget https://go.dev/dl/go1.21.0.linux-amd64.tar.gz\nsudo tar -C /usr/local -xzf go1.21.0.linux-amd64.tar.gz\n\n# GCC (C/C++)\nsudo apt install build-essential  # Debian/Ubuntu\nxcode-select --install           # macOS\n</code></pre>"},{"location":"getting-started/installation/#check-supported-languages","title":"Check Supported Languages","text":"<p>To see the list of languages supported by the run tool:</p> <pre><code>run\n&gt;&gt;&gt; :languages\n</code></pre> <p>This will show all languages that the run tool supports. Note that to actually execute code in a specific language, you still need to have that language's runtime or compiler installed on your system.</p>"},{"location":"getting-started/installation/#updating","title":"Updating","text":""},{"location":"getting-started/installation/#cargo","title":"Cargo","text":"<pre><code>cargo install run-kit --force\n</code></pre>"},{"location":"getting-started/installation/#scoop","title":"Scoop","text":"<pre><code>scoop update run\n</code></pre>"},{"location":"getting-started/installation/#uninstalling","title":"Uninstalling","text":""},{"location":"getting-started/installation/#cargo_1","title":"Cargo","text":"<pre><code>cargo uninstall run-kit\n</code></pre>"},{"location":"getting-started/installation/#scoop_1","title":"Scoop","text":"<pre><code>scoop uninstall run\n</code></pre>"},{"location":"getting-started/installation/#manual","title":"Manual","text":"<p>Simply remove the binary from your PATH:</p> <pre><code>sudo rm /usr/local/bin/run\n</code></pre>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/installation/#command-not-found","title":"Command not found","text":"<p>If you get <code>command not found: run</code> after installation:</p> <ol> <li> <p>Check if the binary is installed: <pre><code>which run\n</code></pre></p> </li> <li> <p>Ensure the install directory is in your PATH: <pre><code>echo $PATH\n</code></pre></p> </li> <li> <p>Add to PATH if needed: <pre><code># For bash\necho 'export PATH=\"$HOME/.cargo/bin:$PATH\"' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n\n# For zsh\necho 'export PATH=\"$HOME/.cargo/bin:$PATH\"' &gt;&gt; ~/.zshrc\nsource ~/.zshrc\n</code></pre></p> </li> </ol>"},{"location":"getting-started/installation/#permission-denied","title":"Permission Denied","text":"<p>If you get permission errors:</p> <pre><code># Make the binary executable\nchmod +x /path/to/run\n\n# Or install with sudo\nsudo cp run /usr/local/bin/\n</code></pre>"},{"location":"getting-started/installation/#language-not-found","title":"Language Not Found","text":"<p>If a language isn't detected:</p> <ol> <li> <p>Verify the toolchain is installed: <pre><code>python3 --version\nnode --version\nrustc --version\n</code></pre></p> </li> <li> <p>Check if it's in your PATH: <pre><code>which python3\nwhich node\n</code></pre></p> </li> <li> <p>Try explicitly specifying the language: <pre><code>run --lang python \"print('hello')\"\n</code></pre></p> </li> </ol>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<p>Now that you have <code>run</code> installed, let's get started:</p> <p>Quickstart Guide First Steps</p>"},{"location":"getting-started/quickstart/","title":"Quickstart","text":"<p>Get started with <code>run</code> in under 5 minutes. This guide shows you the basics of executing code across multiple languages.</p>"},{"location":"getting-started/quickstart/#your-first-command","title":"Your First Command","text":"<p>Let's start with the simplest possible example:</p> <pre><code>run python \"print('Hello, World!')\"\n</code></pre> <p>Output: <pre><code>Hello, World!\n</code></pre></p> <p>Congratulations!  You just ran your first Python code with <code>run</code>.</p>"},{"location":"getting-started/quickstart/#execute-different-languages","title":"Execute Different Languages","text":"<p>Try the same hello world in different languages:</p> PythonJavaScriptRustGoRubyC <pre><code>run python \"print('Hello from Python!')\"\n</code></pre> <pre><code>run js \"console.log('Hello from JavaScript!')\"\n</code></pre> <pre><code>run rust \"fn main() { println!(\\\"Hello from Rust!\\\"); }\"\n</code></pre> <pre><code>run go \"package main; import \\\"fmt\\\"; func main() { fmt.Println(\\\"Hello from Go!\\\") }\"\n</code></pre> <pre><code>run ruby \"puts 'Hello from Ruby!'\"\n</code></pre> <pre><code>run c \"#include &lt;stdio.h&gt;\\nint main() { printf(\\\"Hello from C!\\\\n\\\"); return 0; }\"\n</code></pre>"},{"location":"getting-started/quickstart/#running-script-files","title":"Running Script Files","text":"<p>Create a simple Python script:</p> hello.py<pre><code>def greet(name):\n    return f\"Hello, {name}!\"\n\nprint(greet(\"World\"))\nprint(greet(\"run-kit\"))\n</code></pre> <p>Run it with:</p> <pre><code>run hello.py\n</code></pre> <p>Output: <pre><code>Hello, World!\nHello, run-kit!\n</code></pre></p> <p>Auto-Detection</p> <p><code>run</code> automatically detects the language from the file extension. No need to specify <code>--lang</code>!</p>"},{"location":"getting-started/quickstart/#language-aliases","title":"Language Aliases","text":"<p><code>run</code> supports multiple aliases for each language. Use whichever feels natural:</p> <pre><code># Python\nrun python \"print('hello')\"\nrun py \"print('hello')\"\nrun py3 \"print('hello')\"\n\n# JavaScript\nrun javascript \"console.log('hello')\"\nrun js \"console.log('hello')\"\nrun node \"console.log('hello')\"\n\n# TypeScript\nrun typescript \"console.log('hello')\"\nrun ts \"console.log('hello')\"\nrun deno \"console.log('hello')\"\n\n# Rust\nrun rust \"fn main() { println!(\\\"hello\\\"); }\"\nrun rs \"fn main() { println!(\\\"hello\\\"); }\"\n</code></pre>"},{"location":"getting-started/quickstart/#command-syntax-variations","title":"Command Syntax Variations","text":"<p><code>run</code> is flexible with how you provide code. These are all equivalent:</p> <pre><code># 1. Full syntax\nrun --lang python --code \"print('hello')\"\n\n# 2. Shorthand flags\nrun -l python -c \"print('hello')\"\n\n# 3. Language first\nrun python \"print('hello')\"\n\n# 4. Auto-detect (if unambiguous)\nrun \"print('hello')\"\n</code></pre> <p>Auto-Detection Limits</p> <p>Auto-detection works great for distinct syntax, but ambiguous code (like <code>print('hello')</code>) might choose the wrong language. Use <code>--lang</code> when in doubt!</p>"},{"location":"getting-started/quickstart/#variables-and-multiple-statements","title":"Variables and Multiple Statements","text":"<p>For multiple statements, you have three options:</p> Heredoc (Recommended)Inline with SemicolonsMulti-line String <pre><code>run python &lt;&lt; 'EOF'\nx = 10\ny = 20\nprint(f'Sum: {x + y}')\nprint(f'Product: {x * y}')\nEOF\n</code></pre> <p>Best for: Multi-line code, complex scripts, code with quotes or special characters.</p> <p>Why heredoc? Most reliable - no quoting issues, no shell interpolation, handles newlines perfectly.</p> <pre><code>run python \"x = 10; y = 20; print(f'Sum: {x + y}'); print(f'Product: {x * y}')\"\n</code></pre> <p>Best for: Short one-liners with multiple statements.</p> <pre><code>run python \"\nx = 10\ny = 20\nprint(f'Sum: {x + y}')\nprint(f'Product: {x * y}')\n\"\n</code></pre> <p>Works but risky: Can have issues with quotes, special characters, or shell interpolation.</p> <p>Output: <pre><code>Sum: 30\nProduct: 200\n</code></pre></p> <p>Best Practice</p> <p>Use heredoc (<code>&lt;&lt; 'EOF'</code>) for any multi-line code. It's the most reliable method and prevents quoting and newline issues.</p> <p>Alternative: Use REPL for One-liners</p> <p>For quick testing and one-line statements in any language, the REPL is also very reliable: <pre><code>$ run\n&gt;&gt;&gt; :rust\nrust&gt;&gt;&gt; fn main() { let x = vec![1,2,3]; println!(\"{:?}\", x); }\n</code></pre> This works across all languages and avoids shell quoting issues entirely.</p>"},{"location":"getting-started/quickstart/#real-world-examples-why-heredoc-matters","title":"Real-World Examples: Why Heredoc Matters","text":""},{"location":"getting-started/quickstart/#example-1-rust-with-arrays-shell-history-expansion-issue","title":"Example 1: Rust with Arrays (Shell History Expansion Issue)","text":"Multi-line String (FAILS)Heredoc (Works Perfectly)Single-line with Semicolons (Works)REPL (Works) <pre><code>run rust \"\nfn main() {\n    let numbers = vec![1, 2, 3, 4, 5];\n    let sum: i32 = numbers.iter().sum();\n    println!(\\\"Sum: {}\\\", sum);\n}\n\"\n</code></pre> <p>ERROR: <code>zsh: event not found: [1,</code></p> <p>The shell's history expansion (<code>!</code>) gets triggered by <code>[1,</code> causing immediate failure.</p> <pre><code>run rust &lt;&lt; 'EOF'\nfn main() {\n    let numbers = vec![1, 2, 3, 4, 5];\n    let sum: i32 = numbers.iter().sum();\n    println!(\"Sum: {}\", sum);\n}\nEOF\n</code></pre> <p>Output: <code>Sum: 15</code></p> <p>No errors, no escaping, quotes work naturally.</p> <pre><code>run rust 'fn main() { let numbers = vec![1,2,3,4,5]; let sum: i32 = numbers.iter().sum(); println!(\"Sum: {}\", sum); }'\n</code></pre> <p>Output: <code>Sum: 15</code></p> <p>Single quotes avoid shell issues. Good for one-liners.</p> <pre><code>$ run\n&gt;&gt;&gt; :rust\nrust&gt;&gt;&gt; fn main() { let numbers = vec![1,2,3,4,5]; let sum: i32 = numbers.iter().sum(); println!(\"Sum: {}\", sum); }\nSum: 15\n</code></pre> <p>REPL is also safe and works for one-line statements.</p>"},{"location":"getting-started/quickstart/#example-2-python-with-regex","title":"Example 2: Python with Regex","text":"Heredoc (Reliable)Multi-line String (Problematic)Inline with Semicolons (OK) <pre><code>run python &lt;&lt; 'EOF'\nimport re\ntext = 'Hello 123 World 456'\nnumbers = re.findall(r'\\d+', text)\nprint(numbers)\nEOF\n</code></pre> <p>Works perfectly - no escaping needed, handles quotes naturally.</p> <pre><code>run python \"\nimport re\ntext = 'Hello 123 World 456'\nnumbers = re.findall(r'\\d+', text)\nprint(numbers)\n\"\n</code></pre> <p>Risky - shell may interpret special characters, quotes can conflict.</p> <pre><code>run python \"import re; text = 'Hello 123 World 456'; numbers = re.findall(r'\\d+', text); print(numbers)\"\n</code></pre> <p>Works for simple cases - good for short scripts with multiple statements.</p>"},{"location":"getting-started/quickstart/#piping-data","title":"Piping Data","text":"<p>One of <code>run</code>'s superpowers is handling piped data:</p>"},{"location":"getting-started/quickstart/#json-processing","title":"JSON Processing","text":"<pre><code>echo '{\"name\": \"Ada\", \"age\": 30}' | run python \"\nimport sys, json\ndata = json.load(sys.stdin)\nprint(f\\\"{data['name']} is {data['age']} years old\\\")\n\"\n</code></pre> <p>Output: <pre><code>Ada is 30 years old\n</code></pre></p>"},{"location":"getting-started/quickstart/#cross-language-pipeline","title":"Cross-Language Pipeline","text":"<p>Process data through multiple languages:</p> <pre><code># Generate JSON with Python\nrun python \"import json; print(json.dumps({'items': [1,2,3,4,5]}))\" | \\\n# Process with JavaScript\nrun js \"\nconst data = JSON.parse(require('fs').readFileSync(0, 'utf8'));\nconst sum = data.items.reduce((a, b) =&gt; a + b, 0);\nconsole.log('Sum:', sum);\n\"\n</code></pre> <p>Output: <pre><code>Sum: 15\n</code></pre></p>"},{"location":"getting-started/quickstart/#interactive-repl","title":"Interactive REPL","text":"<p>For longer sessions, use the interactive mode. By default, <code>run</code> starts in Python mode when no arguments are provided:</p> <pre><code>$ run\nrun universal REPL. Type :help for commands.\n\n&gt;&gt;&gt; :help\nCommands:\n  :help                 Show this help message\n  :languages            List available languages\n  :lang &lt;id&gt;            Switch to language &lt;id&gt;\n  :detect on|off        Enable or disable auto language detection\n  :reset                Reset the current language session\n  :load &lt;path&gt;          Execute a file in the current language\n  :exit, :quit          Leave the REPL\nAny language id or alias works as a shortcut, e.g. :py, :cpp, :csharp, :php.\n\n&gt;&gt;&gt; :py\nswitched to python\n\npython&gt;&gt;&gt; x = 10\n\npython&gt;&gt;&gt; y = 20\n\npython&gt;&gt;&gt; x + y\n30\n\npython&gt;&gt;&gt; :exit\nGoodbye!\n</code></pre> <p>Stateful Sessions</p> <p>Variables persist across commands in the same session. Perfect for exploration!</p>"},{"location":"getting-started/quickstart/#common-use-cases","title":"Common Use Cases","text":""},{"location":"getting-started/quickstart/#quick-calculations","title":"Quick Calculations","text":"<pre><code>run python \"print(2**100)\"\n# Output: 1267650600228229401496703205376\n</code></pre>"},{"location":"getting-started/quickstart/#test-regular-expressions","title":"Test Regular Expressions","text":"<pre><code>run python \"\nimport re\ntext = 'Hello 123 World 456'\nnumbers = re.findall(r'\\d+', text)\nprint(numbers)\n\"\n# Output: ['123', '456']\n</code></pre>"},{"location":"getting-started/quickstart/#format-json","title":"Format JSON","text":"<pre><code>echo '{\"name\":\"Ada\",\"age\":30}' | run python \"\nimport sys, json\ndata = json.load(sys.stdin)\nprint(json.dumps(data, indent=2))\n\"\n</code></pre> <p>Output: <pre><code>{\n  \"name\": \"Ada\",\n  \"age\": 30\n}\n</code></pre></p>"},{"location":"getting-started/quickstart/#test-algorithm","title":"Test Algorithm","text":"<pre><code>run rust \"\nfn main() {\n    let numbers = vec![1, 2, 3, 4, 5];\n    let sum: i32 = numbers.iter().sum();\n    println!(\\\"Sum: {}\\\", sum);\n}\n\"\n</code></pre> <p>Output: <pre><code>Sum: 15\n</code></pre></p>"},{"location":"getting-started/quickstart/#checking-available-languages","title":"Checking Available Languages","text":"<p>See which languages are available on your system:</p> <pre><code>$ run\n&gt;&gt;&gt; :languages\n</code></pre> <p>You'll see output like: <pre><code>available languages: bash, c, cpp, crystal, csharp, dart, elixir, go, groovy, haskell, java, javascript, julia, kotlin, lua, nim, perl, php, python, r, ruby, rust, swift, typescript, zig\n</code></pre></p>"},{"location":"getting-started/quickstart/#getting-help","title":"Getting Help","text":""},{"location":"getting-started/quickstart/#command-line-help","title":"Command-Line Help","text":"<pre><code>$ run --help\nUniversal multi-language runner and REPL\n\nUsage: run [OPTIONS] [ARGS]...\n\nArguments:\n  [ARGS]...  Positional arguments (language, code, or file)\n\nOptions:\n  -V, --version      Print version information and exit\n  -l, --lang &lt;LANG&gt;  Explicitly choose the language to execute\n  -f, --file &lt;PATH&gt;  Execute code from the provided file path\n  -c, --code &lt;CODE&gt;  Execute the provided code snippet\n      --no-detect    Disable heuristic language detection\n  -h, --help         Print help\n</code></pre>"},{"location":"getting-started/quickstart/#repl-help","title":"REPL Help","text":"<pre><code>$ run\n&gt;&gt;&gt; :help\nCommands:\n  :help                 Show this help message\n  :languages            List available languages\n  :lang &lt;id&gt;            Switch to language &lt;id&gt;\n  :detect on|off        Enable or disable auto language detection\n  :reset                Reset the current language session\n  :load &lt;path&gt;          Execute a file in the current language\n  :exit, :quit          Leave the REPL\nAny language id or alias works as a shortcut, e.g. :py, :cpp, :csharp, :php.\n</code></pre>"},{"location":"getting-started/quickstart/#version-info","title":"Version Info","text":"<pre><code>$ run --version\n\nrun-kit 0.2.1\nUniversal multi-language runner and smart REPL\nauthor: Esubalew Chekol &lt;esubalewchekol6@gmail.com&gt;\nhomepage: https://esubalew.et\nrepository: https://github.com/Esubaalew/run\nlicense: Apache-2.0\n</code></pre>"},{"location":"getting-started/quickstart/#next-steps","title":"Next Steps","text":"<p>Now that you know the basics, dive deeper:</p> <p>User Guide REPL Mode Supported Languages</p>"},{"location":"guide/command-syntax/","title":"Command Syntax","text":"<p><code>run</code> offers flexible command syntax to match your workflow. This guide covers all the ways you can invoke <code>run</code> and when to use each form.</p>"},{"location":"guide/command-syntax/#basic-syntax","title":"Basic Syntax","text":"<p>The general command structure:</p> <pre><code>run [OPTIONS] [ARGS]...\n</code></pre> <p>Where <code>[ARGS]...</code> can be positional arguments like language, code, or file.</p>"},{"location":"guide/command-syntax/#command-variations","title":"Command Variations","text":"<p>All these commands are equivalent:</p> Full SyntaxShorthand FlagsLanguage FirstAuto-Detect <pre><code>run --lang python --code \"print('hello')\"\n</code></pre> <p>Most explicit. Best for scripts and automation.</p> <pre><code>run -l python -c \"print('hello')\"\n</code></pre> <p>Shorter flags for quick typing.</p> <pre><code>run python \"print('hello')\"\n</code></pre> <p>Natural and concise. Most commonly used.</p> <pre><code>run \"print('hello')\"\n</code></pre> <p>Shortest, but risky with ambiguous syntax.</p>"},{"location":"guide/command-syntax/#flags-reference","title":"Flags Reference","text":"<p>Full help output:</p> <pre><code>$ run --help\nUniversal multi-language runner and REPL\n\nUsage: run [OPTIONS] [ARGS]...\n\nArguments:\n  [ARGS]...  Positional arguments (language, code, or file)\n\nOptions:\n  -V, --version      Print version information and exit\n  -l, --lang &lt;LANG&gt;  Explicitly choose the language to execute\n  -f, --file &lt;PATH&gt;  Execute code from the provided file path\n  -c, --code &lt;CODE&gt;  Execute the provided code snippet\n      --no-detect    Disable heuristic language detection\n  -h, --help         Print help\n</code></pre>"},{"location":"guide/command-syntax/#language-specification-l-lang","title":"Language Specification (<code>-l, --lang</code>)","text":"<p>Specify the programming language to use:</p> <pre><code># Long form\nrun --lang python \"print('hello')\"\n\n# Short form\nrun -l python \"print('hello')\"\n\n# Positional (no flag needed)\nrun python \"print('hello')\"\n</code></pre> <p>Aliases: All language aliases work:</p> <pre><code>run --lang python \"...\"\nrun --lang py \"...\"\nrun --lang py3 \"...\"\nrun --lang python3 \"...\"\n</code></pre>"},{"location":"guide/command-syntax/#code-input-c-code","title":"Code Input (<code>-c, --code</code>)","text":"<p>Provide code as a command-line string:</p> <pre><code># Long form\nrun --code \"print('hello')\"\n\n# Short form\nrun -c \"print('hello')\"\n\n# Implicit (no flag needed)\nrun python \"print('hello')\"\n</code></pre>"},{"location":"guide/command-syntax/#file-input-f-file","title":"File Input (<code>-f, --file</code>)","text":"<p>Execute a file:</p> <pre><code># Direct file path\nrun script.py\nrun main.go\nrun app.js\n\n# Explicit with --file flag\nrun --file script.py\n\n# With -f shorthand\nrun -f script.py\n\n# With language override\nrun --lang python script.py\nrun python script.py\n</code></pre>"},{"location":"guide/command-syntax/#disable-detection-no-detect","title":"Disable Detection (<code>--no-detect</code>)","text":"<p>Disable automatic language detection:</p> <pre><code># Force explicit language specification\nrun --no-detect --lang python \"print('hello')\"\n</code></pre>"},{"location":"guide/command-syntax/#help-version","title":"Help &amp; Version","text":"<pre><code># Show help\nrun --help\nrun -h\n\n# Show version (detailed)\nrun --version\nrun -V\n</code></pre>"},{"location":"guide/command-syntax/#when-to-use-lang","title":"When to Use <code>--lang</code>","text":""},{"location":"guide/command-syntax/#always-use-lang-when","title":"Always Use <code>--lang</code> When:","text":""},{"location":"guide/command-syntax/#1-syntax-is-ambiguous","title":"1. Syntax is Ambiguous","text":"<pre><code>#  Could be Python, Ruby, Lua, or Perl\nrun \"print('hello')\"\n\n#  Explicit and correct\nrun --lang python \"print('hello')\"\n</code></pre>"},{"location":"guide/command-syntax/#2-writing-scripts","title":"2. Writing Scripts","text":"<pre><code>#!/bin/bash\n#  Deterministic behavior\nrun --lang python \"\nimport sys\nprint(f'Running on {sys.platform}')\n\"\n</code></pre>"},{"location":"guide/command-syntax/#3-automation-cicd","title":"3. Automation &amp; CI/CD","text":"<pre><code># .github/workflows/test.yml\n- name: Run test\n  run: run --lang python test_script.py\n</code></pre>"},{"location":"guide/command-syntax/#auto-detection-works-when","title":"Auto-Detection Works When:","text":""},{"location":"guide/command-syntax/#1-syntax-is-distinctive","title":"1. Syntax is Distinctive","text":"<pre><code>#  Unique to Rust\nrun \"fn main() { println!(\\\"hello\\\"); }\"\n\n#  Unique to Go\nrun \"package main; import \\\"fmt\\\"; func main() { fmt.Println(\\\"hello\\\") }\"\n\n#  Unique to JavaScript\nrun \"console.log('hello')\"\n</code></pre>"},{"location":"guide/command-syntax/#2-file-extensions-are-clear","title":"2. File Extensions are Clear","text":"<pre><code>#  .py extension\nrun script.py\n\n#  .rs extension\nrun program.rs\n\n#  .go extension\nrun main.go\n</code></pre>"},{"location":"guide/command-syntax/#quoting-rules","title":"Quoting Rules","text":""},{"location":"guide/command-syntax/#single-vs-double-quotes","title":"Single vs Double Quotes","text":"<p>Your shell interprets quotes before <code>run</code> sees them:</p> <pre><code># Use double quotes for variables\nname=\"World\"\nrun python \"print(f'Hello, $name')\"\n\n# Use single quotes to prevent interpolation\nrun python 'print(\"Hello, World!\")'\n</code></pre>"},{"location":"guide/command-syntax/#escaping-quotes","title":"Escaping Quotes","text":"<p>When your code contains quotes:</p> <pre><code># Escape inner quotes\nrun python \"print('it\\\\'s working')\"\n\n# Mix quote styles\nrun python 'print(\"it'\\''s working\")'\n\n# Use heredoc for complex code\nrun python &lt;&lt; 'EOF'\nprint(\"it's working\")\nprint('with \"quotes\"')\nEOF\n</code></pre>"},{"location":"guide/command-syntax/#multi-line-code","title":"Multi-Line Code","text":"<p>For multi-line code, you have several options. Here's a comparison:</p>"},{"location":"guide/command-syntax/#1-heredoc-recommended","title":"1. Heredoc (Recommended) \u2b50","text":"<p>Most reliable and recommended method:</p> <pre><code>run python &lt;&lt; 'EOF'\ndef greet(name):\n    return f\"Hello, {name}!\"\n\nfor name in ['Alice', 'Bob', 'Charlie']:\n    print(greet(name))\nEOF\n</code></pre> <p>Advantages: - No escaping needed - Handles quotes naturally (single, double, mixed) - No shell interpolation issues - Perfect newline handling - Works with regex patterns, special characters - Most readable for complex code</p> <p>Why 'EOF' with quotes?</p> <p>Using quotes (<code>'EOF'</code>) prevents shell variable expansion in the heredoc. This is critical for code that uses <code>$</code> or other special characters.</p>"},{"location":"guide/command-syntax/#2-inline-with-semicolons","title":"2. Inline with Semicolons","text":"<p>Good for short scripts:</p> <pre><code>run python \"x = 10; y = 20; print(f'Sum: {x + y}'); print(f'Product: {x * y}')\"\n</code></pre> <p>Advantages: - Compact one-liner - Good for simple multi-statement code</p> <p>Limitations: - Less readable for complex code - Still need to escape quotes</p>"},{"location":"guide/command-syntax/#3-multi-line-string-use-with-caution","title":"3. Multi-line String (Use with Caution)","text":"<pre><code># Bash allows literal newlines in quotes\nrun python \"\nx = 10\ny = 20\nprint(f'Sum: {x + y}')\n\"\n</code></pre> <p>Limitations: - Shell may interpret special characters - Quote conflicts possible - Variable expansion issues with <code>$</code> - Harder to debug</p>"},{"location":"guide/command-syntax/#4-escaped-newlines-not-recommended","title":"4. Escaped Newlines (Not Recommended)","text":"<pre><code>run python \"x = 10\\ny = 20\\nprint(x + y)\"\n</code></pre> <p>Limitations: - Hard to read - Difficult to maintain - Error-prone</p>"},{"location":"guide/command-syntax/#practical-examples-why-heredoc-wins","title":"Practical Examples: Why Heredoc Wins","text":""},{"location":"guide/command-syntax/#shell-history-expansion-failure-rust","title":"Shell History Expansion Failure (Rust)","text":"<p>This is a common and frustrating error when using multi-line strings:</p> Multi-line String (FAILS)Heredoc (WORKS)Single-line (WORKS)REPL (WORKS) <pre><code>run rust \"\nfn main() {\n    let numbers = vec![1, 2, 3, 4, 5];\n    let sum: i32 = numbers.iter().sum();\n    println!(\\\"Sum: {}\\\", sum);\n}\n\"\n</code></pre> <p>ERROR: <code>zsh: event not found: [1,</code></p> <p>Why? The shell's history expansion feature interprets <code>![1,</code> as a history command, causing immediate failure before <code>run</code> even sees the code.</p> <pre><code>run rust &lt;&lt; 'EOF'\nfn main() {\n    let numbers = vec![1, 2, 3, 4, 5];\n    let sum: i32 = numbers.iter().sum();\n    println!(\"Sum: {}\", sum);\n}\nEOF\n</code></pre> <p>Output: <code>Sum: 15</code></p> <p>Perfect! No shell interference, no escaping, natural syntax.</p> <pre><code>run rust 'fn main() { let numbers = vec![1,2,3,4,5]; let sum: i32 = numbers.iter().sum(); println!(\"Sum: {}\", sum); }'\n</code></pre> <p>Output: <code>Sum: 15</code></p> <p>Single quotes prevent shell expansion. Good for compact one-liners.</p> <pre><code>rust&gt;&gt;&gt; fn main() { let numbers = vec![1,2,3,4,5]; let sum: i32 = numbers.iter().sum(); println!(\"Sum: {}\", sum); }\nSum: 15\n</code></pre> <p>REPL mode also works great for one-line statements across all languages.</p>"},{"location":"guide/command-syntax/#regex-and-quotes-python","title":"Regex and Quotes (Python)","text":"HeredocMulti-line StringInline <pre><code>run python &lt;&lt; 'EOF'\nimport re\ntext = 'Hello 123 World 456'\npattern = r'\\d+'  # No escaping needed\nnumbers = re.findall(pattern, text)\nprint(f\"Found: {numbers}\")\nEOF\n</code></pre> <pre><code># Problematic - quotes conflict, escaping gets messy\nrun python \"\nimport re\ntext = 'Hello 123 World 456'\npattern = r'\\d+'\nnumbers = re.findall(pattern, text)\nprint(f\\\"Found: {numbers}\\\")\n\"\n</code></pre> <pre><code># Works but less readable\nrun python \"import re; text = 'Hello 123 World 456'; print(re.findall(r'\\d+', text))\"\n</code></pre> <p>Best Practice</p> <p>Always use heredoc (<code>&lt;&lt; 'EOF'</code>) for multi-line code. It's the most reliable, readable, and maintainable approach.</p>"},{"location":"guide/command-syntax/#piping-code","title":"Piping Code","text":""},{"location":"guide/command-syntax/#from-stdin","title":"From stdin","text":"<pre><code># Pipe code to run\necho \"print('hello')\" | run python\n\n# Read from file\ncat script.py | run python\n</code></pre>"},{"location":"guide/command-syntax/#piping-data","title":"Piping Data","text":"<pre><code># Pipe data that your code reads\necho '{\"name\":\"Ada\"}' | run python \"\nimport sys, json\ndata = json.load(sys.stdin)\nprint(data['name'])\n\"\n</code></pre>"},{"location":"guide/command-syntax/#file-execution","title":"File Execution","text":""},{"location":"guide/command-syntax/#basic-file-execution","title":"Basic File Execution","text":"<pre><code>run script.py\nrun main.go\nrun app.js\n</code></pre>"},{"location":"guide/command-syntax/#with-language-override","title":"With Language Override","text":"<p>Force a specific language despite extension:</p> <pre><code># Treat .txt as Python\nrun --lang python script.txt\n\n# Treat extensionless file as Bash\nrun --lang bash my_script\n</code></pre>"},{"location":"guide/command-syntax/#with-arguments","title":"With Arguments","text":"<p>Pass arguments to your script:</p> <pre><code># Arguments after filename\nrun script.py arg1 arg2 arg3\n</code></pre> <p>Your script receives them as usual:</p> script.py<pre><code>import sys\nprint(f\"Received: {sys.argv[1:]}\")\n</code></pre>"},{"location":"guide/command-syntax/#combining-techniques","title":"Combining Techniques","text":""},{"location":"guide/command-syntax/#script-with-stdin","title":"Script with stdin","text":"<pre><code>echo \"data\" | run script.py arg1 arg2\n</code></pre>"},{"location":"guide/command-syntax/#pipeline-with-multiple-languages","title":"Pipeline with Multiple Languages","text":"<pre><code>run python \"print('hello')\" | run ruby \"puts STDIN.read.upcase\"\n</code></pre>"},{"location":"guide/command-syntax/#environment-variables","title":"Environment Variables","text":"<pre><code>API_KEY=secret run python \"\nimport os\nprint(f'Key: {os.getenv(\\\"API_KEY\\\")}')\n\"\n</code></pre>"},{"location":"guide/command-syntax/#advanced-patterns","title":"Advanced Patterns","text":""},{"location":"guide/command-syntax/#conditional-execution","title":"Conditional Execution","text":"<pre><code># Run if command succeeds\ntest -f data.json &amp;&amp; run python process.py\n\n# Chain commands\nrun python generate.py &amp;&amp; run rust process.rs\n</code></pre>"},{"location":"guide/command-syntax/#loops","title":"Loops","text":"<pre><code># Process multiple files\nfor file in *.py; do\n    run \"$file\"\ndone\n\n# Run same code with different data\nfor i in {1..5}; do\n    echo \"$i\" | run python \"\nimport sys\nn = int(sys.stdin.read())\nprint(f'{n} squared = {n*n}')\n\"\ndone\n</code></pre>"},{"location":"guide/command-syntax/#functions-in-shell","title":"Functions in Shell","text":"<pre><code># Create a shell function\nrun_python() {\n    run --lang python \"$@\"\n}\n\n# Use it\nrun_python \"print('hello')\"\nrun_python script.py\n</code></pre>"},{"location":"guide/command-syntax/#error-handling","title":"Error Handling","text":""},{"location":"guide/command-syntax/#exit-codes","title":"Exit Codes","text":"<p><code>run</code> preserves the exit code of your script:</p> <pre><code>run python \"import sys; sys.exit(42)\"\necho $?  # 42\n\n# Use in conditionals\nif run python \"import sys; sys.exit(1)\"; then\n    echo \"Success\"\nelse\n    echo \"Failed\"\nfi\n</code></pre>"},{"location":"guide/command-syntax/#capturing-output","title":"Capturing Output","text":"<pre><code># Capture stdout\noutput=$(run python \"print('hello')\")\necho \"Got: $output\"\n\n# Capture stderr\nerrors=$(run python \"import sys; print('error', file=sys.stderr)\" 2&gt;&amp;1)\n\n# Redirect to file\nrun python script.py &gt; output.txt 2&gt; errors.txt\n</code></pre>"},{"location":"guide/command-syntax/#performance-considerations","title":"Performance Considerations","text":""},{"location":"guide/command-syntax/#compiled-languages","title":"Compiled Languages","text":"<p>First run compiles, subsequent runs are faster:</p> <pre><code># First time (compile + run)\ntime run rust \"fn main() { println!(\\\"hello\\\"); }\"\n\n# Subsequent (cached, if code unchanged)\ntime run rust \"fn main() { println!(\\\"hello\\\"); }\"\n</code></pre>"},{"location":"guide/command-syntax/#script-languages","title":"Script Languages","text":"<p>Interpreters cache bytecode automatically:</p> <pre><code># Python generates .pyc\nrun script.py  # Compiles to bytecode\nrun script.py  # Uses cached .pyc\n</code></pre>"},{"location":"guide/command-syntax/#common-mistakes","title":"Common Mistakes","text":""},{"location":"guide/command-syntax/#using-multi-line-strings-instead-of-heredoc","title":"Using Multi-line Strings Instead of Heredoc","text":"<p>The Problem:</p> <pre><code># FAILS with: zsh: event not found: [1,\nrun rust \"\nfn main() {\n    let numbers = vec![1, 2, 3, 4, 5];\n    println!(\\\"Sum: {}\\\", numbers.iter().sum());\n}\n\"\n</code></pre> <p>The Solution:</p> <pre><code># Use heredoc\nrun rust &lt;&lt; 'EOF'\nfn main() {\n    let numbers = vec![1, 2, 3, 4, 5];\n    println!(\"Sum: {}\", numbers.iter().sum());\n}\nEOF\n\n# Or single-line\nrun rust 'fn main() { let numbers = vec![1,2,3,4,5]; println!(\"Sum: {}\", numbers.iter().sum()); }'\n</code></pre> <p>Why it fails: Shell history expansion (<code>!</code>), special characters, quote conflicts, and variable expansion issues make multi-line strings unreliable.</p>"},{"location":"guide/command-syntax/#forgetting-to-quote","title":"Forgetting to Quote","text":"<pre><code># Shell interprets this wrong\nrun python print('hello')\n\n# Proper quoting\nrun python \"print('hello')\"\n</code></pre>"},{"location":"guide/command-syntax/#wrong-quote-nesting","title":"Wrong Quote Nesting","text":"<pre><code># Breaks on inner quotes\nrun python \"print(\"hello\")\"\n\n# Escape or mix quotes\nrun python \"print(\\\"hello\\\")\"\nrun python 'print(\"hello\")'\n\n# Or use heredoc (best)\nrun python &lt;&lt; 'EOF'\nprint(\"hello\")\nEOF\n</code></pre>"},{"location":"guide/command-syntax/#shell-variable-expansion","title":"Shell Variable Expansion","text":"<pre><code># $x expands in shell, not Python\nrun python \"x = 5; print($x)\"\n\n# Escape or use single quotes\nrun python 'x = 5; print(x)'\n\n# Or use heredoc (best)\nrun python &lt;&lt; 'EOF'\nx = 5\nprint(x)\nEOF\n</code></pre>"},{"location":"guide/command-syntax/#ambiguous-auto-detection","title":"Ambiguous Auto-Detection","text":"<pre><code># Might detect as Python, Ruby, or Lua\nrun \"print('hello')\"\n\n# Explicit language\nrun python \"print('hello')\"\n</code></pre>"},{"location":"guide/command-syntax/#best-practices","title":"Best Practices","text":"<ol> <li>Use heredoc for multi-line code - Always prefer <code>&lt;&lt; 'EOF'</code> for reliability and readability</li> <li>Use semicolons for short multi-statement code - Good for quick one-liners: <code>\"stmt1; stmt2; stmt3\"</code></li> <li>Be explicit in scripts - Use <code>--lang</code> for deterministic behavior in automation</li> <li>Avoid multi-line strings - They cause quoting and escaping issues</li> <li>Quote defensively - Always quote code strings</li> <li>Test auto-detection - Verify it chooses the right language</li> <li>Check exit codes - Don't ignore errors</li> </ol>"},{"location":"guide/command-syntax/#examples","title":"Examples","text":""},{"location":"guide/command-syntax/#quick-one-liners","title":"Quick One-Liners","text":"<pre><code># Math\nrun python \"print(2**100)\"\n\n# Date formatting\nrun ruby \"puts Time.now.strftime('%Y-%m-%d')\"\n\n# JSON pretty-print\necho '{\"a\":1}' | run python \"import sys,json; print(json.dumps(json.load(sys.stdin), indent=2))\"\n</code></pre>"},{"location":"guide/command-syntax/#scripts","title":"Scripts","text":"<pre><code># Process data\ncat data.csv | run python \"\nimport sys, csv\nreader = csv.reader(sys.stdin)\nfor row in reader:\n    print(','.join(row[:3]))\n\"\n\n# Generate config\nrun ruby &lt;&lt; 'EOF'\nrequire 'yaml'\nconfig = {\n  'server' =&gt; {'host' =&gt; 'localhost', 'port' =&gt; 8080},\n  'database' =&gt; {'url' =&gt; 'postgresql://localhost'}\n}\nputs config.to_yaml\nEOF\n</code></pre>"},{"location":"guide/command-syntax/#next-steps","title":"Next Steps","text":"<p>Running Files \u2192 Piping Data \u2192 Language Detection \u2192</p>"},{"location":"guide/language-detection/","title":"Language Detection","text":"<p><code>run</code> can automatically detect the programming language from code patterns or file extensions.</p>"},{"location":"guide/language-detection/#how-it-works","title":"How It Works","text":"<p>Detection happens in this order:</p> <ol> <li>Explicit <code>--lang</code> flag (highest priority)</li> <li>File extension (for file paths)</li> <li>Code pattern matching (for inline code)</li> <li>Default fallback (Python)</li> </ol>"},{"location":"guide/language-detection/#file-extension-detection","title":"File Extension Detection","text":"<p>File extensions automatically determine the language:</p> <pre><code>run script.py    # Python\nrun main.go      # Go\nrun app.js       # JavaScript\nrun hello.rs     # Rust\n</code></pre> <p>No need to specify <code>--lang</code>!</p>"},{"location":"guide/language-detection/#pattern-matching","title":"Pattern Matching","text":"<p>Distinctive syntax is auto-detected:</p>"},{"location":"guide/language-detection/#rust","title":"Rust","text":"<pre><code># Unique fn main() syntax\nrun \"fn main() { println!(\\\"Hello\\\"); }\"\n</code></pre>"},{"location":"guide/language-detection/#go","title":"Go","text":"<pre><code># package main declaration\nrun \"package main; import \\\"fmt\\\"; func main() { fmt.Println(\\\"Hello\\\") }\"\n</code></pre>"},{"location":"guide/language-detection/#javascript","title":"JavaScript","text":"<pre><code># console.log\nrun \"console.log('Hello')\"\n\n# Node.js require\nrun \"const fs = require('fs'); console.log('Hello')\"\n</code></pre>"},{"location":"guide/language-detection/#cc","title":"C/C++","text":"<pre><code># #include directive\nrun \"#include &lt;stdio.h&gt;\\nint main() { printf(\\\"Hello\\\\n\\\"); }\"\n</code></pre>"},{"location":"guide/language-detection/#ambiguous-cases","title":"Ambiguous Cases","text":"<p>Some syntax looks similar across languages:</p> <pre><code>#  Could be Python, Ruby, Lua, or Perl\nrun \"print('hello')\"\n</code></pre> <p>Solution: Use <code>--lang</code> explicitly:</p> <pre><code>#  Explicit\nrun --lang python \"print('hello')\"\nrun --lang ruby \"print('hello')\"\nrun --lang lua \"print('hello')\"\n</code></pre>"},{"location":"guide/language-detection/#detection-confidence","title":"Detection Confidence","text":"Syntax Confidence Languages <code>fn main()</code> High Rust <code>package main</code> High Go <code>console.log()</code> High JavaScript <code>println!()</code> High Rust <code>fmt.Println()</code> High Go <code>print()</code> Low Python, Ruby, Lua, Perl <code>puts</code> Medium Ruby, C"},{"location":"guide/language-detection/#best-practices","title":"Best Practices","text":""},{"location":"guide/language-detection/#when-to-use-auto-detection","title":"When to Use Auto-Detection","text":"<ul> <li>File execution (extension available)</li> <li>Distinctive syntax</li> <li>Quick one-off commands</li> <li>Interactive exploration</li> </ul>"},{"location":"guide/language-detection/#when-to-use-lang","title":"When to Use <code>--lang</code>","text":"<ul> <li>Ambiguous syntax</li> <li>Scripts and automation</li> <li>CI/CD pipelines</li> <li>When correctness is critical</li> </ul>"},{"location":"guide/language-detection/#checking-detection","title":"Checking Detection","text":"<p>Test what language is detected:</p> <pre><code># REPL mode\n$ run\n&gt;&gt;&gt; :detect on\n&gt;&gt;&gt; print('hello')  # See what's detected\n</code></pre>"},{"location":"guide/language-detection/#next-steps","title":"Next Steps","text":"<p>Command Reference \u2192 REPL Mode \u2192</p>"},{"location":"guide/overview/","title":"Overview - Universal Multi-Language Runner","text":"<p>run is a universal multi-language runner and smart REPL (Read-Eval-Print Loop) written in Rust. It provides a unified interface for executing code across 25 programming languages without the hassle of managing multiple compilers, interpreters, or build tools.</p>"},{"location":"guide/overview/#what-is-run","title":"What is run?","text":"<p>Whether you're a beginner learning your first programming language or an experienced polyglot developer, run streamlines your workflow by providing consistent commands and behavior across all supported languages.</p>"},{"location":"guide/overview/#who-is-this-for","title":"Who is this for?","text":"<ul> <li>Beginners: Learn programming without worrying about complex setup procedures. Just install run and start coding in any language.</li> <li>Students: Quickly test code snippets and experiment with different programming paradigms across multiple languages.</li> <li>Developers: Prototype ideas rapidly, test algorithms, and switch between languages seamlessly without context switching.</li> <li>DevOps Engineers: Write and test automation scripts in various languages from a single tool.</li> <li>Educators: Teach programming concepts across multiple languages with a consistent interface.</li> </ul>"},{"location":"guide/overview/#why-was-run-created","title":"Why was run created?","text":"<p>Traditional development workflows require installing and configuring separate tools for each programming language. This creates several problems:</p> <ul> <li>Time-consuming setup: Installing compilers, interpreters, package managers, and configuring environments for each language.</li> <li>Inconsistent interfaces: Each language has different commands and flags for compilation and execution.</li> <li>Cognitive overhead: Remembering different commands and workflows for each language.</li> <li>Barrier to entry: Beginners struggle with setup before writing their first line of code.</li> </ul> <p>run solves these problems by providing a single, unified interface that handles all the complexity behind the scenes. You focus on writing code, and run takes care of the rest.</p>"},{"location":"guide/overview/#why-rust","title":"Why Rust?","text":"<p>run is built with Rust for several compelling reasons:</p> <ul> <li>Performance: Rust's zero-cost abstractions and efficient memory management ensure run starts instantly and executes with minimal overhead.</li> <li>Reliability: Rust's strong type system and ownership model prevent common bugs like null pointer dereferences and data races, making run stable and crash-resistant.</li> <li>Cross-platform: Rust compiles to native code for Windows, macOS, and Linux, providing consistent behavior across all platforms.</li> <li>Memory safety: No garbage collector means predictable performance without unexpected pauses.</li> <li>Modern tooling: Cargo (Rust's package manager) makes building and distributing run straightforward.</li> <li>Future-proof: Rust's growing ecosystem and industry adoption ensure long-term maintainability.</li> </ul>"},{"location":"guide/overview/#how-it-works","title":"How it works","text":"<p><code>run</code> shells out to real toolchains under the hood. Each <code>LanguageEngine</code> implements a small trait that knows how to:</p> <ol> <li>Detect whether the toolchain is available (e.g. <code>python3</code>, <code>go</code>, <code>rustc</code>).</li> <li>Prepare a temporary workspace (compilation for compiled languages, transient scripts for interpreters).</li> <li>Execute snippets, files, or stdin streams and surface stdout/stderr consistently.</li> <li>Manage session state for the interactive REPL (persistent modules, stateful scripts, or regenerated translation units).</li> </ol> <p>This architecture keeps the core lightweight while making it easy to add new runtimes or swap implementations.</p>"},{"location":"guide/overview/#supported-languages","title":"Supported Languages","text":"<p>run supports 25+ languages across multiple categories:</p> Category Languages &amp; aliases Scripting &amp; shells Bash (<code>bash</code>), Python (<code>py</code>, <code>python</code>), Ruby (<code>rb</code>, <code>ruby</code>), PHP (<code>php</code>), Perl (<code>perl</code>), Groovy (<code>groovy</code>, <code>grv</code>), Lua (<code>lua</code>), R (<code>r</code>), Elixir (<code>ex</code>, <code>elixir</code>) Web &amp; typed scripting JavaScript (<code>js</code>, <code>node</code>), TypeScript (<code>ts</code>, <code>deno</code>), Dart (<code>dart</code>), Kotlin (<code>kt</code>, <code>kotlin</code>) Systems &amp; compiled C (<code>c</code>), C++ (<code>cpp</code>, <code>cxx</code>), Rust (<code>rs</code>, <code>rust</code>), Go (<code>go</code>), Swift (<code>swift</code>), Zig (<code>zig</code>), Nim (<code>nim</code>), Haskell (<code>hs</code>, <code>haskell</code>), Crystal (<code>cr</code>, <code>crystal</code>), C# (<code>cs</code>, <code>csharp</code>), Java (<code>java</code>), Julia (<code>jl</code>, <code>julia</code>)"},{"location":"guide/overview/#key-features","title":"Key Features","text":"<ul> <li>25+ Programming Languages: Execute code in Python, JavaScript, Rust, Go, C, C++, and 19 more languages</li> <li>Unified Command Interface: One consistent command for all languages</li> <li>Flexible Command Syntax: <code>--lang</code> flag is optional, with automatic language detection</li> <li>Inline Code Execution: Run code snippets directly from the command line</li> <li>File-based Execution: Execute script files with automatic language detection</li> <li>Piped Input Support: Process stdin data in any language</li> <li>Interactive REPL Mode: Stateful sessions with persistent variables and functions</li> <li>Language Switching: Switch between languages on the fly in REPL mode</li> <li>Variable Persistence: Variables and functions persist per language session</li> <li>Main Function Auto-wrapping: Compiled languages work with or without main functions</li> <li>Cross-platform Support: Works on Windows, macOS, and Linux</li> <li>Zero Configuration: No setup files or configuration needed</li> <li>Fast Startup: Written in Rust for instant execution</li> <li>Minimal Memory Footprint: Efficient resource usage</li> </ul>"},{"location":"guide/overview/#next-steps","title":"Next Steps","text":"<p>Explore the documentation to learn more about using run:</p> <ul> <li>Installation: Get run installed on your system</li> <li>Quickstart: Start using run in minutes</li> <li>Command Syntax: Learn all the ways to invoke run</li> <li>Language Detection: Understand how run detects languages</li> <li>REPL Mode: Master the interactive REPL</li> <li>Supported Languages: Browse language-specific guides</li> </ul>"},{"location":"guide/piping-data/","title":"Piping Data","text":"<p>One of <code>run</code>'s most powerful features is seamless integration with Unix pipelines.</p>"},{"location":"guide/piping-data/#reading-from-stdin","title":"Reading from stdin","text":"<p>Your code can read from stdin:</p> <pre><code>echo \"hello world\" | run python \"\nimport sys\ntext = sys.stdin.read()\nprint(text.upper())\n\"\n</code></pre> <p>Output: <pre><code>HELLO WORLD\n</code></pre></p>"},{"location":"guide/piping-data/#json-processing","title":"JSON Processing","text":""},{"location":"guide/piping-data/#python","title":"Python","text":"<pre><code>echo '{\"name\":\"Ada\",\"age\":30}' | run python \"\nimport sys, json\ndata = json.load(sys.stdin)\nprint(f\\\"{data['name']} is {data['age']} years old\\\")\n\"\n</code></pre>"},{"location":"guide/piping-data/#javascript","title":"JavaScript","text":"<pre><code>echo '{\"name\":\"Ada\",\"age\":30}' | run js \"\nconst data = JSON.parse(require('fs').readFileSync(0, 'utf-8'));\nconsole.log(\\`\\${data.name} is \\${data.age} years old\\`);\n\"\n</code></pre>"},{"location":"guide/piping-data/#multi-language-pipelines","title":"Multi-Language Pipelines","text":"<p>Chain different languages together:</p> <pre><code># Python generates JSON\nrun python \"import json; print(json.dumps({'numbers': [1,2,3,4,5]}))\" | \\\n# JavaScript processes it\nrun js \"\nconst data = JSON.parse(require('fs').readFileSync(0, 'utf-8'));\nconst doubled = data.numbers.map(n =&gt; n * 2);\nconsole.log(JSON.stringify({doubled}));\n\" | \\\n# Python displays it\nrun python \"\nimport sys, json\nresult = json.load(sys.stdin)\nprint('Doubled:', result['doubled'])\n\"\n</code></pre> <p>Output: <pre><code>Doubled: [2, 4, 6, 8, 10]\n</code></pre></p>"},{"location":"guide/piping-data/#text-processing","title":"Text Processing","text":"<pre><code># Count lines\ncat file.txt | run python \"import sys; print(len(sys.stdin.readlines()))\"\n\n# Extract emails\ncat text.txt | run python \"\nimport sys, re\ntext = sys.stdin.read()\nemails = re.findall(r'[\\w\\.-]+@[\\w\\.-]+', text)\nprint('\\n'.join(emails))\n\"\n\n# Convert to uppercase\ncat file.txt | run ruby \"puts STDIN.read.upcase\"\n</code></pre>"},{"location":"guide/piping-data/#csv-processing","title":"CSV Processing","text":"<pre><code>cat data.csv | run python \"\nimport sys, csv\nreader = csv.reader(sys.stdin)\nfor row in reader:\n    print(','.join(row[:3]))  # First 3 columns\n\"\n</code></pre>"},{"location":"guide/piping-data/#next-steps","title":"Next Steps","text":"<p>Language Detection \u2192</p>"},{"location":"guide/running-files/","title":"Running Files","text":"<p>Learn how to execute script files with <code>run</code>.</p>"},{"location":"guide/running-files/#basic-file-execution","title":"Basic File Execution","text":"<p>Simply provide the file path:</p> <pre><code>run script.py\nrun main.go\nrun app.js\nrun hello.rs\n</code></pre> <p><code>run</code> automatically detects the language from the file extension.</p>"},{"location":"guide/running-files/#auto-detection","title":"Auto-Detection","text":"<p>Supported file extensions:</p> Extension Language <code>.py</code> Python <code>.js</code> JavaScript <code>.ts</code> TypeScript <code>.rs</code> Rust <code>.go</code> Go <code>.c</code> C <code>.cpp</code>, <code>.cc</code>, <code>.cxx</code> C++ <code>.java</code> Java <code>.cs</code> C# <code>.rb</code> Ruby <code>.sh</code> Bash <code>.php</code> PHP <code>.lua</code> Lua <code>.pl</code> Perl <code>.swift</code> Swift <code>.kt</code> Kotlin <code>.dart</code> Dart <code>.r</code> R <code>.hs</code> Haskell <code>.ex</code>, <code>.exs</code> Elixir <code>.jl</code> Julia"},{"location":"guide/running-files/#passing-arguments","title":"Passing Arguments","text":"<p>Arguments after the filename are passed to your script:</p> <pre><code>run script.py arg1 arg2 arg3\n</code></pre> <p>Your script receives them normally:</p> <pre><code># script.py\nimport sys\nprint(f\"Arguments: {sys.argv[1:]}\")\n</code></pre>"},{"location":"guide/running-files/#overriding-language-detection","title":"Overriding Language Detection","text":"<p>Force a specific language:</p> <pre><code># Treat .txt as Python\nrun --lang python script.txt\n\n# Run extensionless file as Bash\nrun --lang bash my_script\n</code></pre>"},{"location":"guide/running-files/#working-directory","title":"Working Directory","text":"<p>Scripts execute in their directory:</p> <pre><code># script.py in /home/user/project/\nimport os\nprint(os.getcwd())  # /home/user/project\n</code></pre>"},{"location":"guide/running-files/#next-steps","title":"Next Steps","text":"<p>Piping Data \u2192 Language Detection \u2192</p>"},{"location":"languages/","title":"Supported Languages","text":"<p><code>run</code> supports 25 programming languages out of the box, covering a wide range of paradigms and use cases.</p>"},{"location":"languages/#quick-reference","title":"Quick Reference","text":"Language Aliases Status Category Python <code>python</code>, <code>py</code>, <code>py3</code>, <code>python3</code> Stable Scripting JavaScript <code>javascript</code>, <code>js</code>, <code>node</code>, <code>nodejs</code> Stable Web/Scripting TypeScript <code>typescript</code>, <code>ts</code>, <code>ts-node</code>, <code>deno</code> Stable Web/Typed Rust <code>rust</code>, <code>rs</code> Stable Systems Go <code>go</code>, <code>golang</code> Stable Systems C <code>c</code>, <code>gcc</code>, <code>clang</code> Stable Systems C++ <code>cpp</code>, <code>c++</code>, <code>g++</code> Stable Systems Java <code>java</code> Stable Enterprise C# <code>csharp</code>, <code>cs</code>, <code>dotnet</code> Stable Enterprise Ruby <code>ruby</code>, <code>rb</code>, <code>irb</code> Stable Scripting Bash <code>bash</code>, <code>sh</code>, <code>shell</code>, <code>zsh</code> Stable Shell PHP <code>php</code>, <code>php-cli</code> Stable Web Lua <code>lua</code>, <code>luajit</code> Stable Scripting Perl <code>perl</code>, <code>pl</code> Stable Scripting Swift <code>swift</code>, <code>swiftlang</code> Stable iOS/macOS Kotlin <code>kotlin</code>, <code>kt</code>, <code>kts</code> Stable JVM Dart <code>dart</code>, <code>dartlang</code>, <code>flutter</code> Stable Mobile R <code>r</code>, <code>rscript</code>, <code>cran</code> Stable Statistical Haskell <code>haskell</code>, <code>hs</code>, <code>ghci</code> Stable Functional Elixir <code>elixir</code>, <code>ex</code>, <code>exs</code>, <code>iex</code> Stable Functional Julia <code>julia</code>, <code>jl</code> Stable Scientific Crystal <code>crystal</code>, <code>cr</code>, <code>crystal-lang</code> Stable Systems Zig <code>zig</code>, <code>ziglang</code> Stable Systems Nim <code>nim</code>, <code>nimlang</code> Stable Systems Groovy <code>groovy</code> Beta JVM"},{"location":"languages/#by-category","title":"By Category","text":""},{"location":"languages/#scripting-languages","title":"Scripting Languages","text":"<p>High-level, interpreted languages for rapid development:</p> Language Best For Example Python Data science, automation, general scripting <code>run py \"print('hello')\"</code> JavaScript Web development, node scripting <code>run js \"console.log('hello')\"</code> Ruby Web apps, scripting, metaprogramming <code>run rb \"puts 'hello'\"</code> Bash Shell scripting, system automation <code>run bash \"echo hello\"</code> Lua Embedded scripting, game development <code>run lua \"print('hello')\"</code> Perl Text processing, legacy systems <code>run perl \"print 'hello'\"</code> PHP Web development, server-side scripting <code>run php \"echo 'hello';\"</code>"},{"location":"languages/#compiled-systems-languages","title":"Compiled Systems Languages","text":"<p>Low-level languages for performance-critical applications:</p> Language Best For Example Rust Safe systems programming, WebAssembly <code>run rust \"fn main() { println!(\\\"hello\\\"); }\"</code> Go Backend services, cloud infrastructure <code>run go \"package main; func main() { println(\\\"hello\\\") }\"</code> C Operating systems, embedded systems <code>run c \"int main() { printf(\\\"hello\\\\n\\\"); }\"</code> C++ Game engines, high-performance computing <code>run cpp \"int main() { std::cout &lt;&lt; \\\"hello\\\"; }\"</code> Zig Systems programming, C replacement <code>run zig \"pub fn main() !void { ... }\"</code> Nim Systems programming with Python syntax <code>run nim \"echo \\\"hello\\\"\"</code> Crystal Performance with Ruby syntax <code>run cr \"puts \\\"hello\\\"\"</code>"},{"location":"languages/#typed-functional-languages","title":"Typed &amp; Functional Languages","text":"<p>Languages with strong type systems and functional paradigms:</p> Language Best For Example TypeScript Type-safe JavaScript, large applications <code>run ts \"console.log('hello')\"</code> Haskell Pure functional programming, mathematics <code>run hs \"main = putStrLn \\\"hello\\\"\"</code> Elixir Distributed systems, fault-tolerant apps <code>run ex \"IO.puts \\\"hello\\\"\"</code> Julia Scientific computing, numerical analysis <code>run jl \"println(\\\"hello\\\")\"</code>"},{"location":"languages/#enterprise-jvm-languages","title":"Enterprise &amp; JVM Languages","text":"<p>Languages for enterprise applications:</p> Language Best For Example Java Enterprise applications, Android <code>run java \"class Main { ... }\"</code> Kotlin Android development, modern JVM <code>run kt \"fun main() { println(\\\"hello\\\") }\"</code> C# Windows applications, Unity games <code>run cs \"class Program { ... }\"</code>"},{"location":"languages/#specialized-languages","title":"Specialized Languages","text":"<p>Languages for specific domains:</p> Language Best For Example R Statistical analysis, data visualization <code>run r \"print('hello')\"</code> Dart Flutter mobile apps, web <code>run dart \"void main() { print('hello'); }\"</code> Swift iOS/macOS applications <code>run swift \"print(\\\"hello\\\")\"</code>"},{"location":"languages/#checking-available-languages","title":"Checking Available Languages","text":"<p>See which languages are installed on your system:</p> <pre><code>$ run\n&gt;&gt;&gt; :languages\n</code></pre> <p>Output: <pre><code>Available language engines:\n\u2713 python (python, py, py3, python3)\n\u2713 javascript (javascript, js, node, nodejs)\n\u2713 rust (rust, rs)\n\u2713 go (go, golang)\n\u2717 haskell (haskell, hs, ghci) - not installed\n...\n</code></pre></p> <ul> <li>\u2713 = Toolchain is available</li> <li>\u2717 = Toolchain is not installed</li> </ul>"},{"location":"languages/#installing-language-toolchains","title":"Installing Language Toolchains","text":"<p>To use a language, you need its runtime or compiler installed:</p>"},{"location":"languages/#quick-install-commands","title":"Quick Install Commands","text":"PythonJavaScript (Node.js)RustGo <pre><code># Debian/Ubuntu\nsudo apt install python3\n\n# macOS\nbrew install python\n\n# Windows\nwinget install Python.Python.3\n</code></pre> <pre><code># Debian/Ubuntu\ncurl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -\nsudo apt-get install -y nodejs\n\n# macOS\nbrew install node\n\n# Windows\nwinget install OpenJS.NodeJS\n</code></pre> <pre><code># All platforms\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n</code></pre> <pre><code># Debian/Ubuntu\nwget https://go.dev/dl/go1.21.0.linux-amd64.tar.gz\nsudo tar -C /usr/local -xzf go1.21.0.linux-amd64.tar.gz\n\n# macOS\nbrew install go\n\n# Windows\nwinget install GoLang.Go\n</code></pre> <p>See the Installation Guide for complete instructions.</p>"},{"location":"languages/#language-specific-examples","title":"Language-Specific Examples","text":""},{"location":"languages/#python-data-processing","title":"Python - Data Processing","text":"<pre><code>run python \"\nimport json\ndata = {'users': [{'name': 'Alice'}, {'name': 'Bob'}]}\nprint(json.dumps(data, indent=2))\n\"\n</code></pre>"},{"location":"languages/#javascript-async-operations","title":"JavaScript - Async Operations","text":"<pre><code>run js \"\nasync function fetchData() {\n  return {status: 'ok', message: 'Hello'};\n}\nfetchData().then(console.log);\n\"\n</code></pre>"},{"location":"languages/#rust-performance","title":"Rust - Performance","text":"<pre><code>run rust \"\nfn fibonacci(n: u32) -&gt; u32 {\n    match n {\n        0 =&gt; 0,\n        1 =&gt; 1,\n        _ =&gt; fibonacci(n-1) + fibonacci(n-2)\n    }\n}\nfn main() {\n    println!(\\\"{}\\\", fibonacci(10));\n}\n\"\n</code></pre>"},{"location":"languages/#go-concurrency","title":"Go - Concurrency","text":"<pre><code>run go \"\npackage main\nimport \\\"fmt\\\"\nfunc main() {\n    ch := make(chan string)\n    go func() { ch &lt;- \\\"Hello from goroutine\\\" }()\n    fmt.Println(&lt;-ch)\n}\n\"\n</code></pre>"},{"location":"languages/#alias-reference","title":"Alias Reference","text":"<p>Every language has multiple aliases. Use whichever feels natural:</p> <pre><code># Python\nrun python \"...\"\nrun py \"...\"\nrun py3 \"...\"\n\n# JavaScript\nrun javascript \"...\"\nrun js \"...\"\nrun node \"...\"\n\n# TypeScript\nrun typescript \"...\"\nrun ts \"...\"\nrun deno \"...\"\n\n# Rust\nrun rust \"...\"\nrun rs \"...\"\n\n# Go\nrun go \"...\"\nrun golang \"...\"\n</code></pre> <p>View complete alias list \u2192</p>"},{"location":"languages/#cross-language-comparison","title":"Cross-Language Comparison","text":""},{"location":"languages/#hello-world","title":"Hello World","text":"PythonJavaScriptRustGoRuby <pre><code>run py \"print('Hello, World!')\"\n</code></pre> <pre><code>run js \"console.log('Hello, World!')\"\n</code></pre> <pre><code>run rust \"fn main() { println!(\\\"Hello, World!\\\"); }\"\n</code></pre> <pre><code>run go \"package main; import \\\"fmt\\\"; func main() { fmt.Println(\\\"Hello, World!\\\") }\"\n</code></pre> <pre><code>run rb \"puts 'Hello, World!'\"\n</code></pre>"},{"location":"languages/#listsarrays","title":"Lists/Arrays","text":"PythonJavaScriptRustRuby <pre><code>run py \"print([x**2 for x in range(5)])\"\n# [0, 1, 4, 9, 16]\n</code></pre> <pre><code>run js \"console.log([...Array(5).keys()].map(x =&gt; x**2))\"\n# [0, 1, 4, 9, 16]\n</code></pre> <pre><code>run rust \"fn main() { let v: Vec&lt;_&gt; = (0..5).map(|x| x*x).collect(); println!(\\\"{:?}\\\", v); }\"\n# [0, 1, 4, 9, 16]\n</code></pre> <pre><code>run rb \"puts (0..4).map { |x| x**2 }\"\n# [0, 1, 4, 9, 16]\n</code></pre>"},{"location":"languages/#language-features-support","title":"Language Features Support","text":"Feature Python JS Rust Go C C++ Java REPL State File Execution stdin Support Multi-line \u26a0 \u26a0 \u26a0 \u26a0 \u26a0 Auto-detect <p>= Fully supported \u26a0 = Partial support  = Not supported</p>"},{"location":"languages/#contributing-new-languages","title":"Contributing New Languages","text":"<p>Want to add support for a new language? Check out the Contributing Guide.</p>"},{"location":"languages/#next-steps","title":"Next Steps","text":"<p>Explore language-specific guides:</p> <p>Python Guide JavaScript Guide Rust Guide View All Languages \u2192</p>"},{"location":"languages/bash/","title":"Bash","text":"<p>Unix shell and command language for automation</p>"},{"location":"languages/bash/#overview","title":"Overview","text":"<p>Bash (Bourne Again Shell) is the default shell on most Unix-like systems. It's used for scripting, automation, and system administration tasks.</p>"},{"location":"languages/bash/#language-aliases","title":"Language Aliases","text":"<pre><code>run bash \"echo 'Hello'\"\nrun sh \"echo 'Hello'\"\nrun shell \"echo 'Hello'\"\nrun zsh \"echo 'Hello'\"\n# Output: Hello (x4)\n</code></pre>"},{"location":"languages/bash/#multi-line-code","title":"Multi-line Code","text":"<p>Best Practice: Use Heredoc for Multi-line Scripts</p> <p>For multi-line bash scripts, heredoc is essential:</p> <pre><code># RECOMMENDED\nrun bash &lt;&lt; 'EOF'\nfor i in {1..5}; do\n  echo \"Number: $i\"\ndone\nEOF\n\n# OK: Single-line with semicolons\nrun bash \"for i in 1 2 3; do echo \\$i; done\"\n</code></pre>"},{"location":"languages/bash/#repl-behavior","title":"REPL Behavior","text":"<p>Bash's REPL is STATEFUL - variables and functions persist across commands.</p>"},{"location":"languages/c/","title":"C","text":"<p>Low-level systems programming language</p>"},{"location":"languages/c/#overview","title":"Overview","text":"<p>C is a powerful, low-level programming language that provides direct access to memory and hardware. It's the foundation for many operating systems, embedded systems, and performance-critical applications.</p> <p>With run, you can compile and execute C code using GCC or Clang without managing makefiles or build systems.</p>"},{"location":"languages/c/#language-aliases","title":"Language Aliases","text":"<pre><code>run c \"#include &lt;stdio.h&gt;\\\\nint main() { printf(\\\"Hello\\\\n\\\"); return 0; }\"\nrun gcc \"#include &lt;stdio.h&gt;\\\\nint main() { printf(\\\"Hello\\\\n\\\"); return 0; }\"\nrun clang \"#include &lt;stdio.h&gt;\\\\nint main() { printf(\\\"Hello\\\\n\\\"); return 0; }\"\n# Output: Hello (x3)\n</code></pre>"},{"location":"languages/c/#basic-usage","title":"Basic Usage","text":""},{"location":"languages/c/#hello-world","title":"Hello World","text":"<pre><code>run c \"#include &lt;stdio.h&gt;\nint main() {\n    printf(\\\"Hello, World!\\\\n\\\");\n    return 0;\n}\"\n# Output: Hello, World!\n</code></pre>"},{"location":"languages/c/#simple-variables","title":"Simple Variables","text":"<pre><code>run c \"#include &lt;stdio.h&gt;\nint main() {\n    int x = 42;\n    printf(\\\"Value: %d\\\\n\\\", x);\n    return 0;\n}\"\n# Output: Value: 42\n</code></pre>"},{"location":"languages/c/#piping-code-to-run","title":"Piping Code to run","text":"<p>You can pipe C code to run using echo or cat. If you encounter issues with format specifiers being interpreted by your shell, use here-documents instead:</p>"},{"location":"languages/c/#using-echo-usually-works","title":"Using echo (usually works)","text":"<pre><code>echo '#include &lt;stdio.h&gt;\nint main() { printf(\"Hello\\\\n\"); return 0; }' | run c\n# Output: Hello\n</code></pre>"},{"location":"languages/c/#if-issues-occur-use-here-documents","title":"If issues occur, use here-documents","text":"<pre><code>cat &lt;&lt;'EOF' | run c\n#include &lt;stdio.h&gt;\nint main() {\n    int c = 10;\n    printf(\"%d\\\\n\", c);\n    return 0;\n}\nEOF\n# Output: 10\n</code></pre> <p>Multi-line Code: Use Heredoc</p> <p>For multi-line C code, always use heredoc (<code>&lt;&lt; 'EOF'</code>) or pipe from stdin. This avoids shell quoting issues, escape sequences, and ensures your code works reliably.</p>"},{"location":"languages/c/#repl-mode-interactive-c","title":"REPL Mode - Interactive C","text":"<p>Start an interactive C REPL with 'run c'. The REPL is stateful within the session:</p> <pre><code>$ run c\nrun universal REPL. Type :help for commands.\nc&gt;&gt;&gt; #include &lt;stdio.h&gt;\nc&gt;&gt;&gt; int x = 10;\nc&gt;&gt;&gt; printf(\"%d\\\\n\", x);\n10\nc&gt;&gt;&gt; int square(int n) { return n * n; }\nc&gt;&gt;&gt; printf(\"%d\\\\n\", square(5));\n25\nc&gt;&gt;&gt;\n</code></pre>"},{"location":"languages/c/#repl-behavior-stateful","title":"REPL Behavior - Stateful","text":"<p>C's REPL is STATEFUL within a single interactive session:</p> <ul> <li>Start REPL with 'run c'</li> <li>Includes, functions, and variables persist at the c&gt;&gt;&gt; prompt</li> <li>Each command builds on previous definitions in that session</li> <li>Separate 'run c \"code\"' invocations are independent compilations</li> </ul>"},{"location":"languages/c/#troubleshooting-printf-command-issues","title":"Troubleshooting: printf Command Issues","text":"<p>If you use the shell's printf command to pipe C code, it may interpret format specifiers like %d and escape sequences, corrupting your code. This causes compilation errors like 'missing terminating quote'.</p> <p>Solution: Use here-documents with cat &lt;&lt;'EOF' to preserve your C code exactly as written.</p>"},{"location":"languages/c/#problem-example","title":"Problem Example","text":"<pre><code>printf \"int c = 10;\nprintf(\\\"%d\\\\n\\\", c);\n\" | run c\n# Error: The shell's printf interprets %d and \\n,\n# breaking your C string literals.\n</code></pre>"},{"location":"languages/c/#solution","title":"Solution","text":"<pre><code>cat &lt;&lt;'EOF' | run c\nint c = 10;\nprintf(\"%d\\n\", c);\nEOF\n# Output: 10\n</code></pre>"},{"location":"languages/cpp/","title":"C++","text":"<p>Object-oriented extension of C with modern features</p>"},{"location":"languages/cpp/#overview","title":"Overview","text":"<p>C++ extends C with object-oriented programming, templates, and modern features. It's used for game development, high-performance applications, and systems programming.</p>"},{"location":"languages/cpp/#language-aliases","title":"Language Aliases","text":"<pre><code>run cpp \"#include &lt;iostream&gt;\\\\nint main() { std::cout &lt;&lt; \\\"Hello\\\" &lt;&lt; std::endl; return 0; }\"\nrun c++ \"#include &lt;iostream&gt;\\\\nint main() { std::cout &lt;&lt; \\\"Hello\\\" &lt;&lt; std::endl; return 0; }\"\nrun g++ \"#include &lt;iostream&gt;\\\\nint main() { std::cout &lt;&lt; \\\"Hello\\\" &lt;&lt; std::endl; return 0; }\"\n# Output: Hello (x3)\n</code></pre>"},{"location":"languages/cpp/#basic-usage","title":"Basic Usage","text":""},{"location":"languages/cpp/#hello-world","title":"Hello World","text":"<pre><code>run cpp \"#include &lt;iostream&gt;\nint main() {\n    std::cout &lt;&lt; \\\"Hello, World!\\\" &lt;&lt; std::endl;\n    return 0;\n}\"\n# Output: Hello, World!\n</code></pre>"},{"location":"languages/cpp/#using-variables","title":"Using Variables","text":"<pre><code>run cpp \"#include &lt;iostream&gt;\nint main() {\n    int x = 42;\n    std::cout &lt;&lt; \\\"Value: \\\" &lt;&lt; x &lt;&lt; std::endl;\n    return 0;\n}\"\n# Output: Value: 42\n</code></pre>"},{"location":"languages/cpp/#important-include-required-headers","title":"Important: Include Required Headers","text":"<p>Remember to include the standard headers your snippet depends on. std::cout and other standard library features require #include . <p>When in doubt, wrap your snippet in a minimal main() function for portability and proper compilation.</p>"},{"location":"languages/cpp/#problem-missing-headers","title":"Problem - Missing Headers","text":"<pre><code>int square(int x) { return x * x; }\nstd::cout &lt;&lt; square(7) &lt;&lt; std::endl;\n// error: use of undeclared identifier 'std'\n</code></pre>"},{"location":"languages/cpp/#solution-include-headers-and-use-main","title":"Solution - Include Headers and Use main()","text":"<pre><code>cat &lt;&lt;'EOF' | run cpp\n#include &lt;iostream&gt;\nint square(int x) { return x * x; }\nint main() {\n    std::cout &lt;&lt; square(7) &lt;&lt; std::endl;\n    return 0;\n}\nEOF\n# Output: 49\n</code></pre>"},{"location":"languages/cpp/#piping-code-to-run","title":"Piping Code to run","text":"<p>C++ works well with both echo and cat for piping code. Use whichever is more convenient:</p>"},{"location":"languages/cpp/#using-echo","title":"Using echo","text":"<pre><code>echo '#include &lt;iostream&gt;\nint main() { std::cout &lt;&lt; \"Hello\" &lt;&lt; std::endl; return 0; }' | run cpp\n# Output: Hello\n</code></pre>"},{"location":"languages/cpp/#using-here-documents","title":"Using here-documents","text":"<pre><code>cat &lt;&lt;'EOF' | run cpp\n#include &lt;iostream&gt;\nint main() {\n    std::cout &lt;&lt; \"Hello \" &lt;&lt; 42 &lt;&lt; std::endl;\n    return 0;\n}\nEOF\n# Output: Hello 42\n</code></pre> <p>Multi-line Code: Use Heredoc</p> <p>For multi-line C++ code, always use heredoc (<code>&lt;&lt; 'EOF'</code>) or pipe from stdin. This avoids shell quoting issues, escape sequences, and ensures your code works reliably.</p>"},{"location":"languages/cpp/#step-by-step-in-repl-mode","title":"Step-by-step in REPL Mode","text":"<p>For step-by-step execution with persistent state, enter REPL mode once, then type commands interactively:</p> <pre><code>$ run cpp\nrun universal REPL. Type :help for commands.\ncpp&gt;&gt;&gt; #include &lt;iostream&gt;\ncpp&gt;&gt;&gt; int square(int x) { return x * x; }\ncpp&gt;&gt;&gt; std::cout &lt;&lt; square(7) &lt;&lt; std::endl;\n49\ncpp&gt;&gt;&gt;\n</code></pre>"},{"location":"languages/cpp/#repl-behavior-stateful","title":"REPL Behavior - Stateful","text":"<p>C++'s REPL is STATEFUL within a single interactive session:</p> <ul> <li>Start REPL with 'run cpp'</li> <li>Includes, functions, and variables persist at the cpp&gt;&gt;&gt; prompt</li> <li>Each command builds on previous definitions in that session</li> <li>Separate 'run cpp \"code\"' invocations are independent compilations</li> </ul>"},{"location":"languages/cpp/#common-issues-solutions","title":"Common Issues &amp; Solutions","text":"<p>Here are solutions to common problems when working with C++ in run:</p>"},{"location":"languages/cpp/#issue-missing-headers","title":"Issue: Missing Headers","text":"<pre><code>int square(int x){ return x*x; }\nstd::cout &lt;&lt; square(7) &lt;&lt; std::endl;\n// error: use of undeclared identifier 'std'\n</code></pre>"},{"location":"languages/cpp/#solution-add-required-includes","title":"Solution: Add Required Includes","text":"<pre><code>#include &lt;iostream&gt;\nint square(int x) { return x * x; }\nstd::cout &lt;&lt; square(7) &lt;&lt; std::endl;\n// Output: 49\n</code></pre>"},{"location":"languages/cpp/#full-program-with-main","title":"Full Program with main()","text":"<pre><code>cat &lt;&lt;'EOF' | run cpp\n#include &lt;iostream&gt;\nint square(int x) { return x * x; }\nint main() {\n    std::cout &lt;&lt; square(7) &lt;&lt; std::endl;\n    return 0;\n}\nEOF\n# Output: 49\n</code></pre>"},{"location":"languages/crystal/","title":"Crystal","text":"<p>Fast as C, slick as Ruby</p>"},{"location":"languages/crystal/#overview","title":"Overview","text":"<p>Crystal is a compiled language with Ruby-like syntax and static type checking. It aims to combine the elegance of Ruby with the performance of C.</p>"},{"location":"languages/crystal/#language-aliases","title":"Language Aliases","text":"<pre><code>run crystal \"puts \\\"Hello\\\"\"\nrun cr \"puts \\\"Hello\\\"\"\nrun crystal-lang \"puts \\\"Hello\\\"\"\n# Output: Hello (x3)\n</code></pre> <p>Multi-line Code: Use Heredoc</p> <p>For multi-line code, use heredoc (<code>&lt;&lt; 'EOF'</code>) to avoid shell quoting and escaping issues.</p>"},{"location":"languages/crystal/#repl-behavior","title":"REPL Behavior","text":"<p>Crystal's REPL maintains state across commands. Variables, methods, and classes persist within the same REPL session.</p>"},{"location":"languages/csharp/","title":"C","text":"<p>Modern, object-oriented language for .NET</p>"},{"location":"languages/csharp/#overview","title":"Overview","text":"<p>C# is a modern, type-safe language developed by Microsoft for the .NET platform. It's used for desktop applications, web services, games (Unity), and more.</p>"},{"location":"languages/csharp/#language-aliases","title":"Language Aliases","text":"<pre><code>run csharp \"Console.WriteLine(\\\"Hello\\\");\"\nrun cs \"Console.WriteLine(\\\"Hello\\\");\"\nrun dotnet \"Console.WriteLine(\\\"Hello\\\");\"\n# Output: Hello (x3)\n</code></pre> <p>Multi-line Code: Use Heredoc</p> <p>For multi-line code, use heredoc (<code>&lt;&lt; 'EOF'</code>) to avoid shell quoting and escaping issues.</p>"},{"location":"languages/csharp/#repl-behavior","title":"REPL Behavior","text":"<p>C#'s REPL maintains state across commands. Variables, classes, and methods persist within the same REPL session.</p>"},{"location":"languages/dart/","title":"Dart","text":"<p>Client-optimized language for fast apps</p>"},{"location":"languages/dart/#overview","title":"Overview","text":"<p>Dart is Google's language for building mobile, desktop, and web applications. It's the language behind Flutter, Google's UI toolkit.</p>"},{"location":"languages/dart/#language-aliases","title":"Language Aliases","text":"<pre><code>run dart \"void main() { print('Hello'); }\"\nrun dartlang \"void main() { print('Hello'); }\"\nrun flutter \"void main() { print('Hello'); }\"\n# Output: Hello (x3)\n</code></pre>"},{"location":"languages/dart/#important-shell-quoting-and-here-docs","title":"Important: Shell Quoting and Here-Docs","text":"<p>Inline --code snippets are written to a temporary .dart file and executed with dart run. However, shell quoting still matters - single quotes or unescaped characters will cause zsh to attempt globbing or parameter expansion.</p> <p>Use a quoted here-doc to avoid shell interpretation problems.</p>"},{"location":"languages/dart/#recommended-using-here-doc","title":"Recommended - Using here-doc","text":"<pre><code>cat &lt;&lt;'EOF' | run dart\nvoid main() {\n  print('[Dart] hello');\n}\nEOF\n# Output: [Dart] hello\n</code></pre>"},{"location":"languages/dart/#safe-inline-zsh","title":"Safe inline (zsh)","text":"<pre><code>run --lang dart --code $'void main() { print(\"[Dart] hello\"); }\\n'\n# Output: [Dart] hello\n</code></pre>"},{"location":"languages/dart/#basic-dart-example","title":"Basic Dart Example","text":"<pre><code>cat &lt;&lt;'EOF' | run dart\nvoid main() {\n  var name = 'Flutter';\n  print('Hello from $name!');\n}\nEOF\n# Output: Hello from Flutter!\n</code></pre>"},{"location":"languages/dart/#repl-behavior","title":"REPL Behavior","text":"<p>Dart's REPL maintains state across commands. Variables, functions, and classes persist within the same REPL session.</p>"},{"location":"languages/elixir/","title":"Elixir","text":"<p>Functional language for scalable and maintainable applications</p>"},{"location":"languages/elixir/#overview","title":"Overview","text":"<p>Elixir is a dynamic, functional language built on the Erlang VM. It's designed for building scalable, fault-tolerant applications, particularly web services and distributed systems.</p>"},{"location":"languages/elixir/#language-aliases","title":"Language Aliases","text":"<pre><code>run elixir \"IO.puts \\\"Hello\\\"\"\nrun ex \"IO.puts \\\"Hello\\\"\"\nrun exs \"IO.puts \\\"Hello\\\"\"\nrun iex \"IO.puts \\\"Hello\\\"\"\n# Output: Hello (x4)\n</code></pre> <p>Multi-line Code: Use Heredoc</p> <p>For multi-line code, use heredoc (<code>&lt;&lt; 'EOF'</code>) to avoid shell quoting and escaping issues.</p>"},{"location":"languages/elixir/#repl-behavior","title":"REPL Behavior","text":"<p>Elixir's REPL (IEx) is STATEFUL - variables and modules persist across commands.</p>"},{"location":"languages/go/","title":"Go","text":"<p>Simple, reliable, and efficient language by Google</p>"},{"location":"languages/go/#overview","title":"Overview","text":"<p>Go (Golang) is a statically typed, compiled language created by Google. Known for its simplicity, fast compilation, and excellent concurrency support, Go is widely used for backend services, cloud infrastructure, and DevOps tools.</p> <p>With run, you can compile and execute Go code instantly without setting up Go modules or managing go.mod files. The Go engine compiles your code using the Go compiler and executes the resulting binary.</p>"},{"location":"languages/go/#language-aliases","title":"Language Aliases","text":"<p>You can invoke Go using these aliases:</p> <pre><code>run go \"package main; import \\\"fmt\\\"; func main() { fmt.Println(\\\"Hello\\\") }\"\nrun golang \"package main; import \\\"fmt\\\"; func main() { fmt.Println(\\\"Hello\\\") }\"\n# Output: Hello (x2)\n</code></pre>"},{"location":"languages/go/#basic-usage-inline-code","title":"Basic Usage - Inline Code","text":"<p>Execute Go code directly. Go requires package main and a main function:</p>"},{"location":"languages/go/#hello-world","title":"Hello World","text":"<pre><code>run go \"package main; import \\\"fmt\\\"; func main() { fmt.Println(\\\"Hello, World!\\\") }\"\n# Output: Hello, World!\n</code></pre>"},{"location":"languages/go/#variables-and-types","title":"Variables and Types","text":"<pre><code>run go \"package main; import \\\"fmt\\\"; func main() { x := 42; fmt.Printf(\\\"x = %d\\\\n\\\", x) }\"\n# Output: x = 42\n</code></pre>"},{"location":"languages/go/#string-formatting","title":"String Formatting","text":"<pre><code>run go \"package main; import \\\"fmt\\\"; func main() { name := \\\"Alice\\\"; fmt.Printf(\\\"Hello, %s!\\\\n\\\", name) }\"\n# Output: Hello, Alice!\n</code></pre>"},{"location":"languages/go/#multi-line-code","title":"Multi-line Code","text":"<p>Best Practice: Use Heredoc for Multi-line Code</p> <p>For multi-line Go code, use heredoc to avoid shell quoting and escaping issues:</p> <pre><code># RECOMMENDED: Heredoc\nrun go &lt;&lt; 'EOF'\npackage main\nimport \"fmt\"\n\nfunc main() {\n    nums := []int{1, 2, 3, 4, 5}\n    sum := 0\n    for _, n := range nums {\n        sum += n\n    }\n    fmt.Printf(\"Sum: %d\\n\", sum)\n}\nEOF\n\n# OK: Single-line with semicolons\nrun go 'package main; import \"fmt\"; func main() { fmt.Println(\"Quick test\") }'\n\n# AVOID: Multi-line strings (escaping hell)\n</code></pre>"},{"location":"languages/go/#file-execution","title":"File Execution","text":"<p>Execute Go source files:</p> <pre><code>cat &gt; hello.go &lt;&lt; 'EOF'\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello from Go file!\")\n}\nEOF\n\nrun go hello.go\n# Output: Hello from Go file!\n</code></pre>"},{"location":"languages/go/#fibonacci-example","title":"Fibonacci Example","text":"<pre><code>cat &gt; fib.go &lt;&lt; 'EOF'\npackage main\n\nimport \"fmt\"\n\nfunc fibonacci(n int) int {\n    if n &lt;= 1 {\n        return n\n    }\n    return fibonacci(n-1) + fibonacci(n-2)\n}\n\nfunc main() {\n    for i := 0; i &lt; 10; i++ {\n        fmt.Printf(\"F(%d) = %d\\n\", i, fibonacci(i))\n    }\n}\nEOF\n\nrun go fib.go\n# Output:\n# F(0) = 0\n# F(1) = 1\n# F(2) = 1\n# F(3) = 2\n# F(4) = 3\n# F(5) = 5\n# F(6) = 8\n# F(7) = 13\n# F(8) = 21\n# F(9) = 34\n</code></pre>"},{"location":"languages/go/#repl-behavior","title":"REPL Behavior","text":"<p>Go's REPL maintains state across commands. Variables, functions, and imports persist within the same REPL session.</p> <p>Start the REPL with <code>run go</code>, then type commands at the <code>go&gt;&gt;&gt;</code> prompt:</p> <pre><code>\u276f run go\nrun universal REPL. Type :help for commands.\ngo&gt;&gt;&gt; x := 42\ngo&gt;&gt;&gt; fmt.Println(x)\n42\ngo&gt;&gt;&gt;\n</code></pre>"},{"location":"languages/go/#repl-mode-interactive-go","title":"REPL Mode - Interactive Go","text":"<p>Start an interactive Go REPL with 'run go'. Note that Go's REPL behavior may vary:</p> <pre><code>$ run go\nrun universal REPL. Type :help for commands.\ngo&gt;&gt;&gt; import \"fmt\"\ngo&gt;&gt;&gt; x := 10\ngo&gt;&gt;&gt; fmt.Println(x)\n10\ngo&gt;&gt;&gt;\n</code></pre>"},{"location":"languages/go/#advanced-features","title":"Advanced Features","text":"<p>Go's powerful features including goroutines and channels:</p>"},{"location":"languages/go/#slices-and-maps","title":"Slices and Maps","text":"<pre><code>run go \"\npackage main\nimport \\\"fmt\\\"\n\nfunc main() {\n    numbers := []int{1, 2, 3, 4, 5}\n    sum := 0\n    for _, n := range numbers {\n        sum += n\n    }\n    fmt.Printf(\\\"Sum: %d\\\\n\\\", sum)\n\n    ages := map[string]int{\\\"Alice\\\": 30, \\\"Bob\\\": 25}\n    fmt.Printf(\\\"Ages: %v\\\\n\\\", ages)\n}\n\"\n# Output:\n# Sum: 15\n# Ages: map[Alice:30 Bob:25]\n</code></pre>"},{"location":"languages/go/#structs-and-methods","title":"Structs and Methods","text":"<pre><code>run go \"\npackage main\nimport \\\"fmt\\\"\n\ntype Rectangle struct {\n    Width, Height int\n}\n\nfunc (r Rectangle) Area() int {\n    return r.Width * r.Height\n}\n\nfunc main() {\n    rect := Rectangle{Width: 10, Height: 20}\n    fmt.Printf(\\\"Area: %d\\\\n\\\", rect.Area())\n}\n\"\n# Output: Area: 200\n</code></pre>"},{"location":"languages/go/#error-handling","title":"Error Handling","text":"<pre><code>run go \"\npackage main\nimport (\\\"fmt\\\"; \\\"errors\\\")\n\nfunc divide(a, b float64) (float64, error) {\n    if b == 0 {\n        return 0, errors.New(\\\"division by zero\\\")\n    }\n    return a / b, nil\n}\n\nfunc main() {\n    result, err := divide(10, 2)\n    if err != nil {\n        fmt.Println(\\\"Error:\\\", err)\n    } else {\n        fmt.Printf(\\\"Result: %.2f\\\\n\\\", result)\n    }\n}\n\"\n# Output: Result: 5.00\n</code></pre>"},{"location":"languages/go/#common-use-cases","title":"Common Use Cases","text":"<ul> <li>Learning Go syntax and idioms</li> <li>Testing concurrent algorithms</li> <li>Prototyping backend services</li> <li>Quick compilation and execution</li> <li>Exploring Go's standard library</li> </ul>"},{"location":"languages/go/#limitations","title":"Limitations","text":"<ul> <li>No persistent state between REPL commands</li> <li>External packages require go.mod setup</li> <li>Each execution requires compilation</li> <li>Must include package main and main function</li> <li>Goroutines may not work as expected in inline mode</li> </ul>"},{"location":"languages/groovy/","title":"Groovy","text":"<p>Dynamic JVM language with concise syntax and powerful scripting capabilities</p>"},{"location":"languages/groovy/#overview","title":"Overview","text":"<p>Groovy is a powerful, optionally typed dynamic language for the Java Virtual Machine (JVM). It combines the best features of Java with scripting language flexibility, making it ideal for rapid development, testing, and automation.</p> <p>With run, you can execute Groovy code instantly using the Groovy interpreter. Groovy provides seamless Java interoperability, allowing you to use any Java library while enjoying a more concise and expressive syntax.</p>"},{"location":"languages/groovy/#language-aliases","title":"Language Aliases","text":"<p>You can invoke Groovy using any of these aliases:</p> <pre><code>run groovy \"println 'Hello'\"\nrun grv \"println 'Hello'\"\nrun groovysh \"println 'Hello'\"\n# Output: Hello (x3)\n</code></pre> <p>Multi-line Code: Use Heredoc</p> <p>For multi-line code, use heredoc (<code>&lt;&lt; 'EOF'</code>) to avoid shell quoting and escaping issues.</p>"},{"location":"languages/groovy/#basic-usage-inline-code","title":"Basic Usage - Inline Code","text":"<p>Execute Groovy code directly from the command line. Groovy's concise syntax makes it perfect for quick scripts:</p>"},{"location":"languages/groovy/#simple-print-statement","title":"Simple Print Statement","text":"<pre><code>run groovy \"println 'Hello, World!'\"\n# Output: Hello, World!\n</code></pre>"},{"location":"languages/groovy/#variables-and-string-interpolation","title":"Variables and String Interpolation","text":"<pre><code>run groovy \"def name = 'Alice'; println \\\"Hello, \\$name!\\\"\"\n# Output: Hello, Alice!\n</code></pre>"},{"location":"languages/groovy/#arithmetic-operations","title":"Arithmetic Operations","text":"<pre><code>run groovy \"println 2 + 2\"\nrun groovy \"println 10 * 5\"\nrun groovy \"println 100 / 3\"\n# Output:\n# 4\n# 50\n# 33.333333\n</code></pre>"},{"location":"languages/groovy/#collections","title":"Collections","text":"<pre><code>run groovy \"def nums = [1, 2, 3, 4, 5]; println nums.collect { it * 2 }\"\n# Output: [2, 4, 6, 8, 10]\n</code></pre>"},{"location":"languages/groovy/#closures","title":"Closures","text":"<pre><code>run groovy \"def square = { x -&gt; x * x }; println square(7)\"\n# Output: 49\n</code></pre>"},{"location":"languages/groovy/#file-execution","title":"File Execution","text":"<p>Execute Groovy scripts from files. run will automatically detect .groovy files or you can specify the language explicitly:</p> <pre><code>echo \"println 'Hello from file!'\" &gt; hello.groovy\nrun groovy hello.groovy\nrun hello.groovy\n# Output: Hello from file!\n</code></pre>"},{"location":"languages/groovy/#script-with-classes","title":"Script with Classes","text":"<pre><code>cat &gt; person.groovy &lt;&lt; 'EOF'\nclass Person {\n    String name\n    int age\n\n    void introduce() {\n        println \"Hi, I'm ${name} and I'm ${age} years old.\"\n    }\n}\n\ndef person = new Person(name: 'Alice', age: 30)\nperson.introduce()\nEOF\n\nrun groovy person.groovy\n# Output: Hi, I'm Alice and I'm 30 years old.\n</code></pre>"},{"location":"languages/groovy/#important-shell-variable-expansion","title":"Important: Shell Variable Expansion","text":"<p>When piping Groovy code via here-documents, always quote the delimiter (&lt;&lt;'EOF') to prevent the shell from expanding $variables before Groovy sees them.</p> <p>Without quoting, shells like Bash will interpret Groovy's string interpolation syntax as shell variables, causing your code to break.</p>"},{"location":"languages/groovy/#problem-unquoted-delimiter","title":"Problem - Unquoted Delimiter","text":"<pre><code>cat &lt;&lt;EOF | run groovy\ndef name = \"Esubalew\"\nprintln \"Hello, \\$name!\"\nEOF\n# Output: Hello, !  # Variable was erased by shell!\n</code></pre>"},{"location":"languages/groovy/#solution-quoted-delimiter","title":"Solution - Quoted Delimiter","text":"<pre><code>cat &lt;&lt;'EOF' | run groovy\ndef name = \"Esubalew\"\nprintln \"Hello, \\$name!\"\nEOF\n# Output: Hello, Esubalew!\n</code></pre>"},{"location":"languages/groovy/#repl-mode-interactive-groovy","title":"REPL Mode - Interactive Groovy","text":"<p>Start an interactive Groovy REPL by running 'run groovy' without any code. The Groovy REPL is STATEFUL, meaning variables, functions, and classes persist across commands within the same session.</p> <pre><code>$ run groovy\nrun universal REPL. Type :help for commands.\ngroovy&gt;&gt;&gt; def x = 10\ngroovy&gt;&gt;&gt; def y = 20\ngroovy&gt;&gt;&gt; println x + y\n30\ngroovy&gt;&gt;&gt; def greet = { name -&gt; \"Hello, ${name}!\" }\ngroovy&gt;&gt;&gt; println greet('World')\nHello, World!\ngroovy&gt;&gt;&gt; def nums = [1, 2, 3, 4, 5]\ngroovy&gt;&gt;&gt; println nums.sum()\n15\n</code></pre>"},{"location":"languages/groovy/#repl-behavior-stateful","title":"REPL Behavior - Stateful","text":"<p>The Groovy engine maintains state across commands:</p> <ul> <li>Variables defined in one command are available in subsequent commands</li> <li>Functions and closures persist throughout the session</li> <li>Classes and objects remain active for the entire session</li> <li>State is maintained within a single REPL session (started with 'run groovy')</li> <li>Each separate 'run groovy \"code\"' command starts fresh</li> </ul>"},{"location":"languages/groovy/#java-interoperability","title":"Java Interoperability","text":"<p>Groovy runs on the JVM and provides seamless access to Java classes and libraries:</p>"},{"location":"languages/groovy/#using-java-collections","title":"Using Java Collections","text":"<pre><code>run groovy \"\nimport java.util.*\n\ndef list = new ArrayList()\nlist.add('Apple')\nlist.add('Banana')\nlist.add('Cherry')\n\nlist.each { println it }\n\"\n# Output:\n# Apple\n# Banana\n# Cherry\n</code></pre>"},{"location":"languages/groovy/#java-date-and-time","title":"Java Date and Time","text":"<pre><code>run groovy \"\nimport java.time.*\n\ndef now = LocalDateTime.now()\nprintln \\\"Current time: \\${now}\\\"\n\ndef tomorrow = now.plusDays(1)\nprintln \\\"Tomorrow: \\${tomorrow.toLocalDate()}\\\"\n\"\n# Output:\n# Current time: 2025-02-10T14:30:45.123\n# Tomorrow: 2025-02-11\n</code></pre>"},{"location":"languages/groovy/#file-operations","title":"File Operations","text":"<pre><code>run groovy \"\nimport java.io.File\n\ndef file = new File('.')\ndef files = file.listFiles()\nprintln \\\"Found \\${files.length} files\\\"\nfiles.take(5).each { println \\\"  - \\${it.name}\\\" }\n\"\n# Output:\n# Found 12 files\n#   - README.md\n#   - src\n#   - Cargo.toml\n#   - target\n#   - .git\n</code></pre>"},{"location":"languages/groovy/#advanced-groovy-features","title":"Advanced Groovy Features","text":"<p>Groovy provides powerful features that make scripting and development more productive:</p>"},{"location":"languages/groovy/#list-and-map-operations","title":"List and Map Operations","text":"<pre><code>run groovy \"\ndef numbers = [1, 2, 3, 4, 5]\ndef doubled = numbers.collect { it * 2 }\ndef evens = numbers.findAll { it % 2 == 0 }\n\nprintln \\\"Doubled: \\${doubled}\\\"\nprintln \\\"Evens: \\${evens}\\\"\n\ndef person = [name: 'Bob', age: 25, city: 'NYC']\nperson.each { key, value -&gt; println \\\"\\${key}: \\${value}\\\" }\n\"\n# Output:\n# Doubled: [2, 4, 6, 8, 10]\n# Evens: [2, 4]\n# name: Bob\n# age: 25\n# city: NYC\n</code></pre>"},{"location":"languages/groovy/#range-operations","title":"Range Operations","text":"<pre><code>run groovy \"\ndef range = 1..10\nprintln \\\"Range: \\${range}\\\"\nprintln \\\"Sum: \\${range.sum()}\\\"\n\n(1..5).each { println \\\"Number: \\${it}\\\" }\n\"\n# Output:\n# Range: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n# Sum: 55\n# Number: 1\n# Number: 2\n# Number: 3\n# Number: 4\n# Number: 5\n</code></pre>"},{"location":"languages/groovy/#string-methods","title":"String Methods","text":"<pre><code>run groovy \"\ndef text = 'Hello, Groovy World!'\nprintln text.toUpperCase()\nprintln text.toLowerCase()\nprintln text.reverse()\nprintln text.contains('Groovy')\nprintln text.split(',')\n\"\n# Output:\n# HELLO, GROOVY WORLD!\n# hello, groovy world!\n# !dlroW yvoorG ,olleH\n# true\n# [Hello,  Groovy World!]\n</code></pre>"},{"location":"languages/groovy/#regular-expressions","title":"Regular Expressions","text":"<pre><code>run groovy \"\ndef text = 'Contact us at support@example.com or sales@example.com'\ndef emails = text.findAll(/[\\\\w.-]+@[\\\\w.-]+/)\nprintln \\\"Found \\${emails.size()} emails:\\\"\nemails.each { println \\\"  - \\${it}\\\" }\n\"\n# Output:\n# Found 2 emails:\n#   - support@example.com\n#   - sales@example.com\n</code></pre>"},{"location":"languages/groovy/#safe-navigation-operator","title":"Safe Navigation Operator","text":"<pre><code>run groovy \"\ndef person = [name: 'Alice', address: null]\nprintln person?.name\nprintln person?.address?.street  // No NullPointerException!\nprintln person?.address?.street ?: 'No address'\n\"\n# Output:\n# Alice\n# null\n# No address\n</code></pre>"},{"location":"languages/groovy/#groovy-for-testing","title":"Groovy for Testing","text":"<p>Groovy's concise syntax makes it excellent for writing tests and assertions:</p>"},{"location":"languages/groovy/#simple-assertions","title":"Simple Assertions","text":"<pre><code>run groovy \"\ndef add = { a, b -&gt; a + b }\n\nassert add(2, 3) == 5\nassert add(10, 20) == 30\nassert add(-5, 5) == 0\n\nprintln 'All tests passed!'\n\"\n# Output: All tests passed!\n</code></pre>"},{"location":"languages/groovy/#collection-assertions","title":"Collection Assertions","text":"<pre><code>run groovy \"\ndef numbers = [1, 2, 3, 4, 5]\n\nassert numbers.size() == 5\nassert numbers.contains(3)\nassert numbers.every { it &gt; 0 }\nassert numbers.any { it % 2 == 0 }\n\nprintln 'Collection tests passed!'\n\"\n# Output: Collection tests passed!\n</code></pre>"},{"location":"languages/groovy/#common-use-cases","title":"Common Use Cases","text":"<ul> <li>Rapid prototyping and scripting on the JVM</li> <li>Build automation with Gradle</li> <li>Testing and test automation</li> <li>Data processing and transformation</li> <li>Jenkins pipeline scripts</li> <li>Quick Java library testing</li> <li>System administration tasks</li> <li>DSL (Domain-Specific Language) creation</li> <li>Web development with Grails framework</li> </ul>"},{"location":"languages/groovy/#error-handling","title":"Error Handling","text":"<p>run displays Groovy errors clearly with stack traces:</p> <pre><code>run groovy \"println 'missing quote\"\n# Output: SyntaxError: unexpected token\n\nrun groovy \"def x = 10 / 0\"\n# Output: ArithmeticException: Division by zero\n\nrun groovy \"println undefinedVariable\"\n# Output: MissingPropertyException: No such property: undefinedVariable\n</code></pre>"},{"location":"languages/groovy/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter issues with Groovy in run:</p> <ul> <li>Ensure Groovy is installed: <code>groovy --version</code></li> <li>Check that Groovy is in your system PATH</li> <li>For Java library imports, ensure the JARs are in the classpath</li> <li>Always quote here-document delimiters (&lt;&lt;'EOF') to prevent shell expansion</li> <li>Use proper Groovy syntax - semicolons are optional but can help clarity</li> <li>If REPL state seems corrupted, use :reset to clear the session</li> </ul>"},{"location":"languages/groovy/#limitations","title":"Limitations","text":"<ul> <li>External Groovy libraries (Grapes) require separate installation</li> <li>Some IDE-specific features may not be available</li> <li>Compilation time may be slower than pure Java</li> <li>Large scripts may require JVM tuning for optimal performance</li> </ul>"},{"location":"languages/haskell/","title":"Haskell","text":"<p>Pure functional programming language with strong static typing</p>"},{"location":"languages/haskell/#overview","title":"Overview","text":"<p>Haskell is a purely functional programming language with strong static typing and lazy evaluation. It's used in academia, finance, and for building robust, maintainable systems.</p>"},{"location":"languages/haskell/#language-aliases","title":"Language Aliases","text":"<pre><code>run haskell \"main = putStrLn \\\"Hello\\\"\"\nrun hs \"main = putStrLn \\\"Hello\\\"\"\nrun ghci \"main = putStrLn \\\"Hello\\\"\"\n# Output: Hello (x3)\n</code></pre> <p>Multi-line Code: Use Heredoc</p> <p>For multi-line code, use heredoc (<code>&lt;&lt; 'EOF'</code>) to avoid shell quoting and escaping issues.</p>"},{"location":"languages/haskell/#repl-behavior","title":"REPL Behavior","text":"<p>Haskell's REPL (GHCi) is STATEFUL - definitions persist across commands.</p>"},{"location":"languages/java/","title":"Java","text":"<p>Enterprise-grade object-oriented programming</p>"},{"location":"languages/java/#overview","title":"Overview","text":"<p>Java is a widely-used, object-oriented programming language known for its 'write once, run anywhere' philosophy. With run, you can compile and execute Java code without managing complex project structures.</p>"},{"location":"languages/java/#basic-usage","title":"Basic Usage","text":""},{"location":"languages/java/#hello-world","title":"Hello World","text":"<pre><code>run java \"public class Main { public static void main(String[] args) { System.out.println(\\\"Hello, World!\\\"); } }\"\n# Output: Hello, World!\n</code></pre> <p>Multi-line Code: Use Heredoc</p> <p>For multi-line code, use heredoc (<code>&lt;&lt; 'EOF'</code>) to avoid shell quoting and escaping issues.</p>"},{"location":"languages/java/#repl-behavior","title":"REPL Behavior","text":"<p>Java's REPL maintains state across commands. Variables, classes, and methods persist within the same REPL session.</p>"},{"location":"languages/javascript/","title":"JavaScript","text":"<p>Dynamic, high-level programming language for web and server-side development</p>"},{"location":"languages/javascript/#overview","title":"Overview","text":"<p>JavaScript is the language of the web, powering interactive websites and modern web applications. With run, you can execute JavaScript code using Node.js without setting up npm projects or managing package.json files.</p> <p>The JavaScript engine in run uses Node.js as the runtime, providing access to all Node.js built-in modules and APIs. The REPL mode is stateful, meaning variables and functions persist across commands within the same session.</p>"},{"location":"languages/javascript/#language-aliases","title":"Language Aliases","text":"<p>You can invoke JavaScript using any of these aliases:</p> <pre><code>run javascript \"console.log('Hello')\"\nrun js \"console.log('Hello')\"\nrun node \"console.log('Hello')\"\nrun nodejs \"console.log('Hello')\"\n# Output: Hello (x4)\n</code></pre>"},{"location":"languages/javascript/#basic-usage-inline-code","title":"Basic Usage - Inline Code","text":"<p>Execute JavaScript code directly from the command line:</p>"},{"location":"languages/javascript/#simple-console-log","title":"Simple Console Log","text":"<pre><code>run js \"console.log('Hello, World!')\"\n# Output: Hello, World!\n</code></pre>"},{"location":"languages/javascript/#arithmetic-and-variables","title":"Arithmetic and Variables","text":"<pre><code>run js \"const x = 10; const y = 20; console.log(x + y)\"\n# Output: 30\n</code></pre>"},{"location":"languages/javascript/#template-literals","title":"Template Literals","text":"<pre><code>run js \"const name = 'Alice'; console.log(\\`Hello, \\${name}!\\`)\"\n# Output: Hello, Alice!\n</code></pre>"},{"location":"languages/javascript/#arrow-functions","title":"Arrow Functions","text":"<pre><code>run js \"const square = x =&gt; x * x; console.log(square(5))\"\n# Output: 25\n</code></pre>"},{"location":"languages/javascript/#array-methods","title":"Array Methods","text":"<pre><code>run js \"const nums = [1,2,3,4,5]; console.log(nums.map(x =&gt; x * 2))\"\n# Output: [ 2, 4, 6, 8, 10 ]\n</code></pre>"},{"location":"languages/javascript/#multi-line-code","title":"Multi-line Code","text":"<p>Best Practice: Use Heredoc</p> <p>For multi-line JavaScript code, always use heredoc to avoid shell quoting issues:</p> <pre><code># RECOMMENDED: Heredoc\nrun js &lt;&lt; 'EOF'\nconst users = [\n    { name: 'Alice', age: 30 },\n    { name: 'Bob', age: 25 }\n];\nusers.forEach(u =&gt; console.log(`${u.name}: ${u.age}`));\nEOF\n\n# OK: Single-line with semicolons\nrun js \"const x = [1,2,3]; x.forEach(n =&gt; console.log(n * 2));\"\n\n# AVOID: Multi-line strings (quote/escaping issues)\nrun js \"\nconst users = [{name: 'Alice'}];\nconsole.log(users);\n\"\n</code></pre>"},{"location":"languages/javascript/#file-execution","title":"File Execution","text":"<p>Execute JavaScript files with Node.js:</p> <pre><code># Create a JavaScript file\necho \"console.log('Hello from file!')\" &gt; hello.js\n\n# Execute with language specified\nrun js hello.js\n\n# Or let run auto-detect from extension\nrun hello.js\n# Output: Hello from file!\n</code></pre>"},{"location":"languages/javascript/#module-example","title":"Module Example","text":"<pre><code># Create a module file\ncat &gt; math.js &lt;&lt; 'EOF'\nfunction factorial(n) {\n  if (n &lt;= 1) return 1;\n  return n * factorial(n - 1);\n}\n\nfor (let i = 0; i &lt;= 10; i++) {\n  console.log(`${i}! = ${factorial(i)}`);\n}\nEOF\n\nrun js math.js\n# Output:\n# 0! = 1\n# 1! = 1\n# 2! = 2\n# 3! = 6\n# 4! = 24\n# 5! = 120\n# 6! = 720\n# 7! = 5040\n# 8! = 40320\n# 9! = 362880\n# 10! = 3628800\n</code></pre>"},{"location":"languages/javascript/#repl-mode-interactive-javascript","title":"REPL Mode - Interactive JavaScript","text":"<p>Start an interactive JavaScript REPL with 'run js'. The REPL is stateful within the session - variables and functions persist across commands at the js&gt;&gt;&gt; prompt:</p> <pre><code>$ run js\nrun universal REPL. Type :help for commands.\njs&gt;&gt;&gt; let x = 10\nundefined\njs&gt;&gt;&gt; let y = 20\nundefined\njs&gt;&gt;&gt; x + y\n30\njs&gt;&gt;&gt; const greet = name =&gt; `Hello, ${name}!`\nundefined\njs&gt;&gt;&gt; greet('World')\n'Hello, World!'\njs&gt;&gt;&gt; const numbers = [1, 2, 3, 4, 5]\nundefined\njs&gt;&gt;&gt; numbers.reduce((a, b) =&gt; a + b, 0)\n15\n</code></pre>"},{"location":"languages/javascript/#repl-behavior-stateful","title":"REPL Behavior - Stateful","text":"<p>JavaScript's REPL is STATEFUL within a single session:</p> <ul> <li>Start REPL once with 'run js'</li> <li>Variables and functions persist at the js&gt;&gt;&gt; prompt</li> <li>Each separate 'run js \"code\"' command is independent</li> </ul>"},{"location":"languages/javascript/#nodejs-built-in-modules","title":"Node.js Built-in Modules","text":"<p>Access all Node.js built-in modules without installation:</p>"},{"location":"languages/javascript/#file-system-operations","title":"File System Operations","text":"<pre><code>run js \"\nconst fs = require('fs');\nconst files = fs.readdirSync('.');\nconsole.log(\\`Found \\${files.length} files\\`);\nfiles.slice(0, 5).forEach(f =&gt; console.log(\\`  - \\${f}\\`));\n\"\n# Output:\n# Found 12 files\n#   - README.md\n#   - src\n#   - Cargo.toml\n#   - target\n#   - .git\n</code></pre>"},{"location":"languages/javascript/#path-operations","title":"Path Operations","text":"<pre><code>run js \"\nconst path = require('path');\nconst file = '/home/user/documents/file.txt';\nconsole.log('Directory:', path.dirname(file));\nconsole.log('Filename:', path.basename(file));\nconsole.log('Extension:', path.extname(file));\n\"\n# Output:\n# Directory: /home/user/documents\n# Filename: file.txt\n# Extension: .txt\n</code></pre>"},{"location":"languages/javascript/#os-information","title":"OS Information","text":"<pre><code>run js \"\nconst os = require('os');\nconsole.log('Platform:', os.platform());\nconsole.log('CPU Cores:', os.cpus().length);\nconsole.log('Total Memory:', Math.round(os.totalmem() / 1024 / 1024 / 1024) + ' GB');\n\"\n# Output:\n# Platform: linux\n# CPU Cores: 8\n# Total Memory: 16 GB\n</code></pre>"},{"location":"languages/javascript/#modern-javascript-features","title":"Modern JavaScript Features","text":"<p>Use ES6+ features including async/await, destructuring, and more:</p>"},{"location":"languages/javascript/#asyncawait","title":"Async/Await","text":"<pre><code>run js \"\nconst delay = ms =&gt; new Promise(resolve =&gt; setTimeout(resolve, ms));\n(async () =&gt; {\n  console.log('Starting...');\n  await delay(1000);\n  console.log('Done after 1 second!');\n})();\n\"\n# Output:\n# Starting...\n# Done after 1 second!\n</code></pre>"},{"location":"languages/javascript/#destructuring","title":"Destructuring","text":"<pre><code>run js \"\nconst person = { name: 'Alice', age: 30, city: 'NYC' };\nconst { name, age } = person;\nconsole.log(\\`\\${name} is \\${age} years old\\`);\n\"\n# Output: Alice is 30 years old\n</code></pre>"},{"location":"languages/javascript/#spread-operator","title":"Spread Operator","text":"<pre><code>run js \"\nconst arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\nconst combined = [...arr1, ...arr2];\nconsole.log(combined);\n\"\n# Output: [ 1, 2, 3, 4, 5, 6 ]\n</code></pre>"},{"location":"languages/javascript/#common-use-cases","title":"Common Use Cases","text":"<ul> <li>Quick JavaScript prototyping and testing</li> <li>Node.js script development</li> <li>JSON data processing and manipulation</li> <li>File system operations and automation</li> <li>Testing algorithms and data structures</li> <li>Learning modern JavaScript features</li> <li>API testing and HTTP requests</li> <li>String manipulation and parsing</li> </ul>"},{"location":"languages/javascript/#limitations","title":"Limitations","text":"<ul> <li>External npm packages must be installed separately</li> <li>No automatic package.json or node_modules management</li> <li>Browser-specific APIs (DOM, window) are not available</li> <li>Some async operations may require explicit handling</li> </ul>"},{"location":"languages/julia/","title":"Julia","text":"<p>High-performance language for technical computing</p>"},{"location":"languages/julia/#overview","title":"Overview","text":"<p>Julia is a high-level, high-performance language for technical computing. It's designed for numerical and scientific computing, with syntax similar to MATLAB and Python.</p>"},{"location":"languages/julia/#language-aliases","title":"Language Aliases","text":"<pre><code>run julia \"println(\\\"Hello\\\")\"\nrun jl \"println(\\\"Hello\\\")\"\n# Output: Hello (x2)\n</code></pre> <p>Multi-line Code: Use Heredoc</p> <p>For multi-line code, use heredoc (<code>&lt;&lt; 'EOF'</code>) to avoid shell quoting and escaping issues.</p>"},{"location":"languages/julia/#repl-behavior","title":"REPL Behavior","text":"<p>Julia's REPL is STATEFUL - variables and functions persist across commands.</p>"},{"location":"languages/kotlin/","title":"Kotlin","text":"<p>Modern JVM language with concise syntax</p>"},{"location":"languages/kotlin/#overview","title":"Overview","text":"<p>Kotlin is a modern, concise language that runs on the JVM. It's the preferred language for Android development and is also used for server-side applications.</p>"},{"location":"languages/kotlin/#language-aliases","title":"Language Aliases","text":"<pre><code>run kotlin \"fun main() { println(\\\"Hello\\\") }\"\nrun kt \"fun main() { println(\\\"Hello\\\") }\"\nrun kts \"fun main() { println(\\\"Hello\\\") }\"\n# Output: Hello (x3)\n</code></pre> <p>Multi-line Code: Use Heredoc</p> <p>For multi-line code, use heredoc (<code>&lt;&lt; 'EOF'</code>) to avoid shell quoting and escaping issues.</p>"},{"location":"languages/kotlin/#repl-behavior","title":"REPL Behavior","text":"<p>Kotlin's REPL maintains state across commands. Variables, functions, and classes persist within the same REPL session.</p>"},{"location":"languages/lua/","title":"Lua","text":"<p>Lightweight scripting language for embedded systems and games</p>"},{"location":"languages/lua/#overview","title":"Overview","text":"<p>Lua is a lightweight, embeddable scripting language widely used in game development, embedded systems, and as a configuration language.</p>"},{"location":"languages/lua/#language-aliases","title":"Language Aliases","text":"<pre><code>run lua \"print('Hello')\"\nrun luajit \"print('Hello')\"\n# Output: Hello (x2)\n</code></pre> <p>Multi-line Code: Use Heredoc</p> <p>For multi-line code, use heredoc (<code>&lt;&lt; 'EOF'</code>) to avoid shell quoting and escaping issues.</p>"},{"location":"languages/lua/#repl-behavior","title":"REPL Behavior","text":"<p>Lua's REPL is STATEFUL - variables and functions persist across commands.</p>"},{"location":"languages/nim/","title":"Nim","text":"<p>Efficient, expressive language with Python-like syntax</p>"},{"location":"languages/nim/#overview","title":"Overview","text":"<p>Nim is a statically typed compiled language that combines the efficiency of C with the expressiveness of Python. It compiles to C, C++, or JavaScript.</p>"},{"location":"languages/nim/#language-aliases","title":"Language Aliases","text":"<pre><code>run nim \"echo \\\"Hello\\\"\"\nrun nimlang \"echo \\\"Hello\\\"\"\n# Output: Hello (x2)\n</code></pre> <p>Multi-line Code: Use Heredoc</p> <p>For multi-line code, use heredoc (<code>&lt;&lt; 'EOF'</code>) to avoid shell quoting and escaping issues.</p>"},{"location":"languages/nim/#repl-behavior","title":"REPL Behavior","text":"<p>Nim's REPL maintains state across commands. Variables, functions, and imports persist within the same REPL session.</p> <p>Start the REPL with <code>run nim</code>, then type commands at the <code>nim&gt;&gt;&gt;</code> prompt:</p> <pre><code>\u276f run nim\nrun universal REPL. Type :help for commands.\nnim&gt;&gt;&gt; var age: int = 25\nnim&gt;&gt;&gt; age\n25\nnim&gt;&gt;&gt;\n</code></pre>"},{"location":"languages/perl/","title":"Perl","text":"<p>Powerful text processing and scripting language</p>"},{"location":"languages/perl/#overview","title":"Overview","text":"<p>Perl is a high-level, general-purpose language known for its text processing capabilities and extensive CPAN module ecosystem.</p>"},{"location":"languages/perl/#language-aliases","title":"Language Aliases","text":"<pre><code>run perl \"print 'Hello\\\\n';\"\nrun pl \"print 'Hello\\\\n';\"\n# Output: Hello (x2)\n</code></pre> <p>Multi-line Code: Use Heredoc</p> <p>For multi-line code, use heredoc (<code>&lt;&lt; 'EOF'</code>) to avoid shell quoting and escaping issues.</p>"},{"location":"languages/perl/#repl-behavior","title":"REPL Behavior","text":"<p>Perl's REPL is STATEFUL - variables persist across commands.</p>"},{"location":"languages/php/","title":"PHP","text":"<p>Server-side scripting language for web development</p>"},{"location":"languages/php/#overview","title":"Overview","text":"<p>PHP is a popular server-side scripting language designed for web development. It powers millions of websites and web applications worldwide.</p>"},{"location":"languages/php/#language-aliases","title":"Language Aliases","text":"<pre><code>run php \"echo 'Hello';\"\nrun php-cli \"echo 'Hello';\"\n# Output: Hello (x2)\n</code></pre>"},{"location":"languages/php/#multi-line-code","title":"Multi-line Code","text":"<p>Best Practice: Use Heredoc</p> <p>For multi-line PHP, use heredoc:</p> <pre><code># RECOMMENDED\nrun php &lt;&lt; 'EOF'\n&lt;?php\n$users = ['Alice', 'Bob', 'Charlie'];\nforeach ($users as $user) {\n    echo \"$user\\n\";\n}\nEOF\n\n# OK: Single-line\nrun php \"&lt;?php echo implode(', ', [1,2,3]);\"\n</code></pre>"},{"location":"languages/php/#repl-behavior","title":"REPL Behavior","text":"<p>PHP's REPL is STATEFUL - variables persist across commands.</p>"},{"location":"languages/python/","title":"Python","text":"<p>High-level, interpreted programming language known for simplicity and versatility</p>"},{"location":"languages/python/#overview","title":"Overview","text":"<p>Python is one of the most popular programming languages in the world, widely used for web development, data science, machine learning, automation, and more. With run, you can execute Python code instantly without setting up virtual environments or managing complex dependencies.</p> <p>run supports both Python 2 and Python 3, automatically using the python3 interpreter available on your system. The Python engine in run provides a stateful REPL that accumulates snippets into a persistent session script, so your variables and functions survive across commands.</p>"},{"location":"languages/python/#language-aliases","title":"Language Aliases","text":"<p>You can invoke Python using any of these aliases:</p> Alias Description <code>python</code> Full language name <code>py</code> Short alias <code>py3</code> Python 3 specific <code>python3</code> Python 3 explicit <pre><code>run python \"print('Hello')\"\nrun py \"print('Hello')\"\nrun py3 \"print('Hello')\"\nrun python3 \"print('Hello')\"\n# Output: Hello (x4)\n</code></pre>"},{"location":"languages/python/#basic-usage-inline-code","title":"Basic Usage - Inline Code","text":"<p>Execute Python code directly from the command line using the --code flag or as a positional argument:</p>"},{"location":"languages/python/#simple-print-statement","title":"Simple Print Statement","text":"<pre><code>run python \"print('Hello, World!')\"\n# Output: Hello, World!\n</code></pre>"},{"location":"languages/python/#arithmetic-operations","title":"Arithmetic Operations","text":"<pre><code>run python \"print(2 + 2)\"\nrun python \"print(10 * 5)\"\nrun python \"print(100 / 3)\"\n# Output:\n# 4\n# 50\n# 33.333333333333336\n</code></pre>"},{"location":"languages/python/#string-operations","title":"String Operations","text":"<pre><code>run python \"name = 'Alice'; print(f'Hello, {name}!')\"\n# Output: Hello, Alice!\n</code></pre>"},{"location":"languages/python/#multi-line-code","title":"Multi-line Code","text":"<p>For multi-line code, use heredoc for the best experience:</p> <pre><code>run python &lt;&lt; 'EOF'\nfor i in range(5):\n    print(f'Number: {i}')\nEOF\n# Output:\n# Number: 0\n# Number: 1\n# Number: 2\n# Number: 3\n# Number: 4\n</code></pre> <p>For short multi-statement code, use semicolons:</p> <pre><code>run python \"x = [1, 2, 3]; y = [i*2 for i in x]; print(y)\"\n# Output: [2, 4, 6]\n</code></pre>"},{"location":"languages/python/#file-execution","title":"File Execution","text":"<p>Execute Python scripts from files. run will automatically detect .py files or you can specify the language explicitly:</p> <pre><code># Create a Python file\necho \"print('Hello from file!')\" &gt; hello.py\n\n# Execute with language specified\nrun python hello.py\n\n# Or let run auto-detect from extension\nrun hello.py\n# Output: Hello from file!\n</code></pre>"},{"location":"languages/python/#complex-script-example","title":"Complex Script Example","text":"<pre><code># Create a more complex script\ncat &gt; fibonacci.py &lt;&lt; 'EOF'\ndef fibonacci(n):\n    if n &lt;= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)\n\nfor i in range(10):\n    print(f\"F({i}) = {fibonacci(i)}\")\nEOF\n\nrun python fibonacci.py\n# Output:\n# F(0) = 0\n# F(1) = 1\n# F(2) = 1\n# F(3) = 2\n# F(4) = 3\n# F(5) = 5\n# F(6) = 8\n# F(7) = 13\n# F(8) = 21\n# F(9) = 34\n</code></pre>"},{"location":"languages/python/#piped-input-stdin","title":"Piped Input (stdin)","text":"<p>Pipe Python code into run from other commands or files:</p> <pre><code># Echo to run\necho \"print('From stdin')\" | run python\n# Output: From stdin\n\n# Cat file to run\ncat script.py | run python\n\n# Generate and execute\necho \"import sys; print(sys.version)\" | run python\n# Output: 3.11.0 (main, Oct 24 2022, 18:26:48) [GCC 12.2.0]\n</code></pre>"},{"location":"languages/python/#repl-mode-interactive-python","title":"REPL Mode - Interactive Python","text":"<p>Start an interactive Python REPL by running 'run python' without any code. The Python REPL in run is STATEFUL, meaning variables, functions, and imports persist across commands within the same session.</p> <pre><code>$ run python\nrun universal REPL. Type :help for commands.\npython&gt;&gt;&gt; x = 10\npython&gt;&gt;&gt; y = 20\npython&gt;&gt;&gt; print(x + y)\n30\npython&gt;&gt;&gt; def greet(name):\n...     return f\"Hello, {name}!\"\n...\npython&gt;&gt;&gt; greet(\"World\")\n'Hello, World!'\npython&gt;&gt;&gt; greet(\"Python\")\n'Hello, Python!'\n</code></pre> <pre><code>python&gt;&gt;&gt; import math\npython&gt;&gt;&gt; math.pi\n3.141592653589793\npython&gt;&gt;&gt; math.sqrt(16)\n4.0\npython&gt;&gt;&gt; from datetime import datetime\npython&gt;&gt;&gt; datetime.now()\ndatetime.datetime(2025, 2, 10, 14, 30, 45, 123456)\n</code></pre>"},{"location":"languages/python/#repl-behavior-stateful","title":"REPL Behavior - Stateful","text":"<p>The Python engine maintains state across commands by accumulating code into a session script. This means:</p> <ul> <li>Variables defined in one command are available in subsequent commands</li> <li>Functions and classes persist throughout the session</li> <li>Imports remain active for the entire session</li> <li>State is maintained within a single REPL session (started with 'run python')</li> <li>Each separate 'run python \"code\"' command starts fresh - use REPL mode for persistent state</li> </ul>"},{"location":"languages/python/#advanced-examples","title":"Advanced Examples","text":"<p>Python's rich standard library and ecosystem work seamlessly with run:</p>"},{"location":"languages/python/#working-with-files","title":"Working with Files","text":"<pre><code>run python \"\nimport os\nfiles = os.listdir('.')\nprint(f'Found {len(files)} files in current directory')\nfor f in files[:5]:\n    print(f'  - {f}')\n\"\n# Output:\n# Found 12 files in current directory\n#   - README.md\n#   - src\n#   - Cargo.toml\n#   - target\n#   - .git\n</code></pre>"},{"location":"languages/python/#json-processing","title":"JSON Processing","text":"<pre><code>run python \"\nimport json\ndata = {\n    'name': 'run',\n    'version': '1.0',\n    'languages': 25,\n    'author': 'Esubaalew'\n}\nprint(json.dumps(data, indent=2))\n\"\n</code></pre>"},{"location":"languages/python/#list-comprehensions","title":"List Comprehensions","text":"<pre><code>run python \"\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nevens = [n for n in numbers if n % 2 == 0]\nsquares = [n**2 for n in evens]\nprint(f'Even numbers: {evens}')\nprint(f'Their squares: {squares}')\n\"\n# Output:\n# Even numbers: [2, 4, 6, 8, 10]\n# Their squares: [4, 16, 36, 64, 100]\n</code></pre>"},{"location":"languages/python/#working-with-dates","title":"Working with Dates","text":"<pre><code>run python \"\nfrom datetime import datetime, timedelta\nnow = datetime.now()\ntomorrow = now + timedelta(days=1)\nprint(f'Today: {now.strftime(\\\"%Y-%m-%d\\\")}')\nprint(f'Tomorrow: {tomorrow.strftime(\\\"%Y-%m-%d\\\")}')\n\"\n# Output:\n# Today: 2025-02-10\n# Tomorrow: 2025-02-11\n</code></pre>"},{"location":"languages/python/#regular-expressions","title":"Regular Expressions","text":"<pre><code>run python \"\nimport re\ntext = 'Contact us at support@example.com or sales@example.com'\nemails = re.findall(r'[\\\\w.-]+@[\\\\w.-]+', text)\nprint(f'Found {len(emails)} emails:')\nfor email in emails:\n    print(f'  - {email}')\n\"\n# Output:\n# Found 2 emails:\n#   - support@example.com\n#   - sales@example.com\n</code></pre>"},{"location":"languages/python/#common-use-cases","title":"Common Use Cases","text":"<ul> <li>Quick calculations and data processing</li> <li>Testing Python snippets before adding to larger projects</li> <li>Learning Python interactively with immediate feedback</li> <li>Automating system tasks and file operations</li> <li>Processing JSON, CSV, and other data formats</li> <li>Prototyping algorithms and data structures</li> <li>Web scraping and API testing</li> <li>Text processing and regular expressions</li> <li>Mathematical computations and statistics</li> </ul>"},{"location":"languages/python/#error-handling","title":"Error Handling","text":"<p>run displays Python errors clearly with full tracebacks:</p> <pre><code>run python \"print('missing quote)\"\n# Output: SyntaxError: unterminated string literal\n\nrun python \"x = 10 / 0\"\n# Output: ZeroDivisionError: division by zero\n\nrun python \"print(undefined_variable)\"\n# Output: NameError: name 'undefined_variable' is not defined\n</code></pre>"},{"location":"languages/python/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter issues with Python in run:</p> <ul> <li>Ensure Python 3 is installed: <code>python3 --version</code></li> <li>Check that Python is in your system PATH</li> <li>For module import errors, install required packages: <code>pip install package_name</code></li> <li>Use quotes around code with special characters or spaces</li> <li>For multi-line code, always use heredoc (<code>&lt;&lt; 'EOF'</code>) to avoid quoting issues</li> <li>For multi-statement one-liners, use semicolons: <code>\"stmt1; stmt2; stmt3\"</code></li> <li>If REPL state seems corrupted, exit and restart the session</li> </ul>"},{"location":"languages/python/#limitations","title":"Limitations","text":"<ul> <li>External packages must be installed separately via pip</li> <li>Virtual environments are not automatically activated</li> <li>Some interactive features (like input()) may not work in inline mode</li> <li>Large outputs may be truncated in some terminals</li> <li>GUI applications (tkinter, pygame) require a display server</li> </ul>"},{"location":"languages/r/","title":"R","text":"<p>Statistical computing and graphics language</p>"},{"location":"languages/r/#overview","title":"Overview","text":"<p>R is a language and environment for statistical computing and graphics. It's widely used by statisticians, data scientists, and researchers for data analysis and visualization.</p>"},{"location":"languages/r/#language-aliases","title":"Language Aliases","text":"<pre><code>run r \"print('Hello')\"\nrun rscript \"print('Hello')\"\nrun cran \"print('Hello')\"\n# Output: [1] \"Hello\" (x3)\n</code></pre> <p>Multi-line Code: Use Heredoc</p> <p>For multi-line code, use heredoc (<code>&lt;&lt; 'EOF'</code>) to avoid shell quoting and escaping issues.</p>"},{"location":"languages/r/#repl-behavior","title":"REPL Behavior","text":"<p>R's REPL is STATEFUL - variables and functions persist across commands.</p>"},{"location":"languages/ruby/","title":"Ruby","text":"<p>Dynamic, object-oriented language focused on simplicity and productivity</p>"},{"location":"languages/ruby/#overview","title":"Overview","text":"<p>Ruby is an elegant, dynamic programming language with a focus on simplicity and productivity. Known for its readable syntax and powerful metaprogramming capabilities, Ruby is widely used for web development (Ruby on Rails), scripting, and automation.</p> <p>With run, you can execute Ruby code instantly using the Ruby interpreter. The Ruby engine provides a stateful REPL where variables, methods, and classes persist across commands.</p>"},{"location":"languages/ruby/#language-aliases","title":"Language Aliases","text":"<pre><code>run ruby \"puts 'Hello'\"\nrun rb \"puts 'Hello'\"\nrun irb \"puts 'Hello'\"\n# Output: Hello (x3)\n</code></pre>"},{"location":"languages/ruby/#basic-usage","title":"Basic Usage","text":""},{"location":"languages/ruby/#simple-output","title":"Simple Output","text":"<pre><code>run ruby \"puts 'Hello, World!'\"\n# Output: Hello, World!\n</code></pre>"},{"location":"languages/ruby/#variables-and-interpolation","title":"Variables and Interpolation","text":"<pre><code>run ruby \"name = 'Alice'; puts \\\"Hello, #{name}!\\\"\"\n# Output: Hello, Alice!\n</code></pre>"},{"location":"languages/ruby/#arrays-and-iteration","title":"Arrays and Iteration","text":"<pre><code>run ruby \"[1, 2, 3, 4, 5].each { |n| puts n * 2 }\"\n# Output:\n# 2\n# 4\n# 6\n# 8\n# 10\n</code></pre>"},{"location":"languages/ruby/#multi-line-code","title":"Multi-line Code","text":"<p>Best Practice: Use Heredoc</p> <p>For multi-line Ruby code, use heredoc to avoid quoting issues:</p> <pre><code># RECOMMENDED: Heredoc\nrun ruby &lt;&lt; 'EOF'\nusers = [\n  { name: 'Alice', age: 30 },\n  { name: 'Bob', age: 25 }\n]\nusers.each do |user|\n  puts \"#{user[:name]}: #{user[:age]}\"\nend\nEOF\n\n# OK: Single-line with semicolons\nrun ruby \"arr = [1,2,3]; arr.each { |n| puts n * 2 }\"\n</code></pre>"},{"location":"languages/ruby/#repl-behavior","title":"REPL Behavior","text":"<p>Ruby's REPL is STATEFUL - variables and methods persist across commands.</p>"},{"location":"languages/rust/","title":"Rust","text":"<p>Systems programming with memory safety</p>"},{"location":"languages/rust/#overview","title":"Overview","text":"<p>Rust is a modern systems programming language that guarantees memory safety without a garbage collector. With run, you can compile and execute Rust code instantly without managing Cargo projects or build configurations.</p> <p>The Rust engine in run compiles your code using rustc and executes the resulting binary. Each execution is independent, so there's no persistent state between commands (unlike Python or JavaScript).</p>"},{"location":"languages/rust/#language-aliases","title":"Language Aliases","text":"<p>You can invoke Rust using these aliases:</p> <pre><code>run rust \"fn main() { println!(\\\"Hello\\\"); }\"\nrun rs \"fn main() { println!(\\\"Hello\\\"); }\"\n# Output: Hello (x2)\n</code></pre>"},{"location":"languages/rust/#basic-usage-inline-code","title":"Basic Usage - Inline Code","text":"<p>Execute Rust code directly. Note that Rust requires a main function:</p>"},{"location":"languages/rust/#hello-world","title":"Hello World","text":"<pre><code>run rust \"fn main() { println!(\\\"Hello, World!\\\"); }\"\n# Output: Hello, World!\n</code></pre>"},{"location":"languages/rust/#variables-and-types","title":"Variables and Types","text":"<pre><code>run rust \"fn main() { let x: i32 = 42; println!(\\\"x = {}\\\", x); }\"\n# Output: x = 42\n</code></pre>"},{"location":"languages/rust/#string-formatting","title":"String Formatting","text":"<pre><code>run rust \"fn main() { let name = \\\"Alice\\\"; println!(\\\"Hello, {}!\\\", name); }\"\n# Output: Hello, Alice!\n</code></pre>"},{"location":"languages/rust/#arithmetic","title":"Arithmetic","text":"<pre><code>run rust \"fn main() { let result = 10 + 20 * 3; println!(\\\"Result: {}\\\", result); }\"\n# Output: Result: 70\n</code></pre>"},{"location":"languages/rust/#multi-line-code","title":"Multi-line Code","text":"<p>Important: Use Heredoc for Multi-line Code</p> <p>Avoid multi-line strings - they cause shell errors with Rust arrays:</p> <pre><code># FAILS: zsh: event not found: [1,\nrun rust \"\nfn main() {\n    let nums = vec![1, 2, 3];\n    println!(\\\"{:?}\\\", nums);\n}\n\"\n\n# WORKS: Use heredoc\nrun rust &lt;&lt; 'EOF'\nfn main() {\n    let nums = vec![1, 2, 3];\n    println!(\"{:?}\", nums);\n}\nEOF\n\n# WORKS: Single-line\nrun rust 'fn main() { let nums = vec![1,2,3]; println!(\"{:?}\", nums); }'\n</code></pre>"},{"location":"languages/rust/#file-execution","title":"File Execution","text":"<p>Execute Rust source files:</p> <pre><code># Create a Rust file\ncat &gt; hello.rs &lt;&lt; 'EOF'\nfn main() {\n    println!(\"Hello from Rust file!\");\n}\nEOF\n\nrun rust hello.rs\n# Output: Hello from Rust file!\n</code></pre>"},{"location":"languages/rust/#complex-example-fibonacci","title":"Complex Example - Fibonacci","text":"<pre><code># Create a Fibonacci program\ncat &gt; fib.rs &lt;&lt; 'EOF'\nfn fibonacci(n: u32) -&gt; u32 {\n    match n {\n        0 =&gt; 0,\n        1 =&gt; 1,\n        _ =&gt; fibonacci(n - 1) + fibonacci(n - 2),\n    }\n}\n\nfn main() {\n    for i in 0..10 {\n        println!(\"F({}) = {}\", i, fibonacci(i));\n    }\n}\nEOF\n\nrun rust fib.rs\n# Output:\n# F(0) = 0\n# F(1) = 1\n# F(2) = 1\n# F(3) = 2\n# F(4) = 3\n# F(5) = 5\n# F(6) = 8\n# F(7) = 13\n# F(8) = 21\n# F(9) = 34\n</code></pre>"},{"location":"languages/rust/#repl-behavior","title":"REPL Behavior","text":"<p>Rust's REPL maintains state across commands. Variables, functions, and imports persist within the same REPL session.</p> <p>Start the REPL with <code>run rust</code>, then type commands at the <code>rust&gt;&gt;&gt;</code> prompt:</p> <pre><code>\u276f run rust\nrun universal REPL. Type :help for commands.\nrust&gt;&gt;&gt; let x = 42;\nrust&gt;&gt;&gt; println!(\"{}\", x);\n42\nrust&gt;&gt;&gt;\n</code></pre>"},{"location":"languages/rust/#repl-mode-interactive-rust","title":"REPL Mode - Interactive Rust","text":"<p>Start an interactive Rust REPL with 'run rust'. Rust's REPL compiles each snippet:</p> <pre><code>$ run rust\nrun universal REPL. Type :help for commands.\nrust&gt;&gt;&gt; let x = 10;\nrust&gt;&gt;&gt; println!(\"{}\", x);\n10\nrust&gt;&gt;&gt;\n</code></pre>"},{"location":"languages/rust/#advanced-features","title":"Advanced Features","text":"<p>Rust's powerful features work seamlessly with run:</p>"},{"location":"languages/rust/#pattern-matching","title":"Pattern Matching","text":"<pre><code>run rust \"\nfn main() {\n    let number = 7;\n    match number {\n        1 =&gt; println!(\\\"One\\\"),\n        2..=5 =&gt; println!(\\\"Between 2 and 5\\\"),\n        6 | 7 | 8 =&gt; println!(\\\"Six, Seven, or Eight\\\"),\n        _ =&gt; println!(\\\"Something else\\\"),\n    }\n}\n\"\n# Output: Six, Seven, or Eight\n</code></pre>"},{"location":"languages/rust/#iterators-and-closures","title":"Iterators and Closures","text":"<pre><code>run rust \"\nfn main() {\n    let numbers: Vec&lt;i32&gt; = (1..=10).collect();\n    let sum: i32 = numbers.iter().sum();\n    let evens: Vec&lt;i32&gt; = numbers.iter().filter(|&amp;&amp;x| x % 2 == 0).copied().collect();\n    println!(\\\"Sum: {}\\\", sum);\n    println!(\\\"Evens: {:?}\\\", evens);\n}\n\"\n# Output:\n# Sum: 55\n# Evens: [2, 4, 6, 8, 10]\n</code></pre>"},{"location":"languages/rust/#structs-and-methods","title":"Structs and Methods","text":"<pre><code>run rust \"\nstruct Rectangle {\n    width: u32,\n    height: u32,\n}\n\nimpl Rectangle {\n    fn area(&amp;self) -&gt; u32 {\n        self.width * self.height\n    }\n}\n\nfn main() {\n    let rect = Rectangle { width: 10, height: 20 };\n    println!(\\\"Area: {}\\\", rect.area());\n}\n\"\n# Output: Area: 200\n</code></pre>"},{"location":"languages/rust/#error-handling-with-result","title":"Error Handling with Result","text":"<pre><code>run rust \"\nfn divide(a: f64, b: f64) -&gt; Result&lt;f64, String&gt; {\n    if b == 0.0 {\n        Err(String::from(\\\"Division by zero\\\"))\n    } else {\n        Ok(a / b)\n    }\n}\n\nfn main() {\n    match divide(10.0, 2.0) {\n        Ok(result) =&gt; println!(\\\"Result: {}\\\", result),\n        Err(e) =&gt; println!(\\\"Error: {}\\\", e),\n    }\n}\n\"\n# Output: Result: 5\n</code></pre>"},{"location":"languages/rust/#common-use-cases","title":"Common Use Cases","text":"<ul> <li>Learning Rust syntax and features</li> <li>Testing algorithms and data structures</li> <li>Prototyping systems-level code</li> <li>Benchmarking performance-critical code</li> <li>Exploring Rust's ownership and borrowing</li> <li>Quick compilation checks</li> </ul>"},{"location":"languages/rust/#compilation-errors","title":"Compilation Errors","text":"<p>Rust's compiler provides detailed error messages:</p> <pre><code>run rust \"fn main() { let x: i32 = \\\"hello\\\"; }\"\n# Output: error[E0308]: mismatched types\n#         expected `i32`, found `&amp;str`\n\nrun rust \"fn main() { let s = String::from(\\\"hello\\\"); let s2 = s; println!(\\\"{}\\\", s); }\"\n# Output: error[E0382]: borrow of moved value: `s`\n</code></pre>"},{"location":"languages/rust/#limitations","title":"Limitations","text":"<ul> <li>No persistent state between REPL commands</li> <li>External crates (dependencies) are not supported</li> <li>Each execution requires compilation (slower than interpreted languages)</li> <li>Must include a main function for inline code</li> <li>No Cargo.toml or project management features</li> </ul>"},{"location":"languages/swift/","title":"Swift","text":"<p>Powerful and intuitive language for Apple platforms</p>"},{"location":"languages/swift/#overview","title":"Overview","text":"<p>Swift is Apple's modern programming language for iOS, macOS, watchOS, and tvOS development. It combines performance with safety and expressiveness.</p>"},{"location":"languages/swift/#language-aliases","title":"Language Aliases","text":"<pre><code>run swift \"print(\\\"Hello\\\")\"\nrun swiftlang \"print(\\\"Hello\\\")\"\n# Output: Hello (x2)\n</code></pre> <p>Multi-line Code: Use Heredoc</p> <p>For multi-line code, use heredoc (<code>&lt;&lt; 'EOF'</code>) to avoid shell quoting and escaping issues.</p>"},{"location":"languages/swift/#repl-behavior","title":"REPL Behavior","text":"<p>Swift's REPL maintains state across commands. Variables, functions, and types persist within the same REPL session.</p>"},{"location":"languages/typescript/","title":"TypeScript","text":"<p>Typed superset of JavaScript for large-scale applications</p>"},{"location":"languages/typescript/#overview","title":"Overview","text":"<p>TypeScript adds static typing to JavaScript, making it easier to build and maintain large applications. With run, you can execute TypeScript code using Deno.</p>"},{"location":"languages/typescript/#language-aliases","title":"Language Aliases","text":"<pre><code>run typescript \"console.log('Hello')\"\nrun ts \"console.log('Hello')\"\nrun ts-node \"console.log('Hello')\"\nrun deno \"console.log('Hello')\"\n# Output: Hello (x4)\n</code></pre>"},{"location":"languages/typescript/#important-deno-module-specifiers","title":"Important: Deno Module Specifiers","text":"<p>run uses Deno for TypeScript execution. Deno requires explicit module specifiers and does not accept bare Node builtin names like 'fs'.</p> <p>Use the node: prefix for Node builtins (for example <code>import fs from 'node:fs'</code>). Also prefer a quoted here-doc for multi-line snippets to avoid shell interpolation/globbing issues.</p>"},{"location":"languages/typescript/#correct-using-node-prefix-here-doc-recommended","title":"Correct - Using node: prefix (here-doc recommended)","text":"<pre><code>cat &lt;&lt;'EOF' | run typescript\nimport fs from \"node:fs\";\nconsole.log('[TypeScript] hello');\nEOF\n# Output: [TypeScript] hello\n</code></pre>"},{"location":"languages/typescript/#safe-inline-zsh","title":"Safe inline (zsh)","text":"<pre><code>run --lang typescript --code $'import fs from \"node:fs\";\\nconsole.log(\"[TypeScript] hello\");\\n'\n# Output: [TypeScript] hello\n</code></pre>"},{"location":"languages/typescript/#basic-typescript-example","title":"Basic TypeScript Example","text":"<pre><code>cat &lt;&lt;'EOF' | run typescript\nconst greet = (name: string): string =&gt; {\n  return `Hello, ${name}!`;\n};\nconsole.log(greet('World'));\nEOF\n# Output: Hello, World!\n</code></pre>"},{"location":"languages/typescript/#multi-line-code","title":"Multi-line Code","text":"<p>Best Practice: Use Heredoc</p> <p>For multi-line TypeScript, use heredoc to avoid shell quoting issues:</p> <pre><code># RECOMMENDED\nrun typescript &lt;&lt; 'EOF'\ninterface User {\n  name: string;\n  age: number;\n}\nconst users: User[] = [{name: 'Alice', age: 30}];\nconsole.log(users);\nEOF\n\n# OK: Single-line\nrun ts \"const x: number[] = [1,2,3]; console.log(x.map(n =&gt; n*2));\"\n</code></pre>"},{"location":"languages/typescript/#repl-behavior","title":"REPL Behavior","text":"<p>TypeScript's REPL is STATEFUL when using ts-node.</p>"},{"location":"languages/zig/","title":"Zig","text":"<p>General-purpose programming language and toolchain</p>"},{"location":"languages/zig/#overview","title":"Overview","text":"<p>Zig is a general-purpose programming language designed for robustness, optimality, and maintainability. It's a modern alternative to C with better safety and ergonomics.</p>"},{"location":"languages/zig/#language-aliases","title":"Language Aliases","text":"<pre><code>run zig \"const std = @import(\\\"std\\\"); pub fn main() void { std.debug.print(\\\"Hello\\\\n\\\", .{}); }\"\nrun ziglang \"const std = @import(\\\"std\\\"); pub fn main() void { std.debug.print(\\\"Hello\\\\n\\\", .{}); }\"\n# Output: Hello (x2)\n</code></pre> <p>Multi-line Code: Use Heredoc</p> <p>For multi-line code, use heredoc (<code>&lt;&lt; 'EOF'</code>) to avoid shell quoting and escaping issues.</p>"},{"location":"languages/zig/#repl-behavior","title":"REPL Behavior","text":"<p>Zig's REPL maintains state across commands. Variables and functions persist within the same REPL session.</p>"},{"location":"repl/","title":"REPL Mode","text":"<p>The REPL (Read-Eval-Print Loop) is an interactive mode where you can execute code line-by-line, experiment with ideas, and maintain state across commands.</p>"},{"location":"repl/#starting-the-repl","title":"Starting the REPL","text":"<p>Simply run <code>run</code> without arguments. By default, it starts in Python mode:</p> <pre><code>$ run\nrun universal REPL. Type :help for commands.\n\n&gt;&gt;&gt; \n</code></pre> <p>You're now in the REPL! Type <code>:help</code> to see available commands.</p>"},{"location":"repl/#quick-example","title":"Quick Example","text":"<pre><code>$ run\nrun universal REPL. Type :help for commands.\n\n&gt;&gt;&gt; :py\nswitched to python\n\npython&gt;&gt;&gt; x = 10\n\npython&gt;&gt;&gt; y = 20\n\npython&gt;&gt;&gt; x + y\n30\n\npython&gt;&gt;&gt; def greet(name):\n...     return f\"Hello, {name}!\"\n\npython&gt;&gt;&gt; greet(\"World\")\n'Hello, World!'\n\npython&gt;&gt;&gt; :exit\nGoodbye!\n</code></pre>"},{"location":"repl/#key-features","title":"Key Features","text":""},{"location":"repl/#stateful-sessions","title":"Stateful Sessions","text":"<p>Variables and functions persist across commands:</p> <pre><code>python&gt;&gt;&gt; items = [1, 2, 3]\n\npython&gt;&gt;&gt; items.append(4)\n\npython&gt;&gt;&gt; items\n[1, 2, 3, 4]\n</code></pre>"},{"location":"repl/#multi-language-support","title":"Multi-Language Support","text":"<p>Switch between languages instantly:</p> <pre><code>&gt;&gt;&gt; :py\npython&gt;&gt;&gt; x = 10\n\n&gt;&gt;&gt; :js\njavascript&gt;&gt;&gt; let x = 20\n\n&gt;&gt;&gt; :rust\nrust&gt;&gt;&gt; let x = 30;\n</code></pre>"},{"location":"repl/#importrequire-persists","title":"Import/Require Persists","text":"<p>Imports and requires stay loaded:</p> <pre><code>python&gt;&gt;&gt; import math\n\npython&gt;&gt;&gt; math.pi\n3.141592653589793\n\npython&gt;&gt;&gt; math.sqrt(16)\n4.0\n</code></pre>"},{"location":"repl/#quick-experimentation","title":"Quick Experimentation","text":"<p>Perfect for testing snippets:</p> <pre><code>python&gt;&gt;&gt; [x**2 for x in range(10)]\n[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n</code></pre>"},{"location":"repl/#basic-usage","title":"Basic Usage","text":""},{"location":"repl/#switching-languages","title":"Switching Languages","text":"<p>Use the <code>:lang</code> command or shortcuts:</p> <pre><code># Full command\n&gt;&gt;&gt; :lang python\nswitched to python\n\n# Or use shortcuts\n&gt;&gt;&gt; :py\nswitched to python\n\n&gt;&gt;&gt; :js\nswitched to javascript\n\n&gt;&gt;&gt; :rust\nswitched to rust\n\n&gt;&gt;&gt; :go\nswitched to go\n</code></pre>"},{"location":"repl/#available-shortcuts","title":"Available Shortcuts","text":"Shortcut Language <code>:py</code> Python <code>:js</code> JavaScript <code>:ts</code> TypeScript <code>:rust</code> Rust <code>:go</code> Go <code>:c</code> C <code>:cpp</code> C++ <code>:java</code> Java <code>:rb</code> Ruby <code>:bash</code> Bash <code>:lua</code> Lua <code>:php</code> PHP <p>See all shortcuts with <code>:languages</code>.</p>"},{"location":"repl/#listing-supported-languages","title":"Listing Supported Languages","text":"<pre><code>&gt;&gt;&gt; :languages\n</code></pre> <p>This displays a list of all languages that the run tool supports. Note that this list shows the languages supported by run, not which language runtimes are actually installed on your system.</p>"},{"location":"repl/#getting-help","title":"Getting Help","text":"<pre><code>&gt;&gt;&gt; :help\nCommands:\n  :help                 Show this help message\n  :languages            List available languages\n  :lang &lt;id&gt;            Switch to language &lt;id&gt;\n  :detect on|off        Enable or disable auto language detection\n  :reset                Reset the current language session\n  :load &lt;path&gt;          Execute a file in the current language\n  :exit, :quit          Leave the REPL\nAny language id or alias works as a shortcut, e.g. :py, :cpp, :csharp, :php.\n</code></pre>"},{"location":"repl/#working-with-state","title":"Working with State","text":""},{"location":"repl/#python-example","title":"Python Example","text":"<pre><code>python&gt;&gt;&gt; data = {\"name\": \"Alice\", \"age\": 30}\n\npython&gt;&gt;&gt; data[\"city\"] = \"Paris\"\n\npython&gt;&gt;&gt; data\n{'name': 'Alice', 'age': 30, 'city': 'Paris'}\n\npython&gt;&gt;&gt; def process(d):\n...     return {k: v for k, v in d.items() if isinstance(v, str)}\n\npython&gt;&gt;&gt; process(data)\n{'name': 'Alice', 'city': 'Paris'}\n</code></pre>"},{"location":"repl/#javascript-example","title":"JavaScript Example","text":"<pre><code>javascript&gt;&gt;&gt; let users = []\n\njavascript&gt;&gt;&gt; users.push({name: 'Alice', age: 30})\n\njavascript&gt;&gt;&gt; users.push({name: 'Bob', age: 25})\n\njavascript&gt;&gt;&gt; users\n[ { name: 'Alice', age: 30 }, { name: 'Bob', age: 25 } ]\n\njavascript&gt;&gt;&gt; users.filter(u =&gt; u.age &gt; 26)\n[ { name: 'Alice', age: 30 } ]\n</code></pre>"},{"location":"repl/#rust-example","title":"Rust Example","text":"<pre><code>rust&gt;&gt;&gt; let mut count = 0;\n\nrust&gt;&gt;&gt; count += 1;\n\nrust&gt;&gt;&gt; count\n1\n\nrust&gt;&gt;&gt; fn double(x: i32) -&gt; i32 { x * 2 }\n\nrust&gt;&gt;&gt; double(count)\n2\n</code></pre>"},{"location":"repl/#loading-files","title":"Loading Files","text":"<p>Execute a file in your current session:</p> helpers.py<pre><code>def add(a, b):\n    return a + b\n\ndef multiply(a, b):\n    return a * b\n</code></pre> <pre><code>python&gt;&gt;&gt; :load helpers.py\n\npython&gt;&gt;&gt; add(10, 5)\n15\n\npython&gt;&gt;&gt; multiply(10, 5)\n50\n</code></pre> <p>The file is executed in the current session, making its functions available.</p>"},{"location":"repl/#resetting-state","title":"Resetting State","text":"<p>Clear the current session:</p> <pre><code>python&gt;&gt;&gt; x = 100\n\npython&gt;&gt;&gt; x\n100\n\npython&gt;&gt;&gt; :reset\nsession for 'python' reset\n\npython&gt;&gt;&gt; x\nNameError: name 'x' is not defined\n</code></pre>"},{"location":"repl/#auto-detection","title":"Auto-Detection","text":"<p>Control automatic language detection:</p> <pre><code>&gt;&gt;&gt; :detect on\nauto-detect enabled\n\n&gt;&gt;&gt; print('hello')  # Auto-detects as Python\nhello\n\n&gt;&gt;&gt; :detect off\nauto-detect disabled\n\n&gt;&gt;&gt; console.log('hello')  # Stays in current language\n</code></pre>"},{"location":"repl/#multi-line-input","title":"Multi-Line Input","text":"<p>Some languages support multi-line input:</p>"},{"location":"repl/#python","title":"Python","text":"<pre><code>python&gt;&gt;&gt; def fibonacci(n):\n...     if n &lt;= 1:\n...         return n\n...     return fibonacci(n-1) + fibonacci(n-2)\n\npython&gt;&gt;&gt; [fibonacci(i) for i in range(10)]\n[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n</code></pre>"},{"location":"repl/#javascript","title":"JavaScript","text":"<pre><code>javascript&gt;&gt;&gt; function factorial(n) {\n...   if (n &lt;= 1) return 1;\n...   return n * factorial(n-1);\n... }\n\njavascript&gt;&gt;&gt; factorial(5)\n120\n</code></pre>"},{"location":"repl/#expressions-vs-statements","title":"Expressions vs Statements","text":""},{"location":"repl/#python_1","title":"Python","text":"<p>Expressions automatically print their value:</p> <pre><code>python&gt;&gt;&gt; 2 + 2\n4\n\npython&gt;&gt;&gt; \"hello\".upper()\n'HELLO'\n\npython&gt;&gt;&gt; [1, 2, 3]\n[1, 2, 3]\n</code></pre> <p>Statements don't:</p> <pre><code>python&gt;&gt;&gt; x = 10\n# No output\n\npython&gt;&gt;&gt; if True:\n...     print(\"yes\")\nyes\n</code></pre>"},{"location":"repl/#javascript_1","title":"JavaScript","text":"<p>Use the last expression as return value:</p> <pre><code>javascript&gt;&gt;&gt; 2 + 2\n4\n\njavascript&gt;&gt;&gt; \"hello\".toUpperCase()\n'HELLO'\n\njavascript&gt;&gt;&gt; [1, 2, 3].map(x =&gt; x * 2)\n[ 2, 4, 6 ]\n</code></pre>"},{"location":"repl/#practical-examples","title":"Practical Examples","text":""},{"location":"repl/#data-exploration","title":"Data Exploration","text":"<pre><code>python&gt;&gt;&gt; import json\npython&gt;&gt;&gt; import urllib.request\n\npython&gt;&gt;&gt; url = \"https://api.github.com/repos/Esubaalew/run\"\npython&gt;&gt;&gt; response = urllib.request.urlopen(url)\npython&gt;&gt;&gt; data = json.loads(response.read())\n\npython&gt;&gt;&gt; data['name']\n'run'\n\npython&gt;&gt;&gt; data['stargazers_count']\n42\n</code></pre>"},{"location":"repl/#algorithm-testing","title":"Algorithm Testing","text":"<pre><code>python&gt;&gt;&gt; def bubble_sort(arr):\n...     n = len(arr)\n...     for i in range(n):\n...         for j in range(0, n-i-1):\n...             if arr[j] &gt; arr[j+1]:\n...                 arr[j], arr[j+1] = arr[j+1], arr[j]\n...     return arr\n\npython&gt;&gt;&gt; bubble_sort([64, 34, 25, 12, 22, 11, 90])\n[11, 12, 22, 25, 34, 64, 90]\n</code></pre>"},{"location":"repl/#quick-calculations","title":"Quick Calculations","text":"<pre><code>python&gt;&gt;&gt; import statistics\n\npython&gt;&gt;&gt; data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\npython&gt;&gt;&gt; statistics.mean(data)\n5.5\n\npython&gt;&gt;&gt; statistics.median(data)\n5.5\n\npython&gt;&gt;&gt; statistics.stdev(data)\n3.0276503540974917\n</code></pre>"},{"location":"repl/#prototyping-apis","title":"Prototyping APIs","text":"<pre><code>javascript&gt;&gt;&gt; class User {\n...   constructor(name, email) {\n...     this.name = name;\n...     this.email = email;\n...   }\n...   greet() {\n...     return `Hello, I'm ${this.name}`;\n...   }\n... }\n\njavascript&gt;&gt;&gt; let user = new User('Alice', 'alice@example.com')\n\njavascript&gt;&gt;&gt; user.greet()\n\"Hello, I'm Alice\"\n</code></pre>"},{"location":"repl/#tips-tricks","title":"Tips &amp; Tricks","text":""},{"location":"repl/#1-use-tab-completion","title":"1. Use Tab Completion","text":"<p>Some languages support tab completion (depends on their REPL):</p> <pre><code>python&gt;&gt;&gt; import ma&lt;TAB&gt;\n# Suggests: math, mailbox, etc.\n</code></pre>"},{"location":"repl/#2-check-documentation","title":"2. Check Documentation","text":"<pre><code>python&gt;&gt;&gt; help(str.split)\n# Shows help for split method\n</code></pre>"},{"location":"repl/#3-quick-debugging","title":"3. Quick Debugging","text":"<pre><code>python&gt;&gt;&gt; def buggy_function(x):\n...     print(f\"Debug: x = {x}\")\n...     return x * 2\n\npython&gt;&gt;&gt; buggy_function(5)\nDebug: x = 5\n10\n</code></pre>"},{"location":"repl/#4-save-snippets","title":"4. Save Snippets","text":"<p>Save useful snippets to files and <code>:load</code> them:</p> <pre><code># Save to my_utils.py\npython&gt;&gt;&gt; :load my_utils.py\n</code></pre>"},{"location":"repl/#5-switch-languages-to-compare","title":"5. Switch Languages to Compare","text":"<pre><code>&gt;&gt;&gt; :py\npython&gt;&gt;&gt; sorted([3, 1, 4, 1, 5])\n[1, 1, 3, 4, 5]\n\n&gt;&gt;&gt; :js\njavascript&gt;&gt;&gt; [3, 1, 4, 1, 5].sort((a,b) =&gt; a-b)\n[ 1, 1, 3, 4, 5 ]\n\n&gt;&gt;&gt; :rust\nrust&gt;&gt;&gt; let mut v = vec![3,1,4,1,5]; v.sort(); v\n[1, 1, 3, 4, 5]\n</code></pre>"},{"location":"repl/#exiting-the-repl","title":"Exiting the REPL","text":"<pre><code>&gt;&gt;&gt; :exit\nGoodbye!\n\n# Or\n&gt;&gt;&gt; :quit\nGoodbye!\n\n# Or press Ctrl+D (Unix) or Ctrl+Z (Windows)\n</code></pre>"},{"location":"repl/#common-issues","title":"Common Issues","text":""},{"location":"repl/#issue-changes-not-persisting","title":"Issue: Changes Not Persisting","text":"<p>Problem: Variables disappear between commands.</p> <p>Solution: Make sure you're not switching languages or resetting:</p> <pre><code>python&gt;&gt;&gt; x = 10\npython&gt;&gt;&gt; :go  # Switch language\ngo&gt;&gt;&gt; # x is not available here (different language)\n\npython&gt;&gt;&gt; :py  # Back to Python\npython&gt;&gt;&gt; x  # But x is gone (new session)\n</code></pre>"},{"location":"repl/#issue-syntax-errors","title":"Issue: Syntax Errors","text":"<p>Problem: Multi-line input isn't recognized.</p> <p>Solution: Some languages need explicit continuation:</p> <pre><code>python&gt;&gt;&gt; def func():\n...     # Indentation matters\n...     return 42\n</code></pre>"},{"location":"repl/#issue-import-not-found","title":"Issue: Import Not Found","text":"<p>Problem: Module import fails.</p> <p>Solution: Ensure the module is installed in the language's environment:</p> <pre><code># Exit REPL and install\n$ pip install requests\n\n# Then use in REPL\n$ run\n&gt;&gt;&gt; :py\npython&gt;&gt;&gt; import requests\n</code></pre>"},{"location":"repl/#advanced-usage","title":"Advanced Usage","text":""},{"location":"repl/#scripting-the-repl","title":"Scripting the REPL","text":"<p>Pipe commands to the REPL:</p> <pre><code>echo -e \":py\\nx = 10\\nprint(x * 2)\\n:exit\" | run\n</code></pre>"},{"location":"repl/#combining-with-shell","title":"Combining with Shell","text":"<pre><code>$ run\n&gt;&gt;&gt; :bash\nbash&gt;&gt;&gt; for i in {1..5}; do echo $i; done\n1\n2\n3\n4\n5\n</code></pre>"},{"location":"repl/#persisting-session-state","title":"Persisting Session State","text":"<p>State persists within a language session until <code>:reset</code> or language change:</p> <pre><code>python&gt;&gt;&gt; import sys\npython&gt;&gt;&gt; data = [1, 2, 3]\n# This state persists\n\npython&gt;&gt;&gt; :rust\n# State is saved\n\npython&gt;&gt;&gt; :py\n# Back to Python, state is restored\npython&gt;&gt;&gt; data\n[1, 2, 3]\n</code></pre>"},{"location":"repl/#next-steps","title":"Next Steps","text":"<p>REPL Commands \u2192 Stateful Sessions \u2192 Language-Specific Behavior \u2192</p>"},{"location":"repl/commands/","title":"REPL Commands","text":"<p>Complete reference for all REPL meta-commands. These commands start with <code>:</code> and control the REPL behavior.</p>"},{"location":"repl/commands/#command-overview","title":"Command Overview","text":"Command Purpose <code>:help</code> Show help message <code>:languages</code> List available languages <code>:lang &lt;id&gt;</code> Switch to a language <code>:detect on\\|off</code> Control auto-detection <code>:load &lt;path&gt;</code> Execute a file <code>:reset</code> Clear session state <code>:exit</code> / <code>:quit</code> Exit the REPL"},{"location":"repl/commands/#help","title":"<code>:help</code>","text":"<p>Display available commands and language shortcuts.</p>"},{"location":"repl/commands/#usage","title":"Usage","text":"<pre><code>&gt;&gt;&gt; :help\n</code></pre>"},{"location":"repl/commands/#example","title":"Example","text":"<pre><code>&gt;&gt;&gt; :help\nCommands:\n  :help                 Show this help message\n  :languages            List available languages\n  :lang &lt;id&gt;            Switch to language &lt;id&gt;\n  :detect on|off        Enable or disable auto language detection\n  :reset                Reset the current language session\n  :load &lt;path&gt;          Execute a file in the current language\n  :exit, :quit          Leave the REPL\nAny language id or alias works as a shortcut, e.g. :py, :cpp, :csharp, :php.\n</code></pre>"},{"location":"repl/commands/#languages","title":"<code>:languages</code>","text":"<p>List all languages supported by the run tool.</p>"},{"location":"repl/commands/#usage_1","title":"Usage","text":"<pre><code>&gt;&gt;&gt; :languages\n</code></pre>"},{"location":"repl/commands/#example_1","title":"Example","text":"<pre><code>&gt;&gt;&gt; :languages\navailable languages: bash, c, cpp, crystal, csharp, dart, elixir, go, groovy, haskell, java, javascript, julia, kotlin, lua, nim, perl, php, python, r, ruby, rust, swift, typescript, zig\n</code></pre>"},{"location":"repl/commands/#description","title":"Description","text":"<p>This command displays a comma-separated list of all programming languages that the run tool supports. Note that this shows the languages built into run, not which language runtimes or compilers are actually installed on your system. To execute code in a specific language, you still need to have that language's runtime or compiler installed</p>"},{"location":"repl/commands/#lang-id","title":"<code>:lang &lt;id&gt;</code>","text":"<p>Switch to a specific programming language.</p>"},{"location":"repl/commands/#usage_2","title":"Usage","text":"<pre><code>&gt;&gt;&gt; :lang &lt;language_name&gt;\n</code></pre>"},{"location":"repl/commands/#parameters","title":"Parameters","text":"<ul> <li><code>&lt;language_name&gt;</code> - Language name or alias (e.g., <code>python</code>, <code>py</code>, <code>js</code>, <code>rust</code>)</li> </ul>"},{"location":"repl/commands/#examples","title":"Examples","text":"<pre><code># Switch to Python\n&gt;&gt;&gt; :lang python\nswitched to python\n\n# Use an alias\n&gt;&gt;&gt; :lang py\nswitched to python\n\n# Switch to JavaScript\n&gt;&gt;&gt; :lang javascript\nswitched to javascript\n\n# Use short alias\n&gt;&gt;&gt; :lang js\nswitched to javascript\n</code></pre>"},{"location":"repl/commands/#language-shortcuts","title":"Language Shortcuts","text":"<p>Instead of <code>:lang &lt;name&gt;</code>, use shortcuts:</p> <pre><code>&gt;&gt;&gt; :py        # Switch to Python\n&gt;&gt;&gt; :js        # Switch to JavaScript\n&gt;&gt;&gt; :rust      # Switch to Rust\n&gt;&gt;&gt; :go        # Switch to Go\n&gt;&gt;&gt; :c         # Switch to C\n&gt;&gt;&gt; :cpp       # Switch to C++\n&gt;&gt;&gt; :java      # Switch to Java\n&gt;&gt;&gt; :rb        # Switch to Ruby\n&gt;&gt;&gt; :bash      # Switch to Bash\n</code></pre>"},{"location":"repl/commands/#state-behavior","title":"State Behavior","text":"<p>When switching languages:</p> <ol> <li>Current language state is preserved</li> <li>New language starts fresh (or resumes previous session)</li> <li>Switching back restores the previous state</li> </ol> <pre><code>&gt;&gt;&gt; :py\npython&gt;&gt;&gt; x = 10\n\n&gt;&gt;&gt; :js\njavascript&gt;&gt;&gt; let y = 20\n\n&gt;&gt;&gt; :py\n# Back to Python, x still exists\npython&gt;&gt;&gt; x\n10\n</code></pre>"},{"location":"repl/commands/#detect-onoff","title":"<code>:detect on|off</code>","text":"<p>Control automatic language detection.</p>"},{"location":"repl/commands/#usage_3","title":"Usage","text":"<pre><code>&gt;&gt;&gt; :detect &lt;on|off&gt;\n</code></pre>"},{"location":"repl/commands/#parameters_1","title":"Parameters","text":"<ul> <li><code>on</code> - Enable auto-detection</li> <li><code>off</code> - Disable auto-detection</li> </ul>"},{"location":"repl/commands/#examples_1","title":"Examples","text":"<pre><code># Enable auto-detection\n&gt;&gt;&gt; :detect on\nauto-detect enabled\n\n&gt;&gt;&gt; print('hello')  # Auto-detects as Python\nhello\n\n# Disable auto-detection\n&gt;&gt;&gt; :detect off\nauto-detect disabled\n\n&gt;&gt;&gt; console.log('hello')  # Stays in current language\n# Error: current language doesn't recognize this syntax\n</code></pre>"},{"location":"repl/commands/#when-to-use","title":"When to Use","text":"<p>Enable auto-detection when: - Experimenting with different languages - Writing snippets with distinctive syntax - Quick testing</p> <p>Disable auto-detection when: - Working in a single language - Code has ambiguous syntax - Need predictable behavior</p> <p>Auto-Detection Limits</p> <p>Auto-detection works best with distinctive syntax. Ambiguous code like <code>print('hello')</code> might choose the wrong language.</p>"},{"location":"repl/commands/#load-path","title":"<code>:load &lt;path&gt;</code>","text":"<p>Execute a file in the current REPL session. The file's contents are run as if you typed them line-by-line.</p>"},{"location":"repl/commands/#usage_4","title":"Usage","text":"<pre><code>&gt;&gt;&gt; :load &lt;file_path&gt;\n</code></pre>"},{"location":"repl/commands/#parameters_2","title":"Parameters","text":"<ul> <li><code>&lt;file_path&gt;</code> - Path to file (relative or absolute)</li> </ul>"},{"location":"repl/commands/#examples_2","title":"Examples","text":"<p>Python file:</p> helpers.py<pre><code>def add(a, b):\n    return a + b\n\ndef multiply(a, b):\n    return a * b\n\nPI = 3.14159\n</code></pre> <pre><code>&gt;&gt;&gt; :py\npython&gt;&gt;&gt; :load helpers.py\n\npython&gt;&gt;&gt; add(10, 5)\n15\n\npython&gt;&gt;&gt; multiply(3, 4)\n12\n\npython&gt;&gt;&gt; PI\n3.14159\n</code></pre> <p>JavaScript file:</p> utils.js<pre><code>function greet(name) {\n    return `Hello, ${name}!`;\n}\n\nconst VERSION = '1.0.0';\n</code></pre> <pre><code>&gt;&gt;&gt; :js\njavascript&gt;&gt;&gt; :load utils.js\n\njavascript&gt;&gt;&gt; greet('Alice')\n'Hello, Alice!'\n\njavascript&gt;&gt;&gt; VERSION\n'1.0.0'\n</code></pre>"},{"location":"repl/commands/#relative-vs-absolute-paths","title":"Relative vs Absolute Paths","text":"<pre><code># Relative to current directory\n&gt;&gt;&gt; :load ./scripts/helper.py\n&gt;&gt;&gt; :load ../utils.js\n\n# Absolute path\n&gt;&gt;&gt; :load /home/user/scripts/helper.py\n&gt;&gt;&gt; :load C:\\Users\\user\\scripts\\helper.py  # Windows\n</code></pre>"},{"location":"repl/commands/#loading-multiple-files","title":"Loading Multiple Files","text":"<pre><code>python&gt;&gt;&gt; :load config.py\npython&gt;&gt;&gt; :load database.py\npython&gt;&gt;&gt; :load models.py\n# All loaded in order\n</code></pre>"},{"location":"repl/commands/#use-cases","title":"Use Cases","text":"<ol> <li>Load utility functions</li> <li>Import configurations</li> <li>Test modules in development</li> <li>Load data processing scripts</li> </ol>"},{"location":"repl/commands/#reset","title":"<code>:reset</code>","text":"<p>Clear all state in the current language session. Variables, functions, and imports are discarded.</p>"},{"location":"repl/commands/#usage_5","title":"Usage","text":"<pre><code>&gt;&gt;&gt; :reset\n</code></pre>"},{"location":"repl/commands/#example_2","title":"Example","text":"<pre><code>python&gt;&gt;&gt; x = 100\npython&gt;&gt;&gt; y = 200\npython&gt;&gt;&gt; import math\n\npython&gt;&gt;&gt; x + y\n300\n\npython&gt;&gt;&gt; :reset\nsession for 'python' reset\n\npython&gt;&gt;&gt; x\nNameError: name 'x' is not defined\n\npython&gt;&gt;&gt; math.pi\nNameError: name 'math' is not defined\n</code></pre>"},{"location":"repl/commands/#when-to-use_1","title":"When to Use","text":"<ul> <li>Start fresh without restarting REPL</li> <li>Clear accumulated state</li> <li>Fix issues from previous commands</li> <li>Memory cleanup for long sessions</li> </ul>"},{"location":"repl/commands/#language-specific-behavior","title":"Language-Specific Behavior","text":"<p>Different languages handle reset differently:</p> <p>Python: <pre><code>python&gt;&gt;&gt; x = 10\npython&gt;&gt;&gt; :reset\n# Clears all variables and imports\n</code></pre></p> <p>JavaScript: <pre><code>javascript&gt;&gt;&gt; let x = 10\njavascript&gt;&gt;&gt; :reset\n# Clears all variables and functions\n</code></pre></p> <p>Compiled (Rust/C/C++): <pre><code>rust&gt;&gt;&gt; let x = 10;\nrust&gt;&gt;&gt; :reset\n# Clears accumulated code\n</code></pre></p>"},{"location":"repl/commands/#exit-quit","title":"<code>:exit</code> / <code>:quit</code>","text":"<p>Exit the REPL and return to the shell.</p>"},{"location":"repl/commands/#usage_6","title":"Usage","text":"<pre><code>&gt;&gt;&gt; :exit\n# or\n&gt;&gt;&gt; :quit\n</code></pre>"},{"location":"repl/commands/#example_3","title":"Example","text":"<pre><code>&gt;&gt;&gt; :exit\nGoodbye!\n$\n</code></pre>"},{"location":"repl/commands/#alternative-methods","title":"Alternative Methods","text":"<p>Keyboard shortcuts: - Unix/Linux/macOS: <code>Ctrl+D</code> - Windows: <code>Ctrl+Z</code> then <code>Enter</code></p> <p>Using commands: <pre><code>&gt;&gt;&gt; :quit\nGoodbye!\n</code></pre></p>"},{"location":"repl/commands/#command-aliases","title":"Command Aliases","text":"<p>Many commands have shorter aliases:</p> Full Command Aliases <code>:language</code> <code>:lang</code> <code>:exit</code> <code>:quit</code>, <code>Ctrl+D</code> <code>:python</code> <code>:py</code> <code>:javascript</code> <code>:js</code> <code>:typescript</code> <code>:ts</code> <code>:rust</code> <code>:rs</code> (not <code>:rust</code>)"},{"location":"repl/commands/#tips-best-practices","title":"Tips &amp; Best Practices","text":""},{"location":"repl/commands/#1-use-shortcuts-for-speed","title":"1. Use Shortcuts for Speed","text":"<pre><code># Faster\n&gt;&gt;&gt; :py\n&gt;&gt;&gt; :js\n&gt;&gt;&gt; :go\n\n# Slower\n&gt;&gt;&gt; :lang python\n&gt;&gt;&gt; :lang javascript\n&gt;&gt;&gt; :lang go\n</code></pre>"},{"location":"repl/commands/#2-check-supported-languages","title":"2. Check Supported Languages","text":"<p>Check what languages run supports:</p> <pre><code>&gt;&gt;&gt; :languages\n# See all supported languages\n</code></pre>"},{"location":"repl/commands/#3-load-common-utilities","title":"3. Load Common Utilities","text":"<p>Create a personal utilities file:</p> ~/.run_helpers.py<pre><code>import json\nimport sys\nimport os\nimport re\n\ndef jprint(data):\n    print(json.dumps(data, indent=2))\n\ndef read_json(path):\n    with open(path) as f:\n        return json.load(f)\n</code></pre> <pre><code>python&gt;&gt;&gt; :load ~/.run_helpers.py\npython&gt;&gt;&gt; jprint({'name': 'Alice', 'age': 30})\n{\n  \"name\": \"Alice\",\n  \"age\": 30\n}\n</code></pre>"},{"location":"repl/commands/#4-reset-on-errors","title":"4. Reset on Errors","text":"<p>If something breaks:</p> <pre><code>python&gt;&gt;&gt; # Oops, something went wrong\npython&gt;&gt;&gt; :reset\npython&gt;&gt;&gt; # Start fresh\n</code></pre>"},{"location":"repl/commands/#5-use-help-as-reference","title":"5. Use :help as Reference","text":"<p>Forget a command?</p> <pre><code>&gt;&gt;&gt; :help\n# Quick reference\n</code></pre>"},{"location":"repl/commands/#scripting-repl-commands","title":"Scripting REPL Commands","text":"<p>You can script REPL sessions:</p> <pre><code># Create a script\ncat &lt;&lt; 'EOF' &gt; repl_script.txt\n:py\nx = 10\ny = 20\nprint(x + y)\n:exit\nEOF\n\n# Run it\ncat repl_script.txt | run\n</code></pre>"},{"location":"repl/commands/#error-handling","title":"Error Handling","text":""},{"location":"repl/commands/#unknown-command","title":"Unknown Command","text":"<pre><code>&gt;&gt;&gt; :unknown\nError: Unknown command: unknown\nType :help for available commands.\n</code></pre>"},{"location":"repl/commands/#missing-argument","title":"Missing Argument","text":"<pre><code>&gt;&gt;&gt; :lang\nError: :lang requires a language name\nUsage: :lang &lt;language&gt;\n\n&gt;&gt;&gt; :load\nError: :load requires a file path\nUsage: :load &lt;path&gt;\n</code></pre>"},{"location":"repl/commands/#language-not-found","title":"Language Not Found","text":"<pre><code>&gt;&gt;&gt; :lang nonexistent\nError: Language 'nonexistent' not found\nUse :languages to see available languages\n</code></pre>"},{"location":"repl/commands/#file-not-found","title":"File Not Found","text":"<pre><code>&gt;&gt;&gt; :load missing.py\nError: File not found: missing.py\n</code></pre>"},{"location":"repl/commands/#next-steps","title":"Next Steps","text":"<p>Stateful Sessions \u2192 Language-Specific Behavior \u2192</p>"},{"location":"repl/language-behavior/","title":"Language-Specific REPL Behavior","text":"<p>Different languages have different REPL behaviors. This guide explains how each language handles sessions.</p>"},{"location":"repl/language-behavior/#python","title":"Python","text":""},{"location":"repl/language-behavior/#session-state","title":"Session State","text":"<p>Python accumulates code in a temporary module:</p> <pre><code>python&gt;&gt;&gt; x = 10\npython&gt;&gt;&gt; def greet(name): return f\"Hello, {name}\"\npython&gt;&gt;&gt; import math\n</code></pre> <p>All persist across commands.</p>"},{"location":"repl/language-behavior/#expression-evaluation","title":"Expression Evaluation","text":"<p>Expressions automatically print their <code>repr()</code>:</p> <pre><code>python&gt;&gt;&gt; 2 + 2\n4\n\npython&gt;&gt;&gt; [1, 2, 3]\n[1, 2, 3]\n\npython&gt;&gt;&gt; \"hello\".upper()\n'HELLO'\n</code></pre> <p>Statements don't print:</p> <pre><code>python&gt;&gt;&gt; x = 10\n# No output\n\npython&gt;&gt;&gt; if True: print(\"yes\")\nyes\n</code></pre>"},{"location":"repl/language-behavior/#multi-line-input","title":"Multi-line Input","text":"<p>Use <code>...</code> for continuation:</p> <pre><code>python&gt;&gt;&gt; def factorial(n):\n...     if n &lt;= 1:\n...         return 1\n...     return n * factorial(n-1)\n\npython&gt;&gt;&gt; factorial(5)\n120\n</code></pre>"},{"location":"repl/language-behavior/#javascript","title":"JavaScript","text":""},{"location":"repl/language-behavior/#session-state_1","title":"Session State","text":"<p>Variables and functions persist:</p> <pre><code>javascript&gt;&gt;&gt; let count = 0\n\njavascript&gt;&gt;&gt; function increment() { count++; return count; }\n\njavascript&gt;&gt;&gt; increment()\n1\n\njavascript&gt;&gt;&gt; increment()\n2\n</code></pre>"},{"location":"repl/language-behavior/#expression-evaluation_1","title":"Expression Evaluation","text":"<p>Last expression is returned:</p> <pre><code>javascript&gt;&gt;&gt; 2 + 2\n4\n\njavascript&gt;&gt;&gt; [1, 2, 3].map(x =&gt; x * 2)\n[ 2, 4, 6 ]\n</code></pre>"},{"location":"repl/language-behavior/#rust","title":"Rust","text":""},{"location":"repl/language-behavior/#session-state_2","title":"Session State","text":"<p>Rust compiles snippets incrementally:</p> <pre><code>rust&gt;&gt;&gt; let mut x = 10;\n\nrust&gt;&gt;&gt; x += 5;\n\nrust&gt;&gt;&gt; x\n15\n</code></pre>"},{"location":"repl/language-behavior/#main-function","title":"Main Function","text":"<p>Rust automatically wraps code in <code>main()</code>:</p> <pre><code>rust&gt;&gt;&gt; println!(\"Hello\");\n# Wrapped: fn main() { println!(\"Hello\"); }\n</code></pre>"},{"location":"repl/language-behavior/#compilation","title":"Compilation","text":"<p>Each snippet is compiled, so errors are caught:</p> <pre><code>rust&gt;&gt;&gt; let x: i32 = \"hello\";\nerror[E0308]: mismatched types\n</code></pre>"},{"location":"repl/language-behavior/#go","title":"Go","text":""},{"location":"repl/language-behavior/#session-state_3","title":"Session State","text":"<p>Go maintains state across commands:</p> <pre><code>go&gt;&gt;&gt; x := 10\n\ngo&gt;&gt;&gt; y := 20\n\ngo&gt;&gt;&gt; x + y\n30\n</code></pre>"},{"location":"repl/language-behavior/#package-main","title":"Package Main","text":"<p>Automatically includes <code>package main</code>:</p> <pre><code>go&gt;&gt;&gt; import \"fmt\"\n\ngo&gt;&gt;&gt; fmt.Println(\"Hello\")\nHello\n</code></pre>"},{"location":"repl/language-behavior/#bash","title":"Bash","text":""},{"location":"repl/language-behavior/#session-state_4","title":"Session State","text":"<p>Variables and functions persist:</p> <pre><code>bash&gt;&gt;&gt; NAME=\"Alice\"\n\nbash&gt;&gt;&gt; greeting() { echo \"Hello, $1\"; }\n\nbash&gt;&gt;&gt; greeting $NAME\nHello, Alice\n</code></pre>"},{"location":"repl/language-behavior/#script-rewrites","title":"Script Rewrites","text":"<p>Session script is rewritten on each evaluation.</p>"},{"location":"repl/language-behavior/#cc","title":"C/C++","text":""},{"location":"repl/language-behavior/#session-state_5","title":"Session State","text":"<p>Code snippets are accumulated:</p> <pre><code>c&gt;&gt;&gt; #include &lt;stdio.h&gt;\n\nc&gt;&gt;&gt; int x = 10;\n\nc&gt;&gt;&gt; printf(\"%d\\n\", x);\n10\n</code></pre>"},{"location":"repl/language-behavior/#compilation_1","title":"Compilation","text":"<p>Compiled on each command:</p> <pre><code>c&gt;&gt;&gt; int y = \"hello\";\nerror: incompatible types\n</code></pre>"},{"location":"repl/language-behavior/#compiled-vs-interpreted","title":"Compiled vs Interpreted","text":""},{"location":"repl/language-behavior/#interpreted-languages","title":"Interpreted Languages","text":"<ul> <li>Python, JavaScript, Ruby, Bash, etc.</li> <li>Instant evaluation</li> <li>No compilation step</li> <li>Session maintained in memory</li> </ul>"},{"location":"repl/language-behavior/#compiled-languages","title":"Compiled Languages","text":"<ul> <li>Rust, Go, C, C++, etc.</li> <li>Compilation on each command</li> <li>Temporary binaries created</li> <li>Session reconstructed from history</li> </ul>"},{"location":"repl/language-behavior/#tips-by-language","title":"Tips by Language","text":""},{"location":"repl/language-behavior/#python_1","title":"Python","text":"<pre><code># Use help()\npython&gt;&gt;&gt; help(str.split)\n\n# Check type\npython&gt;&gt;&gt; type([1, 2, 3])\n&lt;class 'list'&gt;\n\n# List attributes\npython&gt;&gt;&gt; dir({})\n</code></pre>"},{"location":"repl/language-behavior/#javascript_1","title":"JavaScript","text":"<pre><code># Check prototype\njavascript&gt;&gt;&gt; Object.getPrototypeOf([])\n\n# Type checking\njavascript&gt;&gt;&gt; typeof 42\n'number'\n</code></pre>"},{"location":"repl/language-behavior/#rust_1","title":"Rust","text":"<pre><code># Type annotation\nrust&gt;&gt;&gt; let x: i32 = 10;\n\n# Explicit mut\nrust&gt;&gt;&gt; let mut count = 0;\n</code></pre>"},{"location":"repl/language-behavior/#next-steps","title":"Next Steps","text":"<p>Back to REPL Index \u2192</p>"},{"location":"repl/sessions/","title":"Stateful Sessions","text":"<p>The REPL maintains state across commands, making it perfect for interactive exploration.</p>"},{"location":"repl/sessions/#how-sessions-work","title":"How Sessions Work","text":"<p>When you switch to a language, <code>run</code> creates a session that persists:</p> <ul> <li>Variables</li> <li>Functions</li> <li>Classes</li> <li>Imports/requires</li> <li>Global state</li> </ul> <p>This state remains until you:</p> <ol> <li>Switch to another language</li> <li>Use <code>:reset</code></li> <li>Exit the REPL</li> </ol>"},{"location":"repl/sessions/#session-examples","title":"Session Examples","text":""},{"location":"repl/sessions/#python-session","title":"Python Session","text":"<pre><code>&gt;&gt;&gt; :py\npython&gt;&gt;&gt; import math\n\npython&gt;&gt;&gt; x = 10\n\npython&gt;&gt;&gt; def double(n):\n...     return n * 2\n\npython&gt;&gt;&gt; double(x)\n20\n\npython&gt;&gt;&gt; math.pi * x\n31.41592653589793\n</code></pre> <p>All variables and imports persist!</p>"},{"location":"repl/sessions/#javascript-session","title":"JavaScript Session","text":"<pre><code>&gt;&gt;&gt; :js\njavascript&gt;&gt;&gt; let data = []\n\njavascript&gt;&gt;&gt; data.push({name: 'Alice'})\n\njavascript&gt;&gt;&gt; data.push({name: 'Bob'})\n\njavascript&gt;&gt;&gt; data\n[ { name: 'Alice' }, { name: 'Bob' } ]\n</code></pre>"},{"location":"repl/sessions/#rust-session","title":"Rust Session","text":"<pre><code>&gt;&gt;&gt; :rust\nrust&gt;&gt;&gt; let mut count = 0;\n\nrust&gt;&gt;&gt; count += 1;\n\nrust&gt;&gt;&gt; count += 1;\n\nrust&gt;&gt;&gt; count\n2\n</code></pre>"},{"location":"repl/sessions/#session-isolation","title":"Session Isolation","text":"<p>Each language has its own session:</p> <pre><code>&gt;&gt;&gt; :py\npython&gt;&gt;&gt; x = 10\n\n&gt;&gt;&gt; :js\njavascript&gt;&gt;&gt; let x = 20\n\n&gt;&gt;&gt; :py\npython&gt;&gt;&gt; x\n10  # Python's x is preserved\n\n&gt;&gt;&gt; :js\njavascript&gt;&gt;&gt; x\n20  # JavaScript's x is preserved\n</code></pre>"},{"location":"repl/sessions/#resetting-sessions","title":"Resetting Sessions","text":"<p>Clear all state:</p> <pre><code>python&gt;&gt;&gt; x = 100\npython&gt;&gt;&gt; y = 200\n\npython&gt;&gt;&gt; :reset\nsession for 'python' reset\n\npython&gt;&gt;&gt; x\nNameError: name 'x' is not defined\n</code></pre>"},{"location":"repl/sessions/#session-persistence","title":"Session Persistence","text":""},{"location":"repl/sessions/#what-persists","title":"What Persists","text":"<p>Variables  Functions  Classes  Imports  Global state  </p>"},{"location":"repl/sessions/#what-doesnt-persist","title":"What Doesn't Persist","text":"<p>File I/O (files are closed)  Network connections  External processes  </p>"},{"location":"repl/sessions/#advanced-usage","title":"Advanced Usage","text":""},{"location":"repl/sessions/#building-complex-state","title":"Building Complex State","text":"<pre><code>python&gt;&gt;&gt; # Build a data structure incrementally\npython&gt;&gt;&gt; users = []\n\npython&gt;&gt;&gt; users.append({'name': 'Alice', 'age': 30})\n\npython&gt;&gt;&gt; users.append({'name': 'Bob', 'age': 25})\n\npython&gt;&gt;&gt; def find_user(name):\n...     return next(u for u in users if u['name'] == name)\n\npython&gt;&gt;&gt; find_user('Alice')\n{'name': 'Alice', 'age': 30}\n</code></pre>"},{"location":"repl/sessions/#loading-utilities","title":"Loading Utilities","text":"<pre><code>python&gt;&gt;&gt; :load utils.py\n# utils.py functions now available\n\npython&gt;&gt;&gt; :load config.py\n# config.py variables now available\n\npython&gt;&gt;&gt; # Use them together\npython&gt;&gt;&gt; process_data(config.API_KEY)\n</code></pre>"},{"location":"repl/sessions/#next-steps","title":"Next Steps","text":"<p>Language-Specific Behavior \u2192 Commands Reference \u2192</p>"}]}